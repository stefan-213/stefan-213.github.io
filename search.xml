<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法</title>
      <link href="/2025/03/19/code/"/>
      <url>/2025/03/19/code/</url>
      
        <content type="html"><![CDATA[<h1 id="由数据范围反推时间复杂度以及算法内容"><a href="#由数据范围反推时间复杂度以及算法内容" class="headerlink" title="由数据范围反推时间复杂度以及算法内容"></a>由数据范围反推时间复杂度以及算法内容</h1><p>$一般ACM或者笔试题的时间限制是1秒或2秒。$<br>$在这种情况下，C++代码中的操作次数控制在 10^7 ∼ 10^8为最佳。$</p><p>$下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：$</p><p>​$1. n≤30, 指数级别, dfs+剪枝，状态压缩dp$<br>​$2. n≤100 &#x3D;&gt; O(n^3)，floyd，dp，高斯消元$<br>​$3. n≤1000 &#x3D;&gt; O(n^2)，O(n^2logn)，dp，二分，朴素版Dijkstra、朴素版Prim、Bellman-Ford$<br>​$4. n≤10000 &#x3D;&gt; O(n\sqrt{n})，块状链表、分块、莫队$<br>​$5. n≤100000 &#x3D;&gt; O(nlogn) &#x3D;&gt; 各种sort，线段树、树状数组、set&#x2F;map、heap、拓扑排序、dijkstra+heap、$prim+heap、Kruskal、spfa、求凸包、求半平面交、$二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树$</p><p>​$6. n≤1000000 &#x3D;&gt; O(n), 以及常数较小的 O(nlogn) 算法 &#x3D;&gt; 单调队列、 hash、双指针扫描、BFS、并查集，kmp、AC自动机，常数比较小的$ $O(nlogn) 的做法：sort、树状数组、heap、dijkstra、spfa$<br>​$7. n≤10000000 &#x3D;&gt; O(n)，双指针扫描、kmp、AC自动机、线性筛素数<br>$n≤109 &#x3D;&gt; O(n√)，判断质数<br>​$8. n≤1018 &#x3D;&gt; O(logn)，最大公约数，快速幂，数位DP$<br>​$9. n≤101000 &#x3D;&gt; O((logn)^2)，高精度加减乘除$<br>​$10. n≤10100000 &#x3D;&gt; O(logk×loglogk)，k表示位数，高精度加减、FFT&#x2F;NTT$</p><p>$作者 : yxc$<br>$来源 : ACWing 闫学灿老师的分享$</p><h1 id="C-STL-总结-基于算法竞赛（悠享版）"><a href="#C-STL-总结-基于算法竞赛（悠享版）" class="headerlink" title="C++ STL 总结-基于算法竞赛（悠享版）"></a>C++ STL 总结-基于算法竞赛（悠享版）</h1><p>本文介绍常用STL知识，注重应用，强调用法，不强调原理和繁杂的记忆。看过之后请多运用，多敲代码试。</p><blockquote><p>费尽心思重新梳理了一下，注意了些美观性，修改了部分错误，添加了部分解释，编写过程非常难。</p></blockquote><p>另外C++版本一定要对（可能要加编译参数<code>-std=c++11</code>），C++11即可，C++17或20更好。</p><blockquote><p>使DEV支持C++20 ： <a href="https://blog.csdn.net/qq_50285142/article/details/122930647">https://blog.csdn.net/qq_50285142/article/details/122930647</a></p></blockquote><blockquote><p>实践才是检验真理的唯一标准！</p><p>本文章CSDN的版本：<a href="https://wyq666.blog.csdn.net/article/details/114026148">https://wyq666.blog.csdn.net/article/details/114026148</a> （CSDN更新可能不及时，毕竟多平台维护麻烦，最新版以本网站为主）</p></blockquote><h2 id="1-vector"><a href="#1-vector" class="headerlink" title="1 vector"></a>1 vector</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p><code>vector</code>为可变长数组（动态数组），定义的<code>vector</code>数组可以随时添加数值和删除元素。</p><blockquote><p>注意：<strong>在局部区域中（比如局部函数里面）开vector数组，是在堆空间里面开的。</strong></p><p>在局部区域开数组是在栈空间开的，而栈空间比较小，如果开了非常长的数组就会发生爆栈。</p><p>故局部区域<strong>不可以</strong>开大长度数组，但是可以开大长度<code>vector</code>。</p></blockquote><ul><li>头文件：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><p>一维初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a; <span class="comment">//定义了一个名为a的一维数组,数组存储int类型数据</span></span><br><span class="line">vector&lt;<span class="type">double</span>&gt; b;<span class="comment">//定义了一个名为b的一维数组，数组存储double类型数据</span></span><br><span class="line">vector&lt;node&gt; c;<span class="comment">//定义了一个名为c的一维数组，数组存储结构体类型数据，node是结构体类型</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>指定<strong>长度</strong>和<strong>初始值</strong>的初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>;<span class="comment">// 定义一个长度为n的数组，初始值默认为0，下标范围[0, n - 1]</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n, <span class="number">1</span>)</span></span>;<span class="comment">// v[0] 到 v[n - 1]所有的元素初始值均为1</span></span><br><span class="line"><span class="comment">//注意：指定数组长度之后（指定长度后的数组就相当于正常的数组了）</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>初始化中有多个元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//数组a中有五个元素，数组长度就为5</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>拷贝初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>; <span class="comment">// 两个数组中的类型必须相同,a和b都是长度为n+1，初始值都为0的数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c = a; <span class="comment">// 也是拷贝初始化,c和a是完全一样的数组</span></span><br></pre></td></tr></table></figure><p>Cpp</p></li><li><p>二维初始化<br>定义第一维固定长度为<code>5</code>，第二维可变化的二维数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v[<span class="number">5</span>];<span class="comment">//定义可变长二维数组</span></span><br><span class="line"><span class="comment">//注意：行不可变（只有5行）, 而列可变,可以在指定行添加元素</span></span><br><span class="line"><span class="comment">//第一维固定长度为5，第二维长度可以改变</span></span><br></pre></td></tr></table></figure><p>Cpp</p><blockquote><p><code>vector&lt;int&gt; v[5]</code>可以这样理解：长度为5的v数组，数组中存储的是<code>vector&lt;int&gt;</code>数据类型，而该类型就是数组形式，故<code>v</code>为二维数组。其中每个数组元素均为空，因为没有指定长度，所以第二维可变长。可以进行下述操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Cpp</p></blockquote><p>行列均可变</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化二维均可变长数组</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;<span class="comment">//定义一个行和列均可变的二维数组</span></span><br></pre></td></tr></table></figure><p>Cpp</p><blockquote><p>应用：可以在<code>v</code>数组里面装多个数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; t1&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; t2&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">v.<span class="built_in">push_back</span>(t1);</span><br><span class="line">v.<span class="built_in">push_back</span>(t2);</span><br><span class="line">v.<span class="built_in">push_back</span>(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;) <span class="comment">// &#123;3, 4, 5, 6&#125;可以作为vector的初始化,相当于一个无名vector</span></span><br></pre></td></tr></table></figure><p>Cpp</p></blockquote><p>行列长度均固定 <code>n + 1</code>行 <code>m + 1</code>列初始值为0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>Cpp</p><p>c++17或者c++20支持的形式（不常用），与上面相同的初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector <span class="title">a</span><span class="params">(n + <span class="number">1</span>, vector(m + <span class="number">1</span>, <span class="number">0</span>))</span></span>;</span><br></pre></td></tr></table></figure><p>Cpp</p></li></ul><h3 id="1-2-方法函数"><a href="#1-2-方法函数" class="headerlink" title="1.2 方法函数"></a>1.2 方法函数</h3><p>知道了如何定义初始化可变数组，下面就需要知道如何添加，删除，修改数据。</p><p><strong>c指定为数组名称</strong>，含义中会注明算法复杂度。</p><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>c.front()</code></td><td align="left">返回第一个数据O(1)�(1)</td></tr><tr><td align="left"><code>c.back()</code></td><td align="left">返回数组中的最后一个数据 O(1)�(1)</td></tr><tr><td align="left"><code>c.pop_back()</code></td><td align="left">删除最后一个数据O(1)�(1)</td></tr><tr><td align="left"><code>c.push_back(element)</code></td><td align="left">在尾部加一个数据O(1)�(1)</td></tr><tr><td align="left"><code>c.size()</code></td><td align="left">返回实际数据个数（unsigned类型）O(1)�(1)</td></tr><tr><td align="left"><code>c.clear()</code></td><td align="left">清除元素个数O(N)�(�)，N为元素个数</td></tr><tr><td align="left"><code>c.resize(n, v)</code></td><td align="left">改变数组大小为<code>n</code>,<code>n</code>个空间数值赋为<code>v</code>，如果没有默认赋值为<code>0</code></td></tr><tr><td align="left"><code>c.insert(it, x)</code></td><td align="left">向任意迭代器<code>it</code>插入一个元素<code>x</code> ，O(N)�(�)</td></tr><tr><td align="left">例：<code>c.insert(c.begin() + 2,-1)</code></td><td align="left">将<code>-1</code>插入<code>c[2]</code>的位置</td></tr><tr><td align="left"><code>c.erase(first,last)</code></td><td align="left">删除<code>[first,last)</code>的所有元素，O(N)�(�)</td></tr><tr><td align="left"><code>c.begin()</code></td><td align="left">返回首元素的迭代器（通俗来说就是地址）O(1)�(1)</td></tr><tr><td align="left"><code>c.end()</code></td><td align="left">返回最后一个元素后一个位置的迭代器（地址）O(1)�(1)</td></tr><tr><td align="left"><code>c.empty()</code></td><td align="left">判断是否为空，为空返回真，反之返回假 O(1)�(1)</td></tr></tbody></table><blockquote><p>注意：</p><ul><li><p><code>end()</code>返回的是最后一个元素的后一个位置的地址，不是最后一个元素的地址，<strong>所有STL容器均是如此</strong></p></li><li><p>使用 <code>vi.resize(n, v)</code> 函数时，若 <code>vi</code> 之前指定过大小为 <code>pre</code></p><ul><li><code>pre &gt; n</code> ：即数组大小变小了，数组会保存前 <code>n</code> 个元素，前 <code>n</code> 个元素值为原来的值，不是都为 <code>v</code></li><li><code>pre &lt; n</code> ：即数组大小变大了，数组会在后面插入 <code>n - pre</code> 个值为 <code>v</code> 的元素</li></ul><p>也就是说，这个初始值 <code>v</code> 只对新插入的元素生效。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">out</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x: a) cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>; cout &lt;&lt; <span class="string">&quot;\n&quot;</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">out</span>(a); <span class="comment">// 1 1 1 1 1</span></span><br><span class="line">    a.<span class="built_in">resize</span>(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">out</span>(a); <span class="comment">// 1 1 1 1 1 2 2 2 2 2</span></span><br><span class="line">    a.<span class="built_in">resize</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">out</span>(a); <span class="comment">// 1 1 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p></blockquote><p><strong>排序：</strong></p><p>使用<code>sort</code>排序要： <code>sort(c.begin(), c.end());</code></p><blockquote><p><code>sort()</code>为STL函数，请参考本文最后面STL函数系列。</p></blockquote><p>对所有元素进行排序，如果要对指定区间进行排序，可以对<code>sort()</code>里面的参数进行加减改动。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>()); <span class="comment">// 对[1, n]区间进行从小到大排序</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="1-3-访问"><a href="#1-3-访问" class="headerlink" title="1.3 访问"></a>1.3 访问</h3><p>共三种方法：</p><ul><li><strong>下标法</strong> ： 和普通数组一样</li></ul><p>注意：一维数组的下标是从 <code>0</code> 到 <code>v.size()-1</code> ，访问之外的数会出现越界错误</p><ul><li><strong>迭代器法</strong> ： 类似指针一样的访问 ，首先需要声明迭代器变量，和声明指针变量一样，可以根据代码进行理解（附有注释）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vi; <span class="comment">//定义一个vi数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = vi.<span class="built_in">begin</span>();<span class="comment">//声明一个迭代器指向vi的初始位置</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>使用auto</strong> ：非常简便，但是会访问数组的所有元素（特别注意0位置元素也会访问到）</li></ul><h4 id="1-3-1-下标访问"><a href="#1-3-1-下标访问" class="headerlink" title="1.3.1 下标访问"></a>1.3.1 下标访问</h4><p>直接和普通数组一样进行访问即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    vi.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下标访问 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    cout &lt;&lt; vi[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="1-3-2-迭代器访问"><a href="#1-3-2-迭代器访问" class="headerlink" title="1.3.2 迭代器访问"></a>1.3.2 迭代器访问</h4><p>类似指针，迭代器就是充当指针的作用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vi&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//迭代器访问</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;   </span><br><span class="line"><span class="comment">// 相当于声明了一个迭代器类型的变量it</span></span><br><span class="line"><span class="comment">// 通俗来说就是声明了一个指针变量</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>方式一：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = vi.<span class="built_in">begin</span>(); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    cout &lt;&lt; *(it + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>方式二</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it = vi.<span class="built_in">begin</span>(); it != vi.<span class="built_in">end</span>();it ++)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//vi.end()指向尾元素地址的下一个地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">auto</span> it = vi.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it != vi.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    it++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="1-3-3-智能指针"><a href="#1-3-3-智能指针" class="headerlink" title="1.3.3 智能指针"></a>1.3.3 智能指针</h4><p><strong>只能遍历完数组</strong>，如果要指定的内容进行遍历，需要另选方法。</p><p><code>auto</code> 能够自动识别并获取类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 输入</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x: a) &#123;</span><br><span class="line">    cin &gt;&gt; x; <span class="comment">// 可以进行输入，注意加引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 输出</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">12</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">241</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> val : v) &#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 12 241</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><blockquote><p><code>vector</code>注意：</p><ul><li><code>vi[i]</code> 和 <code>*(vi.begin() + i)</code> 等价，与指针类似。</li><li><code>vector</code>和<code>string</code>的<code>STL</code>容器支持<code>*(it + i)</code>的元素访问，其它容器可能也可以支持这种方式访问，但用的不多，可自行尝试。</li></ul></blockquote><h2 id="2-stack"><a href="#2-stack" class="headerlink" title="2 stack"></a>2 stack</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>栈为数据结构的一种，是STL中实现的一个先进后出，后进先出的容器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件需要添加</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">stack&lt;string&gt; s;</span><br><span class="line">stack&lt;node&gt; s;<span class="comment">//node是结构体类型</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="2-2-方法函数"><a href="#2-2-方法函数" class="headerlink" title="2.2 方法函数"></a>2.2 方法函数</h3><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>s.push(ele)</code></td><td align="left">元素<code>ele</code>入栈，增加元素 O(1)�(1)</td></tr><tr><td align="left"><code>s.pop()</code></td><td align="left">移除栈顶元素 O(1)�(1)</td></tr><tr><td align="left"><code>s.top()</code></td><td align="left">取得栈顶元素（但不删除）O(1)�(1)</td></tr><tr><td align="left"><code>s.empty()</code></td><td align="left">检测栈内是否为空，空为真 O(1)�(1)</td></tr><tr><td align="left"><code>s.size()</code></td><td align="left">返回栈内元素的个数 O(1)�(1)</td></tr></tbody></table><h3 id="2-3-栈遍历"><a href="#2-3-栈遍历" class="headerlink" title="2.3 栈遍历"></a>2.3 栈遍历</h3><h4 id="2-3-1-栈遍历"><a href="#2-3-1-栈遍历" class="headerlink" title="2.3.1 栈遍历"></a>2.3.1 栈遍历</h4><p>栈只能对栈顶元素进行操作，如果想要进行遍历，只能将栈中元素一个个取出来存在数组中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) st.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="type">int</span> tp = st.<span class="built_in">top</span>(); <span class="comment">// 栈顶元素</span></span><br><span class="line">    st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="2-3-2-数组模拟栈进行遍历"><a href="#2-3-2-数组模拟栈进行遍历" class="headerlink" title="2.3.2 数组模拟栈进行遍历"></a>2.3.2 数组模拟栈进行遍历</h4><p>通过一个<strong>数组</strong>对栈进行模拟，一个存放下标的变量<code>top</code>模拟指向栈顶的指针。</p><blockquote><p>一般来说单调栈和单调队列写法均可使用额外变量 <code>tt</code> 或 <code>hh</code> 来进行模拟</p></blockquote><p><strong>特点：</strong> 比<code>STL</code>的<code>stack</code>速度更快，遍历元素方便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> s[<span class="number">100</span>]; <span class="comment">// 栈 从左至右为栈底到栈顶</span></span><br><span class="line"><span class="type">int</span> tt = <span class="number">-1</span>; <span class="comment">// tt 代表栈顶指针,初始栈内无元素，tt为-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i) &#123;</span><br><span class="line">    <span class="comment">//入栈 </span></span><br><span class="line">    s[++tt] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="type">int</span> top_element = s[tt--]; </span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈操作示意</span></span><br><span class="line"><span class="comment">//  0  1  2  3  4  5  </span></span><br><span class="line"><span class="comment">//                tt</span></span><br><span class="line"><span class="comment">//出栈后示意</span></span><br><span class="line"><span class="comment">//  0  1  2  3  4 </span></span><br><span class="line"><span class="comment">//              tt</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h2 id="3-queue"><a href="#3-queue" class="headerlink" title="3 queue"></a>3 queue</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>队列是一种先进先出的数据结构。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="comment">//定义初始化</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="3-2-方法函数"><a href="#3-2-方法函数" class="headerlink" title="3.2 方法函数"></a>3.2 方法函数</h3><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>q.front()</code></td><td align="left">返回队首元素 O(1)�(1)</td></tr><tr><td align="left"><code>q.back()</code></td><td align="left">返回队尾元素 O(1)�(1)</td></tr><tr><td align="left"><code>q.push(element)</code></td><td align="left">尾部添加一个元素<code>element</code> 进队O(1)�(1)</td></tr><tr><td align="left"><code>q.pop()</code></td><td align="left">删除第一个元素 出队 O(1)�(1)</td></tr><tr><td align="left"><code>q.size()</code></td><td align="left">返回队列中元素个数，返回值类型<code>unsigned int</code> O(1)�(1)</td></tr><tr><td align="left"><code>q.empty()</code></td><td align="left">判断是否为空，队列为空，返回<code>true</code> O(1)�(1)</td></tr></tbody></table><h3 id="3-3-队列模拟"><a href="#3-3-队列模拟" class="headerlink" title="3.3 队列模拟"></a>3.3 队列模拟</h3><p>使用<code>q[]</code>数组模拟队列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hh`表示队首元素的下标，初始值为`0</span><br></pre></td></tr></table></figure><p><code>tt</code>表示队尾元素的下标，初始值为<code>-1</code>，表示刚<strong>开始队列为空</strong></p><blockquote><p>一般来说单调栈和单调队列写法均可使用额外变量 <code>tt</code> 或 <code>hh</code> 来进行模拟</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>,tt = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//    入队 </span></span><br><span class="line">    q[++tt] = <span class="number">1</span>;</span><br><span class="line">    q[++tt] = <span class="number">2</span>; </span><br><span class="line"><span class="comment">//    将所有元素出队 </span></span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>Cpp</p><h2 id="4-deque"><a href="#4-deque" class="headerlink" title="4 deque"></a>4 deque</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>首尾都可插入和删除的队列为双端队列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; dq;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="4-2-方法函数"><a href="#4-2-方法函数" class="headerlink" title="4.2 方法函数"></a>4.2 方法函数</h3><blockquote><p>注意双端队列的常数比较大。</p></blockquote><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>push_back(x)/push_front(x)</code></td><td align="left">把<code>x</code>插入队尾后 &#x2F; 队首 O(1)�(1)</td></tr><tr><td align="left"><code>back()/front()</code></td><td align="left">返回队尾 &#x2F; 队首元素 O(1)�(1)</td></tr><tr><td align="left"><code>pop_back() / pop_front()</code></td><td align="left">删除队尾 &#x2F; 队首元素 O(1)�(1)</td></tr><tr><td align="left"><code>erase(iterator it)</code></td><td align="left">删除双端队列中的某一个元素</td></tr><tr><td align="left"><code>erase(iterator first,iterator last)</code></td><td align="left">删除双端队列中<code>[first,last)</code>中的元素</td></tr><tr><td align="left"><code>empty()</code></td><td align="left">判断deque是否空 O(1)�(1)</td></tr><tr><td align="left"><code>size()</code></td><td align="left">返回deque的元素数量 O(1)�(1)</td></tr><tr><td align="left"><code>clear()</code></td><td align="left">清空deque</td></tr></tbody></table><h3 id="4-3-注意点"><a href="#4-3-注意点" class="headerlink" title="4.3 注意点"></a>4.3 注意点</h3><p>deque可以进行排序</p><blockquote><p>双端队列排序一般不用，感觉毫无用处，使用其他STL依然可以实现相同功能</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从小到大</span></span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>())</span><br><span class="line"><span class="comment">//从大到小排序</span></span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//deque里面的类型需要是int型</span></span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>(), <span class="built_in">greater</span>());<span class="comment">//高版本C++才可以用</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h2 id="5-priority-queue"><a href="#5-priority-queue" class="headerlink" title="5. priority_queue"></a>5. priority_queue</h2><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。</p><p>可以实现每次从优先队列中取出的元素都是队列中<strong>优先级最大</strong>的一个。</p><p>它的底层是通过<strong>堆</strong>来实现的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="5-2-函数方法"><a href="#5-2-函数方法" class="headerlink" title="5.2 函数方法"></a>5.2 函数方法</h3><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>q.top()</code></td><td align="left">访问队首元素 O(1)�(1)</td></tr><tr><td align="left"><code>q.push()</code></td><td align="left">入队 O(logN)�(����)</td></tr><tr><td align="left"><code>q.pop()</code></td><td align="left">堆顶（队首）元素出队 O(logN)�(����)</td></tr><tr><td align="left"><code>q.size()</code></td><td align="left">队列元素个数 O(1)�(1)</td></tr><tr><td align="left"><code>q.empty()</code></td><td align="left">是否为空 O(1)�(1)</td></tr><tr><td align="left"><strong>注意</strong>没有<code>clear()</code>！</td><td align="left">不提供该方法</td></tr><tr><td align="left">优先队列只能通过<code>top()</code>访问队首元素（优先级最高的元素）</td><td align="left"></td></tr></tbody></table><h3 id="5-3-设置优先级"><a href="#5-3-设置优先级" class="headerlink" title="5.3 设置优先级"></a>5.3 设置优先级</h3><h4 id="5-3-1-基本数据类型的优先级"><a href="#5-3-1-基本数据类型的优先级" class="headerlink" title="5.3.1 基本数据类型的优先级"></a>5.3.1 基本数据类型的优先级</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pq; <span class="comment">// 默认大根堆, 即每次取出的元素是队列中的最大值</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q; <span class="comment">// 小根堆, 每次取出的元素是队列中的最小值</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>参数解释：</p><ul><li><p>第一个参数：就是优先队列中存储的数据类型</p></li><li><p>第二个参数：</p><p><code>vector&lt;int&gt;</code> 是用来承载底层数据结构堆的容器，若优先队列中存放的是<code>double</code>型数据，就要填<code>vector&lt; double &gt;</code><br><strong>总之存的是什么类型的数据，就相应的填写对应类型。同时也要改动第三个参数里面的对应类型。</strong></p></li><li><p>第三个参数：<br><code>less&lt;int&gt;</code> 表示数字大的优先级大，堆顶为最大的数字<br><code>greater&lt;int&gt;</code>表示数字小的优先级大，堆顶为最小的数字<br><strong>int代表的是数据类型，也要填优先队列中存储的数据类型</strong></p></li></ul><hr><p>下面介绍基础数据类型优先级设置的写法：</p><ol><li>基础写法（非常常用）：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q1; <span class="comment">// 默认大根堆, 即每次取出的元素是队列中的最大值</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt; &gt; q2; <span class="comment">// 大根堆, 每次取出的元素是队列中的最大值，同第一行</span></span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q3; <span class="comment">// 小根堆, 每次取出的元素是队列中的最小值</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ol><li>自定义排序（不常见，主要是写着麻烦）：</li></ol><p>下面的代码比较长，基础类型优先级写着太麻烦，用第一种即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp1</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp2</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp1&gt; q1; <span class="comment">// 小根堆</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp2&gt; q2; <span class="comment">// 大根堆</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="5-3-2-高级数据类型结构体结构体优先级"><a href="#5-3-2-高级数据类型结构体结构体优先级" class="headerlink" title="5.3.2 高级数据类型结构体结构体优先级"></a>5.3.2 高级数据类型结构体结构体优先级</h4><blockquote><p>即优先队列中存储结构体类型，必须要设置优先级，即结构体的比较运算（因为优先队列的堆中要比较大小，才能将对应最大或者最小元素移到堆顶）。</p></blockquote><p>优先级设置可以定义在<strong>结构体内</strong>进行小于号重载，也可以定义在<strong>结构体外</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要排序的结构体（存储在优先队列里面的）</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>版本一：自定义全局比较规则</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义的比较结构体</span></span><br><span class="line"><span class="comment">//注意：cmp是个结构体 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;<span class="comment">//自定义堆的排序规则 </span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Point&amp; a,<span class="type">const</span> Point&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化定义， </span></span><br><span class="line">priority_queue&lt;Point, vector&lt;Point&gt;, cmp&gt; q; <span class="comment">// x大的在堆顶</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>版本二：直接在结构体里面写</strong></li></ul><blockquote><p>因为是在结构体内部自定义的规则，一旦需要比较结构体，自动调用结构体内部重载运算符规则。</p></blockquote><p>结构体内部有两种方式：</p><p><strong>方式一</strong> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (Point a, Point b) &#123;<span class="comment">//为两个结构体参数，结构体调用一定要写上friend</span></span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;<span class="comment">//按x从小到大排，x大的在堆顶</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>方式二</strong> ：（推荐此种）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Point &amp;a) <span class="type">const</span> &#123;<span class="comment">//直接传入一个参数，不必要写friend</span></span><br><span class="line">        <span class="keyword">return</span> x &lt; a.x;<span class="comment">//按x升序排列，x大的在堆顶</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Cpp</p><p>优先队列的定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;Point&gt; q;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>注意：</strong> 优先队列自定义排序规则和<code>sort()</code>函数定义<code>cmp</code>函数很相似，但是最后返回的情况是<strong>相反</strong>的。即相同的符号，最后定义的排列顺序是完全相反的。<br>所以只需要记住<code>sort</code>的排序规则和优先队列的排序规则是相反的就可以了。</p><blockquote><p>当理解了堆的原理就会发现，堆调整时比较顺序是孩子和父亲节点进行比较，如果是 <code>&gt;</code> ，那么孩子节点要大于父亲节点，堆顶自然是最小值。</p></blockquote><h3 id="5-4-存储特殊类型的优先级"><a href="#5-4-存储特殊类型的优先级" class="headerlink" title="5.4 存储特殊类型的优先级"></a>5.4 存储特殊类型的优先级</h3><h4 id="5-4-1-存储pair类型"><a href="#5-4-1-存储pair类型" class="headerlink" title="5.4.1 存储pair类型"></a>5.4.1 存储pair类型</h4><ul><li>排序规则：<br>默认先对<code>pair</code>的<code>first</code>进行降序排序，然后再对<code>second</code>降序排序<br>对<code>first</code>先排序，大的排在前面，如果<code>first</code>元素相同，再对<code>second</code>元素排序，保持大的在前面。</li></ul><blockquote><p><code>pair</code>请参考下文</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">7</span>, <span class="number">8</span>&#125;);</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">7</span>, <span class="number">9</span>&#125;);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">8</span>, <span class="number">7</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">top</span>().first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">top</span>().second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><blockquote><p>结果：<br>8 7<br>7 9<br>7 8</p></blockquote><h2 id="6-map"><a href="#6-map" class="headerlink" title="6. map"></a>6. map</h2><h3 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6.1 介绍"></a>6.1 介绍</h3><p>映射类似于函数的对应关系，每个<code>x</code>对应一个<code>y</code>，而<code>map</code>是每个键对应一个值。会python的朋友学习后就会知道这和python的字典非常类似。</p><blockquote><p>比如说：学习 对应 看书，学习 是键，看书 是值。<br>学习-&gt;看书<br>玩耍 对应 打游戏，玩耍 是键，打游戏 是值。<br>玩耍-&gt;打游戏</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">map&lt;string, string&gt; mp;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; mp;</span><br><span class="line">map&lt;<span class="type">int</span>, node&gt; mp;<span class="comment">//node是结构体类型</span></span><br></pre></td></tr></table></figure><p>Cpp</p><blockquote><p>map特性：map会按照键的顺序从小到大自动排序，键的类型必须可以比较大小</p></blockquote><h3 id="6-2-函数方法"><a href="#6-2-函数方法" class="headerlink" title="6.2 函数方法"></a>6.2 函数方法</h3><h4 id="6-2-1-函数方法"><a href="#6-2-1-函数方法" class="headerlink" title="6.2.1 函数方法"></a>6.2.1 函数方法</h4><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>mp.find(key)</code></td><td align="left">返回键为key的映射的迭代器 O(logN)�(����) 注意：用find函数来定位数据出现位置，它返回一个迭代器。当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回mp.end()��.���()</td></tr><tr><td align="left"><code>mp.erase(it)</code></td><td align="left">删除迭代器对应的键和值O(1)�(1)</td></tr><tr><td align="left"><code>mp.erase(key)</code></td><td align="left">根据映射的键删除键和值 O(logN)�(����)</td></tr><tr><td align="left"><code>mp.erase(first,last)</code></td><td align="left">删除左闭右开区间迭代器对应的键和值 O(last−first)�(����−�����)</td></tr><tr><td align="left"><code>mp.size()</code></td><td align="left">返回映射的对数O(1)�(1)</td></tr><tr><td align="left"><code>mp.clear()</code></td><td align="left">清空map中的所有元素O(N)�(�)</td></tr><tr><td align="left"><code>mp.insert()</code></td><td align="left">插入元素，插入时要构造键值对</td></tr><tr><td align="left"><code>mp.empty()</code></td><td align="left">如果map为空，返回true，否则返回false</td></tr><tr><td align="left"><code>mp.begin()</code></td><td align="left">返回指向map第一个元素的迭代器（地址）</td></tr><tr><td align="left"><code>mp.end()</code></td><td align="left">返回指向map尾部的迭代器（最后一个元素的<strong>下一个</strong>地址）</td></tr><tr><td align="left"><code>mp.rbegin()</code></td><td align="left">返回指向map最后一个元素的迭代器（地址）</td></tr><tr><td align="left"><code>mp.rend()</code></td><td align="left">返回指向map第一个元素前面(上一个）的逆向迭代器（地址）</td></tr><tr><td align="left"><code>mp.count(key)</code></td><td align="left">查看元素是否存在，因为map中键是唯一的，所以存在返回1，不存在返回0</td></tr><tr><td align="left"><code>mp.lower_bound()</code></td><td align="left">返回一个迭代器，指向键值&gt;&#x3D; <strong>key</strong>的第一个元素</td></tr><tr><td align="left"><code>mp.upper_bound()</code></td><td align="left">返回一个迭代器，指向键值&gt; key的第一个元素</td></tr></tbody></table><h4 id="6-2-2-注意点"><a href="#6-2-2-注意点" class="headerlink" title="6.2.2 注意点"></a>6.2.2 注意点</h4><p><strong>下面说明部分函数方法的注意点</strong></p><blockquote><p>注意：<br>查找元素是否存在时，可以使用<br>①<code>mp.find()</code> ② <code>mp.count()</code> ③ <code>mp[key]</code><br>但是第三种情况，如果不存在对应的<code>key</code>时，会自动创建一个键值对（产生一个额外的键值对空间）<br>所以为了不增加额外的空间负担，最好使用前两种方法</p></blockquote><h4 id="6-2-3-迭代器进行正反向遍历"><a href="#6-2-3-迭代器进行正反向遍历" class="headerlink" title="6.2.3 迭代器进行正反向遍历"></a>6.2.3 迭代器进行正反向遍历</h4><ul><li><code>mp.begin()</code>和<code>mp.end()</code>用法：</li></ul><p><strong>用于正向遍历map</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">mp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">mp[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">mp[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>(it != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    it ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><ul><li><code>mp.rbegin()</code>和<code>mp.rend()</code></li></ul><p><strong>用于逆向遍历map</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">mp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">mp[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">mp[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">auto</span> it = mp.<span class="built_in">rbegin</span>();</span><br><span class="line"><span class="keyword">while</span>(it != mp.<span class="built_in">rend</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    it ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">2 3</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h4 id="6-2-4-二分查找"><a href="#6-2-4-二分查找" class="headerlink" title="6.2.4 二分查找"></a>6.2.4 二分查找</h4><p>二分查找<code>lower_bound() upper_bound()</code></p><blockquote><p>map的二分查找以第一个元素（即键为准），对<strong>键</strong>进行二分查找<br>返回值为map迭代器类型</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">2</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">8</span>, <span class="number">2</span>&#125;, &#123;<span class="number">6</span>, <span class="number">2</span>&#125;&#125;;<span class="comment">//有序</span></span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it1 = m.<span class="built_in">lower_bound</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; it1-&gt;first &lt;&lt; <span class="string">&quot;\n&quot;</span>;<span class="comment">//it1-&gt;first=2</span></span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it2 = m.<span class="built_in">upper_bound</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; it2-&gt;first &lt;&lt; <span class="string">&quot;\n&quot;</span>;<span class="comment">//it2-&gt;first=6</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="6-3-添加元素"><a href="#6-3-添加元素" class="headerlink" title="6.3 添加元素"></a>6.3 添加元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先声明</span></span><br><span class="line">map&lt;string, string&gt; mp;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>方式一：</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mp[<span class="string">&quot;学习&quot;</span>] = <span class="string">&quot;看书&quot;</span>;</span><br><span class="line">mp[<span class="string">&quot;玩耍&quot;</span>] = <span class="string">&quot;打游戏&quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>方式二：插入元素构造键值对</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;vegetable&quot;</span>,<span class="string">&quot;蔬菜&quot;</span>));</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>方式三：</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,string&gt;(<span class="string">&quot;fruit&quot;</span>,<span class="string">&quot;水果&quot;</span>));</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>方式四:</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mp.<span class="built_in">insert</span>(&#123;<span class="string">&quot;hahaha&quot;</span>,<span class="string">&quot;wawawa&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="6-4-访问元素"><a href="#6-4-访问元素" class="headerlink" title="6.4 访问元素"></a>6.4 访问元素</h3><h4 id="6-4-1-下标访问"><a href="#6-4-1-下标访问" class="headerlink" title="6.4.1 下标访问"></a>6.4.1 下标访问</h4><p>大部分情况用于访问单个元素大部分情况用于访问单个元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mp[<span class="string">&quot;菜哇菜&quot;</span>] = <span class="string">&quot;强哇强&quot;</span>;</span><br><span class="line">cout &lt;&lt; mp[<span class="string">&quot;菜哇菜&quot;</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;<span class="comment">//只是简写的一个例子，程序并不完整</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="6-4-2-遍历访问"><a href="#6-4-2-遍历访问" class="headerlink" title="6.4.2 遍历访问"></a>6.4.2 遍历访问</h4><ul><li>方式一：迭代器访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,string&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    <span class="comment">//      键                 值 </span></span><br><span class="line">    <span class="comment">// it是结构体指针访问所以要用 -&gt; 访问</span></span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">//*it是结构体变量 访问要用 . 访问</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;(*it).first&lt;&lt;&quot; &quot;&lt;&lt;(*it).second;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>方式二：智能指针访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : mp)</span><br><span class="line">cout &lt;&lt; i.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; endl;<span class="comment">//键，值</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>方式三：对指定单个元素访问</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">find</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">cout &lt;&lt; it -&gt; first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;  it-&gt;second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>方式四：c++17特性才具有</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [x, y] : mp)</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//x,y对应键和值</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="6-5-与unordered-map的比较"><a href="#6-5-与unordered-map的比较" class="headerlink" title="6.5 与unordered_map的比较"></a>6.5 与unordered_map的比较</h3><p>这里就不单开一个大目录讲unordered_map了，直接在map里面讲了。</p><h4 id="6-5-1-内部实现原理"><a href="#6-5-1-内部实现原理" class="headerlink" title="6.5.1 内部实现原理"></a>6.5.1 内部实现原理</h4><p><strong>map</strong>：内部用<strong>红黑树</strong>实现，具有<strong>自动排序</strong>（按键从小到大）功能。</p><p><strong>unordered_map</strong>：内部用<strong>哈希表</strong>实现，内部元素无序杂乱。</p><h4 id="6-5-2-效率比较"><a href="#6-5-2-效率比较" class="headerlink" title="6.5.2 效率比较"></a>6.5.2 效率比较</h4><p><strong>map</strong>：</p><ul><li>优点：内部用红黑树实现，内部元素具有有序性，查询删除等操作复杂度为O(logN)�(����)</li><li>缺点：占用空间，红黑树里每个节点需要保存父子节点和红黑性质等信息，空间占用较大。</li></ul><p><strong>unordered_map</strong>：</p><ul><li>优点：内部用哈希表实现，查找速度非常快（适用于大量的查询操作）。</li><li>缺点：建立哈希表比较耗时。</li></ul><blockquote><p>两者方法函数基本一样，差别不大。</p><p>注意：</p><ul><li><p>随着内部元素越来越多，两种容器的插入删除查询操作的时间都会逐渐变大，效率逐渐变低。</p></li><li><p>使用<code>[]</code>查找元素时，如果元素不存在，两种容器<strong>都是</strong>创建一个空的元素；如果存在，会正常索引对应的值。所以如果查询过多的不存在的元素值，容器内部会创建大量的空的键值对，后续查询创建删除效率会<strong>大大降低</strong>。</p></li><li><p>查询容器内部元素的最优方法是：先判断存在与否，再索引对应值（适用于这两种容器）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 map 为例</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="type">int</span> x = <span class="number">999999999</span>;</span><br><span class="line"><span class="keyword">if</span>(mp.<span class="built_in">count</span>(x)) <span class="comment">// 此处判断是否存在x这个键</span></span><br><span class="line">    cout &lt;&lt; mp[x] &lt;&lt; <span class="string">&quot;\n&quot;</span>;   <span class="comment">// 只有存在才会索引对应的值，避免不存在x时多余空元素的创建</span></span><br></pre></td></tr></table></figure><p>Cpp</p></li></ul></blockquote><p>另外：</p><blockquote><p>还有一种映射：<code>multimap</code></p><p>键可以重复，即一个键对应多个值，如要了解，可以自行搜索。</p></blockquote><h3 id="7-set"><a href="#7-set" class="headerlink" title="7 set"></a>7 set</h3><h4 id="7-1-介绍"><a href="#7-1-介绍" class="headerlink" title="7.1 介绍"></a>7.1 介绍</h4><p>set容器中的元素不会重复，当插入集合中已有的元素时，并不会插入进去，而且set容器里的元素自动从小到大排序。</p><p>即：set里面的元素<strong>不重复 且有序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="7-2-函数方法"><a href="#7-2-函数方法" class="headerlink" title="7.2 函数方法"></a>7.2 函数方法</h3><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>s.begin()</code></td><td align="left">返回set容器的第一个元素的地址（迭代器）O(1)�(1)</td></tr><tr><td align="left"><code>s.end()</code></td><td align="left">返回set容器的最后一个元素的下一个地址（迭代器）O(1)�(1)</td></tr><tr><td align="left"><code>s.rbegin()</code></td><td align="left">返回逆序迭代器，指向容器元素最后一个位置O(1)�(1)</td></tr><tr><td align="left"><code>s.rend()</code></td><td align="left">返回逆序迭代器，指向容器第一个元素前面的位置O(1)�(1)</td></tr><tr><td align="left"><code>s.clear()</code></td><td align="left">删除set容器中的所有的元素,返回unsigned int类型O(N)�(�)</td></tr><tr><td align="left"><code>s.empty()</code></td><td align="left">判断set容器是否为空O(1)�(1)</td></tr><tr><td align="left"><code>s.insert()</code></td><td align="left">插入一个元素</td></tr><tr><td align="left"><code>s.size()</code></td><td align="left">返回当前set容器中的元素个数O(1)�(1)</td></tr><tr><td align="left"><code>erase(iterator)</code></td><td align="left">删除定位器iterator指向的值</td></tr><tr><td align="left"><code>erase(first,second）</code></td><td align="left">删除定位器first和second之间的值</td></tr><tr><td align="left"><code>erase(key_value)</code></td><td align="left">删除键值key_value的值</td></tr><tr><td align="left">查找</td><td align="left"></td></tr><tr><td align="left"><code>s.find(element)</code></td><td align="left">查找set中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器</td></tr><tr><td align="left"><code>s.count(element)</code></td><td align="left">查找set中的元素出现的个数，由于set中元素唯一，此函数相当于查询element是否出现</td></tr><tr><td align="left"><code>s.lower_bound(k)</code></td><td align="left">返回大于等于k的第一个元素的迭代器O(logN)�(����)</td></tr><tr><td align="left"><code>s.upper_bound(k)</code></td><td align="left">返回大于k的第一个元素的迭代器O(logN)�(����)</td></tr></tbody></table><h3 id="7-3-访问"><a href="#7-3-访问" class="headerlink" title="7.3 访问"></a>7.3 访问</h3><ul><li><strong>迭代器访问</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>智能指针</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : s)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>访问最后一个元素</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">cout &lt;&lt; *s.<span class="built_in">rbegin</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>Cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//第二种</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator iter = s.<span class="built_in">end</span>();</span><br><span class="line">iter--;</span><br><span class="line">cout &lt;&lt; (*iter) &lt;&lt; endl; <span class="comment">//打印2;</span></span><br></pre></td></tr></table></figure><p>Cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三种</span></span><br><span class="line">cout &lt;&lt; *(--s.<span class="built_in">end</span>()) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="7-4-重载"><a href="#7-4-重载" class="headerlink" title="7.4 重载&lt;运算符"></a>7.4 重载&lt;运算符</h3><ul><li><strong>基础数据类型</strong></li></ul><p>方式一：改变set排序规则，set中默认使用less比较器，即从小到大排序。（常用）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s1; <span class="comment">// 默认从小到大排序</span></span><br><span class="line">set&lt;<span class="type">int</span>, greater&lt;<span class="type">int</span>&gt; &gt; s2; <span class="comment">// 从大到小排序</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>方式二：重载运算符。（很麻烦，不太常用，没必要）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载 &lt; 运算符</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; u, <span class="type">const</span> <span class="type">int</span>&amp; v)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">       <span class="comment">// return + 返回条件</span></span><br><span class="line">       <span class="keyword">return</span> u &gt; v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;<span class="type">int</span>, cmp&gt; s; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    s.<span class="built_in">insert</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : s)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">// 10 9 8 7 6 5 4 3 2 1</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>方式三：初始化时使用匿名函数定义比较规则</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>, function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>)&gt;&gt; <span class="built_in">s</span>([&amp;](<span class="type">int</span> i, <span class="type">int</span> j)&#123;</span><br><span class="line">    <span class="keyword">return</span> i &gt; j; <span class="comment">// 从大到小</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    s.<span class="built_in">insert</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : s)</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>高级数据类型（结构体）</strong></li></ul><p>直接重载结构体运算符即可，让结构体可以比较。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Point &amp;p) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="comment">// 按照点的横坐标从小到大排序,如果横坐标相同,纵坐标从小到大</span></span><br><span class="line">        <span class="keyword">if</span>(x == p.x)</span><br><span class="line">            <span class="keyword">return</span> y &lt; p.y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; p.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">set&lt;Point&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    s.<span class="built_in">insert</span>(&#123;x, y&#125;);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/* 输入</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : s)</span><br><span class="line">    cout &lt;&lt; i.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.y &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="7-5-其它set"><a href="#7-5-其它set" class="headerlink" title="7.5 其它set"></a>7.5 其它set</h3><p><code>multiset</code>:元素可以重复，且元素有序</p><p><code>unordered_set</code> ：元素无序且只能出现一次</p><p><code>unordered_multiset</code> ： 元素无序可以出现多次</p><h2 id="8-pair"><a href="#8-pair" class="headerlink" title="8 pair"></a>8 pair</h2><h3 id="8-1-介绍"><a href="#8-1-介绍" class="headerlink" title="8.1 介绍"></a>8.1 介绍</h3><p>pair只含有两个元素，可以看作是只有两个元素的结构体。</p><p><strong>应用：</strong></p><ul><li>代替二元结构体</li><li>作为map键值对进行插入（代码如下）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,<span class="type">int</span>&gt;mp;</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">&quot;xingmaqi&quot;</span>,<span class="number">1</span>));</span><br><span class="line"><span class="comment">// mp.insert(make_pair(&quot;xingmaqi&quot;, 1));</span></span><br><span class="line"><span class="comment">// mp.insert(&#123;&quot;xingmaqi&quot;, 1&#125;);</span></span><br></pre></td></tr></table></figure><p>Cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.初始化定义</span></span><br><span class="line"><span class="function">pair&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;wangyaqi&quot;</span>,<span class="number">1</span>)</span></span>;<span class="comment">//带初始值的</span></span><br><span class="line">pair&lt;string,<span class="type">int</span>&gt; p;<span class="comment">//不带初始值的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.赋值</span></span><br><span class="line">p = &#123;<span class="string">&quot;wang&quot;</span>, <span class="number">18</span>&#125;;</span><br><span class="line">p = <span class="built_in">make_pair</span>(<span class="string">&quot;wang&quot;</span>, <span class="number">18</span>);</span><br><span class="line">p = <span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;wang&quot;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="8-2-访问"><a href="#8-2-访问" class="headerlink" title="8.2 访问"></a>8.2 访问</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结构体数组</span></span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; p[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//和结构体类似，first代表第一个元素，second代表第二个元素</span></span><br><span class="line">    cout &lt;&lt; p[i].first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p[i].second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><h2 id="9-string"><a href="#9-string" class="headerlink" title="9 string"></a>9 string</h2><h3 id="9-1-介绍"><a href="#9-1-介绍" class="headerlink" title="9.1 介绍"></a>9.1 介绍</h3><p>string是一个字符串类，和<code>char</code>型字符串类似。</p><p>可以把string理解为一个字符串类型，像int一样可以定义</p><h3 id="9-2-初始化及定义"><a href="#9-2-初始化及定义" class="headerlink" title="9.2 初始化及定义"></a>9.2 初始化及定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">string str1; <span class="comment">//生成空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(<span class="string">&quot;123456789&quot;</span>)</span></span>; <span class="comment">//生成&quot;1234456789&quot;的复制品 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function">string <span class="title">str3</span><span class="params">(<span class="string">&quot;12345&quot;</span>, <span class="number">0</span>, <span class="number">3</span>)</span></span>;<span class="comment">//结果为&quot;123&quot; ，从0位置开始，长度为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line"><span class="function">string <span class="title">str4</span><span class="params">(<span class="string">&quot;123456&quot;</span>, <span class="number">5</span>)</span></span>; <span class="comment">//结果为&quot;12345&quot; ，长度为5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.</span></span><br><span class="line"><span class="function">string <span class="title">str5</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;2&#x27;</span>)</span></span>; <span class="comment">//结果为&quot;22222&quot; ,构造5个字符&#x27;2&#x27;连接而成的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.</span></span><br><span class="line"><span class="function">string <span class="title">str6</span><span class="params">(str2, <span class="number">2</span>)</span></span>; <span class="comment">//结果为&quot;3456789&quot;，截取第三个元素（2对应第三位）到最后</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>简单使用</strong></p><ul><li>访问单个字符：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s = <span class="string">&quot;xing ma qi!!!&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">        cout &lt;&lt; s[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><code>string</code> 数组使用：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        s[i] = <span class="string">&quot;loading...  &quot;</span> ;</span><br><span class="line">        cout &lt;&lt; s[i] &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loading...  1</span><br><span class="line">loading...  2</span><br><span class="line">loading...  3</span><br><span class="line">loading...  4</span><br><span class="line">loading...  5</span><br><span class="line">loading...  6</span><br><span class="line">loading...  7</span><br><span class="line">loading...  8</span><br><span class="line">loading...  9</span><br></pre></td></tr></table></figure><h3 id="9-3-string-特性"><a href="#9-3-string-特性" class="headerlink" title="9.3 string 特性"></a>9.3 string 特性</h3><ul><li><p>支持<strong>比较</strong>运算符<br>string字符串支持常见的比较操作符<code>（&gt;,&gt;=,&lt;,&lt;=,==,!=）</code>，支持<code>string</code>与<code>C-string</code>的比较（如 <code>str &lt; &quot;hello&quot;</code>）。<br>在使用<code>&gt;,&gt;=,&lt;,&lt;=</code>这些操作符的时候是根据“当前字符特性”将字符按 <code>字典顺序</code> 进行逐一得 比较。字典排序靠前的字符小， 比较的顺序是从前向后比较，遇到不相等的字符就按这个位置上的两个字符的比较结果确定两个字符串的大小（前面减后面）。</p><p>同时，<code>string (&quot;aaaa&quot;) &lt;string(aaaaa)</code>。</p><ul><li><p>支持<code>+</code><strong>运算</strong>符，代表拼接字符串<br>string字符串可以拼接，通过”+”运算符进行拼接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">string s2 = <span class="string">&quot;456&quot;</span>;</span><br><span class="line">string s = s1 + s2;</span><br><span class="line">cout &lt;&lt; s;   <span class="comment">//123456</span></span><br></pre></td></tr></table></figure><p>Cpp</p></li></ul></li></ul><h3 id="9-4-读入详解"><a href="#9-4-读入详解" class="headerlink" title="9.4 读入详解"></a>9.4 读入详解</h3><p><strong>读入字符串，遇空格，回车结束</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>读入一行字符串（包括空格），遇回车结束</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s);</span><br></pre></td></tr></table></figure><p>Cpp</p><p>注意: <code>getline(cin, s)</code>会获取前一个输入的换行符，需要在前面添加读取换行符的语句。如：<code>getchar()</code> 或<code>cin.get()</code></p><p>错误读取：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">getline</span>(cin, s); <span class="comment">//此时读取相当于读取了前一个回车字符</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>正确读取：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">getchar</span>(); <span class="comment">//cin.get()</span></span><br><span class="line"><span class="built_in">getline</span>(cin, s);<span class="comment">//可正确读入下一行的输入</span></span><br></pre></td></tr></table></figure><p>Cpp</p><blockquote><p><code>cin</code>与<code>cin.getline()</code>混用</p><p>cin输入完后，回车，cin遇到回车结束输入，但回车还在输入流中，cin并不会清除，导致<code>getline()</code>读取回车，结束。<br>需要在cin后面加<code>cin.ignore()</code>；主动删除输入流中的换行符。（不常用）</p></blockquote><p><strong>cin和cout解锁</strong></p><p>代码（写在main函数开头）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>Cpp</p><blockquote><p>为什么要进行<code>cin</code>和<code>cout</code>的解锁，原因是：</p><p>在一些题目中，读入的<strong>数据量很大</strong>，往往超过了1e5（10^5^）的数据量,而<code>cin</code>和<code>cout</code>的读入输出的速度<strong>很慢</strong>（是因为<code>cin</code>和<code>cout</code>为了兼容C语言的读入输出在性能上做了妥协），远不如<code>scanf</code>和<code>printf</code>的速度，具体原因可以搜索相关的博客进行了解。</p><p><strong>所以</strong>对<code>cin</code>和<code>cout</code>进行解锁使<code>cin</code>和<code>cout</code>的速度几乎接近<code>scanf</code>和<code>printf</code>，避免输入输出超时。</p></blockquote><p><strong>注意</strong>：<code>cin cout</code>解锁使用时，不能与 <code>scanf,getchar, printf,cin.getline()</code>混用，一定要注意，会出错。</p><blockquote><p><strong>string与C语言字符串（C-string）的区别</strong></p><ul><li>string<br>是C++的一个类，专门实现字符串的相关操作。具有丰富的操作方法，数据类型为<code>string</code>，字符串结尾没有<code>\0</code>字符</li><li>C-string<br>C语言中的字符串，用char数组实现，类型为<code>const char *</code>,字符串结尾以<code>\0</code>结尾</li></ul></blockquote><p>一般来说string向char数组转换会出现一些问题，所以为了能够实现转换，string有一个方法<code>c_str()</code>实现string向char数组的转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;xing ma qi&quot;</span>;</span><br><span class="line"><span class="type">char</span> s2[] = s.<span class="built_in">c_str</span>();</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="9-5-函数方法"><a href="#9-5-函数方法" class="headerlink" title="9.5 函数方法"></a>9.5 函数方法</h3><ul><li><strong>获取字符串长度</strong></li></ul><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>s.size()</code>和<code>s.length()</code></td><td align="left">返回string对象的字符个数，他们执行效果相同。</td></tr><tr><td align="left"><code>s.max_size()</code></td><td align="left">返回string对象最多包含的字符数，超出会抛出length_error异常</td></tr><tr><td align="left"><code>s.capacity()</code></td><td align="left">重新分配内存之前，string对象能包含的最大字符数</td></tr></tbody></table><ul><li><strong>插入</strong></li></ul><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>s.push_back()</code></td><td align="left">在末尾插入</td></tr><tr><td align="left">例：<code>s.push_back(&#39;a&#39;)</code></td><td align="left">末尾插入一个字符a</td></tr><tr><td align="left"><code>s.insert(pos,element)</code></td><td align="left">在pos位置插入element</td></tr><tr><td align="left">例：<code>s.insert(s.begin(),&#39;1&#39;)</code></td><td align="left">在第一个位置插入1字符</td></tr><tr><td align="left"><code>s.append(str)</code></td><td align="left">在s字符串结尾添加str字符串</td></tr><tr><td align="left">例：<code>s.append(&quot;abc&quot;)</code></td><td align="left">在s字符串末尾添加字符串“abc”</td></tr></tbody></table><ul><li><strong>删除</strong></li></ul><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>erase(iterator p)</code></td><td align="left">删除字符串中p所指的字符</td></tr><tr><td align="left"><code>erase(iterator first, iterator last)</code></td><td align="left">删除字符串中迭代器区间<code>[first,last)</code>上所有字符</td></tr><tr><td align="left"><code>erase(pos, len)</code></td><td align="left">删除字符串中从索引位置pos开始的len个字符</td></tr><tr><td align="left"><code>clear()</code></td><td align="left">删除字符串中所有字符</td></tr></tbody></table><ul><li><strong>字符替换</strong></li></ul><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>s.replace(pos,n,str)</code></td><td align="left">把当前字符串从索引pos开始的n个字符替换为str</td></tr><tr><td align="left"><code>s.replace(pos,n,n1,c)</code></td><td align="left">把当前字符串从索引pos开始的n个字符替换为n1个字符c</td></tr><tr><td align="left"><code>s.replace(it1,it2,str)</code></td><td align="left">把当前字符串<code>[it1,it2)</code>区间替换为str <strong>it1 ,it2为迭代器哦</strong></td></tr></tbody></table><ul><li><strong>大小写转换</strong></li></ul><p>法一：</p><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>tolower(s[i])</code></td><td align="left">转换为小写</td></tr><tr><td align="left"><code>toupper(s[i])</code></td><td align="left">转换为大写</td></tr></tbody></table><p>法二：</p><p>通过stl的<code>transform</code>算法配合<code>tolower</code> 和<code>toupper</code> 实现。<br>有4个参数，前2个指定要转换的容器的起止范围，第3个参数是结果存放容器的起始位置，第4个参数是一元运算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::tolower);<span class="comment">//转换小写</span></span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::toupper);<span class="comment">//转换大写</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>分割</strong></li></ul><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>s.substr(pos,n)</code></td><td align="left">截取从pos索引开始的n个字符</td></tr></tbody></table><ul><li><strong>查找</strong></li></ul><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>s.find (str, pos)</code></td><td align="left">在当前字符串的pos索引位置（默认为0）开始，查找子串str，返回找到的位置索引，-1表示查找不到子串</td></tr><tr><td align="left"><code>s.find (c, pos)</code></td><td align="left">在当前字符串的pos索引位置（默认为0）开始，查找字符c，返回找到的位置索引，-1表示查找不到字符</td></tr><tr><td align="left"><code>s.rfind (str, pos)</code></td><td align="left">在当前字符串的pos索引位置开始，反向查找子串s，返回找到的位置索引，-1表示查找不到子串</td></tr><tr><td align="left"><code>s.rfind (c,pos)</code></td><td align="left">在当前字符串的pos索引位置开始，反向查找字符c，返回找到的位置索引，-1表示查找不到字符</td></tr><tr><td align="left"><code>s.find_first_of (str, pos)</code></td><td align="left">在当前字符串的pos索引位置（默认为0）开始，查找子串s的字符，返回找到的位置索引，-1表示查找不到字符</td></tr><tr><td align="left"><code>s.find_first_not_of (str,pos)</code></td><td align="left">在当前字符串的pos索引位置（默认为0）开始，查找第一个不位于子串s的字符，返回找到的位置索引，-1表示查找不到字符</td></tr><tr><td align="left"><code>s.find_last_of(str, pos)</code></td><td align="left">在当前字符串的pos索引位置开始，查找最后一个位于子串s的字符，返回找到的位置索引，-1表示查找不到字符</td></tr><tr><td align="left"><code>s.find_last_not_of ( str, pos)</code></td><td align="left">在当前字符串的pos索引位置开始，查找最后一个不位于子串s的字符，返回找到的位置索引，-1表示查找不到子串</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;dog bird chicken bird cat&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//字符串查找-----找到后返回首字母在字符串中的下标</span></span><br><span class="line"><span class="comment">// 1. 查找一个字符串</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">find</span>(<span class="string">&quot;chicken&quot;</span>) &lt;&lt; endl;<span class="comment">// 结果是：9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从下标为6开始找字符&#x27;i&#x27;，返回找到的第一个i的下标</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">find</span>(<span class="string">&#x27;i&#x27;</span>,<span class="number">6</span>) &lt;&lt; endl;<span class="comment">// 结果是：11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 从字符串的末尾开始查找字符串，返回的还是首字母在字符串中的下标</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">rfind</span>(<span class="string">&quot;chicken&quot;</span>) &lt;&lt; endl;<span class="comment">// 结果是：9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 从字符串的末尾开始查找字符</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">rfind</span>(<span class="string">&#x27;i&#x27;</span>) &lt;&lt; endl;<span class="comment">// 结果是：18因为是从末尾开始查找，所以返回第一次找到的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 在该字符串中查找第一个属于字符串s的字符</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">find_first_of</span>(<span class="string">&quot;13br98&quot;</span>) &lt;&lt; endl;<span class="comment">// 结果是：4---b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 在该字符串中查找第一个不属于字符串s的字符------先匹配dog，然后bird匹配不到，所以打印4</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">find_first_not_of</span>(<span class="string">&quot;hello dog 2006&quot;</span>) &lt;&lt; endl; <span class="comment">// 结果是：4</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">find_first_not_of</span>(<span class="string">&quot;dog bird 2006&quot;</span>) &lt;&lt; endl;  <span class="comment">// 结果是：9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 在该字符串最后中查找第一个属于字符串s的字符</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">find_last_of</span>(<span class="string">&quot;13r98&quot;</span>) &lt;&lt; endl;<span class="comment">// 结果是：19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 在该字符串最后中查找第一个不属于字符串s的字符------先匹配t--a---c，然后空格匹配不到，所以打印21</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">find_last_not_of</span>(<span class="string">&quot;teac&quot;</span>) &lt;&lt; endl;<span class="comment">// 结果是：21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>排序</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());  <span class="comment">//按ASCII码排序</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h2 id="10-bitset"><a href="#10-bitset" class="headerlink" title="10 bitset"></a>10 bitset</h2><h3 id="10-1-介绍"><a href="#10-1-介绍" class="headerlink" title="10.1 介绍"></a>10.1 介绍</h3><p>bitset 在 bitset 头文件中，它类似数组，并且每一个元素只能是０或１，每个元素只用１bit空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="10-2-初始化定义"><a href="#10-2-初始化定义" class="headerlink" title="10.2 初始化定义"></a>10.2 初始化定义</h3><p>初始化方法</p><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>bitset&lt;n&gt; a</code></td><td align="left">a有n位，每位都为0</td></tr><tr><td align="left"><code>bitset&lt;n&gt; a(b)</code></td><td align="left">a是unsigned long型u的一个副本</td></tr><tr><td align="left"><code>bitset&lt;n&gt; a(s)</code></td><td align="left">a是string对象s中含有的位串的副本</td></tr><tr><td align="left"><code>bitset&lt;n&gt; a(s, pos, n)</code></td><td align="left">a是s中从位置pos开始的n个位的副本</td></tr></tbody></table><blockquote><p>注意：<code>n</code>必须为常量表达式</p></blockquote><p>演示代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    bitset&lt;4&gt; bitset1;　　  <span class="comment">//无参构造，长度为４，默认每一位为0</span></span><br><span class="line"></span><br><span class="line">    <span class="function">bitset&lt;9&gt; <span class="title">bitset2</span><span class="params">(<span class="number">12</span>)</span></span>;　<span class="comment">//长度为9，二进制保存，前面用0补充</span></span><br><span class="line"></span><br><span class="line">    string s = <span class="string">&quot;100101&quot;</span>;</span><br><span class="line">    <span class="function">bitset&lt;10&gt; <span class="title">bitset3</span><span class="params">(s)</span></span>;　　<span class="comment">//长度为10，前面用0补充</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> s2[] = <span class="string">&quot;10101&quot;</span>;</span><br><span class="line">    <span class="function">bitset&lt;13&gt; <span class="title">bitset4</span><span class="params">(s2)</span></span>;　　<span class="comment">//长度为13，前面用0补充</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; bitset1 &lt;&lt; endl;　　<span class="comment">//0000</span></span><br><span class="line">    cout &lt;&lt; bitset2 &lt;&lt; endl;　　<span class="comment">//000001100</span></span><br><span class="line">    cout &lt;&lt; bitset3 &lt;&lt; endl;　　<span class="comment">//0000100101</span></span><br><span class="line">    cout &lt;&lt; bitset4 &lt;&lt; endl;　<span class="comment">//0000000010101</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="10-3-特性"><a href="#10-3-特性" class="headerlink" title="10.3 特性"></a>10.3 特性</h3><p><code>bitset</code>可以进行<strong>位操作</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">bitset&lt;4&gt; <span class="title">foo</span> <span class="params">(string(<span class="string">&quot;1001&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">bitset&lt;4&gt; <span class="title">bar</span> <span class="params">(string(<span class="string">&quot;0011&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo ^= bar) &lt;&lt; endl;<span class="comment">// 1010 (foo对bar按位异或后赋值给foo)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo &amp;= bar) &lt;&lt; endl;<span class="comment">// 0001 (按位与后赋值给foo)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo |= bar) &lt;&lt; endl;<span class="comment">// 1011 (按位或后赋值给foo)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo&lt;&lt;=<span class="number">2</span>) &lt;&lt; endl;<span class="comment">// 0100 (左移2位，低位补0，有自身赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo&gt;&gt;=<span class="number">1</span>) &lt;&lt; endl;<span class="comment">// 0100 (右移1位，高位补0，有自身赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (~bar) &lt;&lt; endl;<span class="comment">// 1100 (按位取反)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (bar&lt;&lt;<span class="number">1</span>) &lt;&lt; endl;<span class="comment">// 0110 (左移，不赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (bar&gt;&gt;<span class="number">1</span>) &lt;&lt; endl;<span class="comment">// 0001 (右移，不赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo==bar) &lt;&lt; endl;<span class="comment">// false (1001==0011为false)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo!=bar) &lt;&lt; endl;<span class="comment">// true  (1001!=0011为true)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo&amp;bar) &lt;&lt; endl;<span class="comment">// 0001 (按位与，不赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo|bar) &lt;&lt; endl;<span class="comment">// 1011 (按位或，不赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo^bar) &lt;&lt; endl;<span class="comment">// 1010 (按位异或，不赋值)</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>访问</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以通过 [] 访问元素(类似数组)，注意最低位下标为0，类似于数的二进制表示，如下：</span></span><br><span class="line"><span class="function">bitset&lt;4&gt; <span class="title">f</span><span class="params">(<span class="string">&quot;1011&quot;</span>)</span></span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    cout &lt;&lt; f[i];</span><br><span class="line">&#125; <span class="comment">// 输出1101</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="10-4-方法函数"><a href="#10-4-方法函数" class="headerlink" title="10.4 方法函数"></a>10.4 方法函数</h3><table><thead><tr><th align="left">代码</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>b.any()</code></td><td align="left">b中是否存在置为1的二进制位，有 返回true</td></tr><tr><td align="left"><code>b.none()</code></td><td align="left">b中是否没有1，没有 返回true</td></tr><tr><td align="left"><code>b.count()</code></td><td align="left">b中为1的个数</td></tr><tr><td align="left"><code>b.size()</code></td><td align="left">b中二进制位的个数</td></tr><tr><td align="left"><code>b.test(pos)</code></td><td align="left">测试b在pos位置是否为1，是 返回true</td></tr><tr><td align="left"><code>b[pos]</code></td><td align="left">返回b在pos处的二进制位</td></tr><tr><td align="left"><code>b.set()</code></td><td align="left">把b中所有位都置为1</td></tr><tr><td align="left"><code>b.set(pos)</code></td><td align="left">把b中pos位置置为1</td></tr><tr><td align="left"><code>b.reset()</code></td><td align="left">把b中所有位都置为0</td></tr><tr><td align="left"><code>b.reset(pos)</code></td><td align="left">把b中pos位置置为0</td></tr><tr><td align="left"><code>b.flip()</code></td><td align="left">把b中所有二进制位取反</td></tr><tr><td align="left"><code>b.flip(pos)</code></td><td align="left">把b中pos位置取反</td></tr><tr><td align="left"><code>b.to_ulong()</code></td><td align="left">用b中同样的二进制位返回一个unsigned long值</td></tr></tbody></table><h3 id="10-5-bitset优化"><a href="#10-5-bitset优化" class="headerlink" title="10.5 bitset优化"></a>10.5 bitset优化</h3><p>一般会使用bitset来优化时间复杂度，大概时间复杂度会除64或32，例如没有优化的时间复杂度为 O(NM)�(��) ，使用bitset优化后复杂度可能就为 O(NM64)�(��64)</p><p>bitset还有开动态空间的技巧，bitset常用在<code>01背包</code>优化等算法中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态长度bitset实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>; <span class="comment">// 开空间的上限，一般为数据范围附近的值</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> len = <span class="number">1</span>&gt;</span><br><span class="line"><span class="type">void</span> <span class="built_in">bitset_</span>(<span class="type">int</span> sz) &#123; <span class="comment">// sz即为想要开的大小</span></span><br><span class="line">    <span class="keyword">if</span> (len &lt; sz) &#123; <span class="built_in">bitset_</span>&lt;<span class="built_in">min</span>(len * <span class="number">2</span>, N)&gt;(sz); <span class="keyword">return</span>; &#125;</span><br><span class="line">    bitset&lt;len + 1&gt; dp;</span><br><span class="line">    <span class="comment">// 具体算法的实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><h2 id="11-array"><a href="#11-array" class="headerlink" title="11 array"></a>11 array</h2><h3 id="11-1-介绍"><a href="#11-1-介绍" class="headerlink" title="11.1 介绍"></a>11.1 介绍</h3><p>头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;array&gt;</span></span></span><br></pre></td></tr></table></figure><p>Cpp</p><p><code>array</code>是C++11新增的容器，效率与普通数据相差无几，比<code>vector</code>效率要高，自身添加了一些成员函数。</p><p>和其它容器不同，array 容器的大小是<strong>固定</strong>的，无法动态的扩展或收缩，<strong>只允许访问或者替换存储的元素。</strong></p><p><strong>注意：</strong></p><p><code>array</code>的使用要在<code>std</code>命名空间里</p><h3 id="11-2-声明与初始化"><a href="#11-2-声明与初始化" class="headerlink" title="11.2 声明与初始化"></a>11.2 声明与初始化</h3><p><strong>基础数据类型</strong></p><p>声明一个大小为100的<code>int</code>型数组，元素的值不确定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 100&gt; a;</span><br></pre></td></tr></table></figure><p>Cpp</p><p>声明一个大小为100的<code>int</code>型数组，初始值均为<code>0</code>初始值与默认元素类型等效初始值与默认元素类型等效</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 100&gt; a&#123;&#125;;</span><br></pre></td></tr></table></figure><p>Cpp</p><p>声明一个大小为100的<code>int</code>型数组，初始化部分值，其余全部为<code>0</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 100&gt; a&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>Cpp</p><p>或者可以用等号</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 100&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>高级数据类型</strong></p><p>不同于数组的是对元素类型不做要求，可以套结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array&lt;string, 2&gt; s = &#123;<span class="string">&quot;ha&quot;</span>, <span class="built_in">string</span>(<span class="string">&quot;haha&quot;</span>)&#125;;</span><br><span class="line">array&lt;node, 2&gt; a;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="11-3-存取元素"><a href="#11-3-存取元素" class="headerlink" title="11.3 存取元素"></a>11.3 存取元素</h3><ul><li>修改元素</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 4&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>访问元素</li></ul><p>下标访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 4&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) </span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>Cpp</p><p>利用<code>auto</code>访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : a)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><p>迭代器访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> it = a.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span>(; it != a.<span class="built_in">end</span>(); it++) </span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><code>at()</code>函数访问</p><p>下标为<code>1</code>的元素加上下标为<code>2</code>的元素，答案为<code>5</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 4&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> res = a.<span class="built_in">at</span>(<span class="number">1</span>) + a.<span class="built_in">at</span>(<span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><code>get</code>方法访问</p><p>将<code>a</code>数组下标为<code>1</code>位置处的值改为<code>x</code></p><p>注意：获取的下标只能写数字，不能填变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(a) = x;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="11-4-成员函数"><a href="#11-4-成员函数" class="headerlink" title="11.4 成员函数"></a>11.4 成员函数</h3><table><thead><tr><th align="left">成员函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><code>begin()</code></td><td align="left">返回容器中第一个元素的访问迭代器（地址）</td></tr><tr><td align="left"><code>end()</code></td><td align="left">返回容器最后一个元素之后一个位置的访问迭代器（地址）</td></tr><tr><td align="left"><code>rbegin()</code></td><td align="left">返回最后一个元素的访问迭代器（地址）</td></tr><tr><td align="left"><code>rend()</code></td><td align="left">返回第一个元素之前一个位置的访问迭代器（地址）</td></tr><tr><td align="left"><code>size()</code></td><td align="left">返回容器中元素的数量，其值等于初始化 array 类的第二个模板参数<code>N</code></td></tr><tr><td align="left"><code>max_size()</code></td><td align="left">返回容器可容纳元素的最大数量，其值始终等于初始化 array 类的第二个模板参数 N</td></tr><tr><td align="left"><code>empty()</code></td><td align="left">判断容器是否为空</td></tr><tr><td align="left"><code>at(n)</code></td><td align="left">返回容器中 n 位置处元素的引用，函数会自动检查 n 是否在有效的范围内，如果不是则抛出 out_of_range 异常</td></tr><tr><td align="left"><code>front()</code></td><td align="left">返回容器中第一个元素的直接引用，函数不适用于空的 array 容器</td></tr><tr><td align="left"><code>back()</code></td><td align="left">返回容器中最后一个元素的直接引用，函数不适用于空的 array 容器。</td></tr><tr><td align="left"><code>data()</code></td><td align="left">返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能</td></tr><tr><td align="left"><code>fill(x)</code></td><td align="left">将 <code>x</code> 这个值赋值给容器中的每个元素,相当于初始化</td></tr><tr><td align="left"><code>array1.swap(array2)</code></td><td align="left">交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型</td></tr></tbody></table><h3 id="11-5-部分用法示例"><a href="#11-5-部分用法示例" class="headerlink" title="11.5 部分用法示例"></a>11.5 部分用法示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data()</span><br></pre></td></tr></table></figure><p>指向底层元素存储的指针。对于非空容器，返回的指针与首元素地址比较相等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at()</span><br></pre></td></tr></table></figure><p>下标为<code>1</code>的元素加上下标为<code>2</code>的元素，答案为<code>5</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 4&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> res = a.<span class="built_in">at</span>(<span class="number">1</span>) + a.<span class="built_in">at</span>(<span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fill()</span><br></pre></td></tr></table></figure><p>array的<code>fill()</code>函数，将<code>a</code>数组全部元素值变为<code>x</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="built_in">fill</span>(x);</span><br></pre></td></tr></table></figure><p>Cpp</p><p>另外还有其它的<code>fill()</code>函数:将<code>a</code>数组[begin,end)[�����,���)全部值变为<code>x</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fill</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x);</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>get方法获取元素值</strong></p><p>将<code>a</code>数组下标为<code>1</code>位置处的值改为<code>x</code></p><p>注意:获取的下标只能写数字，不能填变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(a) = x;</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>Cpp</p><h2 id="12-tuple"><a href="#12-tuple" class="headerlink" title="12 tuple"></a>12 tuple</h2><h3 id="12-1-介绍"><a href="#12-1-介绍" class="headerlink" title="12.1 介绍"></a>12.1 介绍</h3><p>tuple模板是pair的泛化，可以封装不同类型任意数量的对象。</p><p>可以把tuple理解为pair的扩展，tuple可以声明二元组，也可以声明三元组。</p><p>tuple可以等价为<strong>结构体</strong>使用</p><p><strong>头文件</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="12-2-声明初始化"><a href="#12-2-声明初始化" class="headerlink" title="12.2 声明初始化"></a>12.2 声明初始化</h3><p>声明一个空的<code>tuple</code>三元组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, string&gt; t1;</span><br></pre></td></tr></table></figure><p>Cpp</p><p>赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1 = <span class="built_in">make_tuple</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;hahaha&quot;</span>);</span><br></pre></td></tr></table></figure><p>Cpp</p><p>创建的同时初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">t2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><p>可以使用pair对象构造tuple对象，但tuple对象必须是两个元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> p = <span class="built_in">make_pair</span>(<span class="string">&quot;wang&quot;</span>, <span class="number">1</span>);</span><br><span class="line">tuple&lt;string, <span class="type">int</span>&gt; t3 &#123;p&#125;; <span class="comment">//将pair对象赋给tuple对象</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="12-3-元素操作"><a href="#12-3-元素操作" class="headerlink" title="12.3 元素操作"></a>12.3 元素操作</h3><p>获取tuple对象<code>t</code>的第一个元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> first = <span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t);</span><br></pre></td></tr></table></figure><p>Cpp</p><p>修改tuple对象<code>t</code>的第一个元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t) = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="12-4-函数操作"><a href="#12-4-函数操作" class="headerlink" title="12.4 函数操作"></a>12.4 函数操作</h3><ul><li>获取元素个数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; tuple_size&lt;<span class="keyword">decltype</span>(t)&gt;::value &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>获取对应元素的值</li></ul><p>通过<code>get&lt;n&gt;(obj)</code>方法获取,<code>n</code>必须为数字不能是变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 1</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(t) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 2</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(t) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>通过<code>tie</code>解包 获取元素值</li></ul><p><code>tie</code>可以让tuple变量中的三个值依次赋到tie中的三个变量中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> one, three;</span><br><span class="line">string two; </span><br><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, string, <span class="type">int</span>&gt; <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;hahaha&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">tie</span>(one, two, three) = t;</span><br><span class="line">cout &lt;&lt; one &lt;&lt; two &lt;&lt; three &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 1hahaha3</span></span><br></pre></td></tr></table></figure><p>Cpp</p><hr><h2 id="STL函数"><a href="#STL函数" class="headerlink" title="STL函数"></a>STL函数</h2><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accumulate(beg, end, init)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>作用：对一个序列的元素求和</p></blockquote><p><code>init</code>为对序列元素求和的<strong>初始值</strong></p><p>返回值类型：与<code>init</code> 相同</p><ul><li><strong>基础累加求和：</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对[0,2]区间求和，初始值为0，结果为0 + 1 + 3 + 5 = 9</span></span><br><span class="line"><span class="type">int</span> res1 = <span class="built_in">accumulate</span>(a, a + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对[0,3]区间求和，初始值为5，结果为5 + 1 + 3 + 5 + 9 = 23</span></span><br><span class="line"><span class="type">int</span> res2 = <span class="built_in">accumulate</span>(a, a + <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><strong>自定义二元对象求和：</strong></li></ul><p>使用lambda表达式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    ll num;</span><br><span class="line">&#125; st[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    st[i].num = i + <span class="number">10000000000</span>;</span><br><span class="line"><span class="comment">//返回值类型与init一致，同时注意参数类型（a）也要一样</span></span><br><span class="line"><span class="comment">//初始值为1，累加1+10000000001+10000000002+10000000003=30000000007</span></span><br><span class="line">ll res = <span class="built_in">accumulate</span>(st + <span class="number">1</span>, st + <span class="number">4</span>, <span class="number">1ll</span>, [](ll a,node b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b.num;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="atoi"><a href="#atoi" class="headerlink" title="atoi"></a>atoi</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atoi(const char *)</span><br></pre></td></tr></table></figure><blockquote><p>将字符串转换为<code>int</code>类型</p></blockquote><p>注意参数为<code>char</code>型数组，如果需要将string类型转换为int类型，可以使用<code>stoi</code>函数（参考下文），或者将<code>string</code>类型转换为<code>const char *</code>类型。</p><p>关于输出数字的范围：<br><code>atoi</code><strong>不做</strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。<br><code>stoi</code><strong>会做</strong>范围检查，默认必须在<code>int</code>范围内，如果超出范围，会出现RE（Runtime Error）错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">atoi</span>(s.<span class="built_in">c_str</span>());</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 1234</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[] = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">atoi</span>(s);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fill(beg, end, num)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>对一个序列进行初始化赋值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对a数组的所有元素赋1</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">fill</span>(a, a + <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//1 1 1 1 1</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>注意区分memset：</p><p><code>memset()</code>是按<strong>字节</strong>进行赋值，对于初始化赋<code>0</code>或<code>-1</code>有比较好的效果.</p><p>如果赋某个特定的数会<strong>出错</strong>，赋值特定的数建议使用<code>fill()</code></p><h3 id="is-sorted"><a href="#is-sorted" class="headerlink" title="is_sorted"></a>is_sorted</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_sorted(beg, end)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>判断序列是否有序（升序），返回<code>bool</code>值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果序列有序，输出YES</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">is_sorted</span>(a, a + n))</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iota(beg, end)</span><br></pre></td></tr></table></figure><blockquote><p>让序列递增赋值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">iota</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : a)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="lower-bound-upper-bound"><a href="#lower-bound-upper-bound" class="headerlink" title="lower_bound + upper_bound"></a>lower_bound + upper_bound</h3><p><strong>复杂度：</strong> O(logN)�(����)</p><blockquote><p>作用：二分查找</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在a数组中查找第一个大于等于x的元素，返回该元素的地址</span></span><br><span class="line"><span class="built_in">lower_bound</span>(a, a + n, x);</span><br><span class="line"><span class="comment">//在a数组中查找第一个大于x的元素，返回该元素的地址</span></span><br><span class="line"><span class="built_in">upper_bound</span>(a, a + n, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果未找到，返回尾地址的下一个位置的地址</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="max-element-min-element"><a href="#max-element-min-element" class="headerlink" title="max_element+min_element"></a>max_element+min_element</h3><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>找最大最小值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数都是返回地址，需要加*取值</span></span><br><span class="line"><span class="type">int</span> mx = *<span class="built_in">max_element</span>(a, a + n);</span><br><span class="line"><span class="type">int</span> mn = *<span class="built_in">min_element</span>(a, a + n);</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="max-min"><a href="#max-min" class="headerlink" title="max+min"></a>max+min</h3><p><strong>复杂度：</strong> O(1)�(1)</p><blockquote><p>找多个元素的最大值和最小值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找a，b的最大值和最小值</span></span><br><span class="line">mx = <span class="built_in">max</span>(a, b);</span><br><span class="line">mn = <span class="built_in">min</span>(a, b);</span><br></pre></td></tr></table></figure><p>Cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到a,b,c,d的最大值和最小值</span></span><br><span class="line">mx = <span class="built_in">max</span>(&#123;a, b, c, d&#125;);</span><br><span class="line">mn = <span class="built_in">min</span>(&#123;a, b, c, d&#125;);</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="minmax"><a href="#minmax" class="headerlink" title="minmax"></a>minmax</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minmax(a, b)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> O(1)�(1)</p><blockquote><p>返回一个<code>pair</code>类型，第一个元素是<code>min(a, b)</code>， 第二个元素是<code>max(a, b)</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; t = <span class="built_in">minmax</span>(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// t.first = 2, t.second = 4</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="minmax-element"><a href="#minmax-element" class="headerlink" title="minmax_element"></a>minmax_element</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minmax_element(beg, end)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>返回序列中的最小和最大值组成pair的对应的地址，返回类型为<code>pair&lt;vector&lt;int&gt;::iterator, vector&lt;int&gt;::iterator&gt;</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="built_in">iota</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line"><span class="keyword">auto</span> t = <span class="built_in">minmax_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">// 返回的是最小值和最大值对应的地址</span></span><br><span class="line"><span class="comment">// *t.first = 1, *t.second = 10 输出对应最小最大值时需要使用指针</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="nth-element"><a href="#nth-element" class="headerlink" title="nth_element"></a>nth_element</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nth_element(beg, nth, end)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> 平均O(N)�(�)</p><blockquote><p>寻找第序列第n小的值</p></blockquote><p><code>nth</code>为一个迭代器，指向序列中的一个元素。第n小的值恰好在<code>nth</code>位置上。</p><p>执行<code>nth_element()</code>之后，序列中的元素会围绕nth进行划分：<strong>nth之前的元素都小于等于它，而之后的元素都大于等于它</strong></p><p><strong>实例：求序列中的第3小的元素</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nth_element</span>(a, a + <span class="number">2</span>, a + n);</span><br><span class="line">cout &lt;&lt; a[<span class="number">2</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation"></a>next_permutation</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next_permutation(beg, end)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>求序列的下一个排列，下一个排列是字典序大一号的排列</p></blockquote><p>返回<code>true</code>或<code>false</code></p><ul><li><p><code>next_permutation(beg, end)</code></p><p>如果是最后一个排列，返回<code>false</code>,否则求出下一个序列后，返回<code>true</code></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对a序列进行重排</span></span><br><span class="line"><span class="built_in">next_permutation</span>(a, a + n);</span><br></pre></td></tr></table></figure><p>Cpp</p><p><strong>应用：求所有的排列</strong></p><p>输出<code>a</code>的所有排列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组a不一定是最小字典序序列，一定注意将它排序</span></span><br><span class="line"><span class="built_in">sort</span>(a, a + n);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="built_in">next_permutation</span>(a, a + n));</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><code>prev_permutation(beg, end)</code></li></ul><blockquote><p>求出前一个排列，如果序列为最小的排列，将其重排为最大的排列，返回false</p></blockquote><h3 id="partial-sort"><a href="#partial-sort" class="headerlink" title="partial_sort"></a>partial_sort</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partial_sort(beg, mid, end)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> 大概O(NlogM)�(�����) <code>M</code>为距离</p><blockquote><p>部分排序,排序mid-beg个元素，mid为要排序区间元素的尾后的一个位置</p><p>从beg到mid<strong>前</strong>的元素都排好序</p></blockquote><p>对a数组前5个元素排序按从小到大排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">partial_sort</span>(a, a + <span class="number">5</span>, a + <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">//1 2 3 4 5 9 8 10 7 6</span></span><br><span class="line"><span class="comment">//前五个元素都有序</span></span><br></pre></td></tr></table></figure><p>Cpp</p><p>也可以添加自定义排序规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partial_sort(beg,mid,end,cmp)</span><br></pre></td></tr></table></figure><p>对a的前五个元素都是降序排列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">partial_sort</span>(a, a + <span class="number">5</span>, a + <span class="number">10</span>, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">//10 9 8 7 6 1 2 4 5 3</span></span><br><span class="line"><span class="comment">//前五个元素降序有序</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a>random_shuffle</h3><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><ol><li>随机打乱序列的顺序</li><li><code>random_shuffle</code> 在 <code>C++14</code> 中被弃用，在 <code>C++17</code> 中被废除，C++11之后应尽量使用<code>shuffle</code>来代替。</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="built_in">iota</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), <span class="number">1</span>);<span class="comment">// 序列b递增赋值 1, 2, 3, 4,...</span></span><br><span class="line"><span class="comment">// 对a数组随机重排</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(a, a + n);</span><br><span class="line"><span class="comment">// C++11之后尽量使用shuffle</span></span><br><span class="line"><span class="built_in">shuffle</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(beg,end)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>对序列进行翻转</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());<span class="comment">//对s进行翻转</span></span><br><span class="line">cout &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//edcba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对a数组进行翻转</span></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>(a, a + <span class="number">4</span>);</span><br><span class="line">cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; a[<span class="number">1</span>] &lt;&lt; a[<span class="number">2</span>] &lt;&lt; a[<span class="number">3</span>];<span class="comment">//4321</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="set-union-set-intersection-set-difference"><a href="#set-union-set-intersection-set-difference" class="headerlink" title="set_union, set_intersection,set_difference"></a>set_union, set_intersection,set_difference</h3><p>复杂度： O(N+M)�(�+�)</p><blockquote><p>求两个集合的并集，交集，差集。手动实现双指针就可以搞定，嫌麻烦可以使用该函数。</p></blockquote><p>注意：两个集合必须为有序集合，所以下面演示代码使用了排序。vector容器可以替换成set容器，因为set自动会对元素进行排序。</p><p>函数的参数有五个，前两个为第一个容器的首尾迭代器，第三四个为第二个容器的首尾迭代器，最后一个为插入位置，即将结果插入到哪个地址之后。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>&#125;, b = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">// 1 2 4 5 8</span></span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()); <span class="comment">// 2 3 5 8 9</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c, d, e;</span><br><span class="line"><span class="comment">// a并b：1 2 3 4 5 8 9</span></span><br><span class="line"><span class="built_in">set_union</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), <span class="built_in">inserter</span>(c, c.<span class="built_in">begin</span>()));</span><br><span class="line"><span class="comment">// a交b：2 5 8</span></span><br><span class="line"><span class="built_in">set_intersection</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), <span class="built_in">inserter</span>(d, d.<span class="built_in">begin</span>()));</span><br><span class="line"><span class="comment">// a差b： 1 4</span></span><br><span class="line"><span class="built_in">set_difference</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), <span class="built_in">inserter</span>(e, e.<span class="built_in">begin</span>()));</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><strong>复杂度：</strong> O(NlogN)�(�����)</p><blockquote><p>作用：对一个序列进行排序</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型：</span></span><br><span class="line"><span class="built_in">sort</span>(beg, end);</span><br><span class="line"><span class="built_in">sort</span>(beg, end, cmp);</span><br></pre></td></tr></table></figure><p>Cpp</p><p>几种排序的常见操作：</p><ul><li>操作一：对数组正常升序排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[N]; <span class="comment">// 普通数组定义</span></span><br><span class="line"><span class="comment">// 对 a 数组的[1, n]位置进行从小到大排序</span></span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(n + <span class="number">1</span>)</span></span>; <span class="comment">// vector数组定义</span></span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>() + <span class="number">1</span>, b.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>操作二：使用第三个参数，进行降序排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对a数组的[0, n-1]位置从大到小排序</span></span><br><span class="line"><span class="built_in">sort</span>(a, a + n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="comment">//对a数组的[0, n-1]位置从小到大排序</span></span><br><span class="line"><span class="built_in">sort</span>(a, a + n, <span class="built_in">less</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>() + <span class="number">1</span>, b.<span class="built_in">end</span>()); <span class="comment">// 升序</span></span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>() + <span class="number">1</span>, b.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()); <span class="comment">// 降序</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>操作三：另外一种降序排序方法，针对 <code>vector</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">rbegin</span>(), a.<span class="built_in">rend</span>()); <span class="comment">// 使用反向迭代器进行降序排序</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>操作四：自定义排序规则</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用函数自定义排序，定义比较函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//按结构体里面的x值降序排列</span></span><br><span class="line">    <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(node, node + n, cmp); <span class="comment">// 只能接受 以函数为形式的自定义排序规则，无法接受以结构体为形式的自定义排序规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 或者使用匿名函数自定义排序规则</span></span><br><span class="line"><span class="built_in">sort</span>(node, node + n, [](node a, node b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="stable-sort"><a href="#stable-sort" class="headerlink" title="stable_sort"></a>stable_sort</h4><p><strong>复杂度：</strong> O(NlogN)�(�����)</p><blockquote><p>功能和 <code>sort()</code> 基本一样</p><p>区别在于<code>stable_sort()</code>能够保证相等元素的相对位置，排序时不会改变相等元素的相对位置</p></blockquote><p>使用用法和<code>sort()</code>一样，见上</p><h4 id="stoi"><a href="#stoi" class="headerlink" title="stoi"></a>stoi</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stoi(const string*)</span><br></pre></td></tr></table></figure><blockquote><p>将对应string类型字符串转换为数字（<code>int</code> 型），记忆：<code>s -&gt; t 分别对应两个数据类型的某个字母</code></p></blockquote><p>注意参数为<code>string</code>字符串类型。</p><p>如果要转换为其他类型的数字可使用 <code>stoll(转换为long long)</code> ， <code>stoull(转换为unsigned long long)</code> 等函数。</p><p>关于输出数字的范围：</p><ul><li><code>stoi</code><strong>会做</strong>范围检查，默认必须在<code>int</code>范围内，如果超出范围，会出现RE（Runtime Error）错误。</li><li><code>atoi</code><strong>不做</strong>范围检查，如果超出上界，输出上界，超出下界，输出下界。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">stoi</span>(s);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 1234</span></span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>作用：使用给定操作，将结果写到dest中</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型：</span></span><br><span class="line"><span class="built_in">transform</span>(beg, end, dest, unaryOp);</span><br></pre></td></tr></table></figure><p>Cpp</p><p>一般不怎么使用，徒增记忆负担，不如手动实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将序列开始地址beg到结束地址end大小写转换，把结果存到起始地址为dest的序列中</span></span><br><span class="line"><span class="built_in">transform</span>(beg, end, dest, ::tolower);</span><br><span class="line"><span class="built_in">transform</span>(beg, end, dest, ::toupper);</span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="to-string"><a href="#to-string" class="headerlink" title="to_string"></a>to_string</h4><blockquote><p>将数字转化为字符串，支持小数（double）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">12345678</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">to_string</span>(a) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unique(beg, end)</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong> O(N)�(�)</p><blockquote><p>消除重复元素，返回消除完重复元素的下一个位置的地址</p><p>如：<code>a[] = &#123;1, 3, 2, 3, 6&#125;</code>;</p><p><code>unique</code> 之后 <code>a</code> 数组为<code>&#123;1, 2, 3, 6, 3&#125;</code>前面为无重复元素的数组，后面则是重复元素移到后面，返回<code>a[4]</code>位置的地址（不重复元素的尾后地址）</p></blockquote><p>消除重复元素一般需要原序列是<strong>有序序列</strong></p><p><strong>应用：离散化</strong></p><ul><li>方法一：利用数组离散化</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">    b[i] = a[i];<span class="comment">//将a数组复制到b数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 排序后 b：&#123;1, 2, 3, 3, 6&#125;</span></span><br><span class="line"><span class="built_in">sort</span>(b, b + n);<span class="comment">//对b数组排序</span></span><br><span class="line"><span class="comment">// 消除重复元素b：&#123;1, 2, 3, 6, 3&#125; 返回的地址为最后一个元素3的地址 </span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">unique</span>(b, b + n) - b;<span class="comment">//消除 b 的重复元素，并获取长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="comment">//因为b有序，查找到的下标就是对应的 相对大小（离散化后的值）</span></span><br><span class="line">    <span class="type">int</span> pos = <span class="built_in">lower_bound</span>(b, b + len, a[i]) - b;<span class="comment">//在b数组中二分查找第一个大于等于a[i]的下标</span></span><br><span class="line">    a[i] = pos; <span class="comment">// 离散化赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li>方法二：利用 <code>vector</code> 进行离散化</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b = a;</span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">b.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()), b.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    a[i] = <span class="built_in">lower_bound</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), a[i]) - b.<span class="built_in">begin</span>() + <span class="number">1</span>; <span class="comment">// 离散后的数据从1开始   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp</p><h4 id="gcd"><a href="#gcd" class="headerlink" title="__gcd"></a>__gcd</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__gcd(a, b)</span><br></pre></td></tr></table></figure><blockquote><p>求a和b的最大公约数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__gcd(12,15) = 3</span><br><span class="line">__gcd(21,0) = 21</span><br></pre></td></tr></table></figure><h4 id="lg"><a href="#lg" class="headerlink" title="__lg"></a>__lg</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__lg(a)</span><br></pre></td></tr></table></figure><blockquote><ol><li>求一个数二进制下最高位位于第几位（从<strong>第0位</strong>开始）（或二进制数下有几位）</li><li><code>__lg(x)</code>相当于返回⌊log2x⌋⌊���2�⌋</li><li>复杂度O(1)�(1)</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__lg(8) = 3</span><br><span class="line">__lg(15) = 3</span><br></pre></td></tr></table></figure><h3 id="builtin-内置位运算函数"><a href="#builtin-内置位运算函数" class="headerlink" title="__builtin_ 内置位运算函数"></a><code>__builtin_</code> 内置位运算函数</h3><blockquote><p>需要注意：内置函数有相应的<code>unsigned lnt</code>和<code>unsigned long long</code>版本，<code>unsigned long long</code>只需要在函数名后面加上<code>ll</code>就可以了，比如<code>__builtin_clzll(x)</code> ，默认是32位<code>unsigned int</code></p><p>很多题目和 <code>long long</code> 数据类型有关，如有需要注意添加 <code>ll</code></p></blockquote><ul><li><code>__builtin_ffs</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtin_ffs(x)</span><br></pre></td></tr></table></figure><blockquote><p>二进制中对应最后一位<code>1</code>的位数，比如<code>4</code>会返回<code>3</code>（100）</p></blockquote><ul><li><code>__builtin_popcount</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtin_popcount(x)</span><br></pre></td></tr></table></figure><blockquote><p><code>x</code>中<code>1</code>的个数</p></blockquote><ul><li><code>__builtin_ctz</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtin_ctz(x)</span><br></pre></td></tr></table></figure><blockquote><p><code>x</code>末尾<code>0</code>的个数（<code>count tail zero</code>）</p></blockquote><ul><li><code>__builtin_clz</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtin_clz(x)</span><br></pre></td></tr></table></figure><blockquote><p><code>x</code>前导<code>0</code>的个数（<code>count leading zero</code>）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; __builtin_clz(<span class="number">32</span>); <span class="comment">// 26</span></span><br><span class="line"><span class="comment">//因为共有6位,默认数据范围为32位，32 - 6 = 26</span></span><br></pre></td></tr></table></figure><p>Cpp</p><ul><li><code>__builtin_parity</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__builtin_parity(x)</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x`中1的个数的奇偶性， 奇数输出`1`，偶数输出`0</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>可参考链接：</p><ol><li><a href="https://www.luogu.com.cn/blog/AccRobin/grammar-candies">C++语法糖</a> <a href="https://www.luogu.com.cn/blog/AccRobin/grammar-candies">https://www.luogu.com.cn/blog/AccRobin/grammar-candies</a></li></ol></blockquote><p>来源: 行码棋<br>作者: 行码棋<br>链接: <a href="https://wyqz.top/p/870124582.html">https://wyqz.top/p/870124582.html</a><br>本文章著作权归作者所有，任何形式的转载都请注明出处。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20240201091601696.png" alt="image-20240201091601696"></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a[N];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j ++ )&#123;</span><br><span class="line">             <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//冒泡2</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nums[]=&#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,&#125;;</span><br><span class="line">    <span class="type">int</span> length= <span class="keyword">sizeof</span> nums/<span class="keyword">sizeof</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;length-i<span class="number">-1</span> ; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[j])&#123;</span><br><span class="line">                <span class="type">int</span> tmp=nums[i];</span><br><span class="line">                nums[i]=nums[j];</span><br><span class="line">                nums[j]= tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><p><strong>c++模板</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x =q[(l+r) &gt;&gt; <span class="number">1</span>],i = l - <span class="number">1</span>,j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">while</span> (q[ ++i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span> (q[ --j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)<span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(l,j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(j<span class="number">+1</span>,r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">quick_sort</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">​    cout &lt;&lt; q[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sort库函数</strong>（如果不传入第三个参数，则默认是升序排列）</p><p>用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 正序</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + <span class="number">10</span>);  <span class="comment">// 10为元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">// 输出排序后数组</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//倒序</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + <span class="number">10</span>, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());  <span class="comment">// 10为元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">// 输出排序后数组</span></span><br><span class="line">    cout &lt;&lt; endl;<span class="comment">// 输出 9 8 7 6 5 4 3 2 1 0 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h4><p>模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//前缀和</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m,l,r;</span><br><span class="line"><span class="type">int</span> a[N],s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];<span class="comment">//cin &gt;&gt; s[i];</span></span><br><span class="line">        s[i] =          s[i<span class="number">-1</span>] + a[i];<span class="comment">//s[i]+=s[i-1];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)&#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cout &lt;&lt; s[r] - s[l<span class="number">-1</span>] &lt;&lt; endl ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二维数组前缀和</strong></p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231120190729317.png" alt="image-20231120190729317"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//二维数组前缀和</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N],s[N][N];</span><br><span class="line"><span class="type">int</span> n,m,q,x1,y1,x2,y2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m ; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">            s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q -- )&#123;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        cout &lt;&lt; s[x2][y2]-s[x1<span class="number">-1</span>][y2]-s[x2][y1<span class="number">-1</span>]+s[x1<span class="number">-1</span>][y1<span class="number">-1</span>]&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="差分-前缀和逆运算"><a href="#差分-前缀和逆运算" class="headerlink" title="差分(前缀和逆运算)"></a>差分(前缀和逆运算)</h4><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231125162725726.png" alt="image-20231125162725726"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//（自己）</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,l,r,c,a[<span class="number">10010</span>],b[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="comment">//b[i] = a[i] - a[i - 1];//a[i]为前缀和,b[i]</span></span><br><span class="line">        b[i] += a[i];</span><br><span class="line">        b[i + <span class="number">1</span>] -= a[i];<span class="comment">//目的为求出原数组（差分数组）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;</span><br><span class="line">        b[l] += c;</span><br><span class="line">        b[r + <span class="number">1</span>] -= c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] += b[i - <span class="number">1</span>];</span><br><span class="line">        cout&lt;&lt;b[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//（有函数模板）</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,l,r,c,a[<span class="number">10010</span>],b[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    b[l]+=c;</span><br><span class="line">    b[r<span class="number">+1</span>]-=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="built_in">insert</span>(i,i,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;</span><br><span class="line">        <span class="built_in">insert</span>(l,r,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] += b[i - <span class="number">1</span>];</span><br><span class="line">        cout&lt;&lt;b[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>（自己调用自己）</p><p>例子</p><p><strong>1小鲤鱼</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">digui</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;抱着&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!n)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;我的小鲤鱼&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        digui(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我的&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;吓得我抱起了&quot;</span>);</span><br><span class="line">    digui(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2阶乘</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">factor</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> n * factor(n - <span class="number">1</span>); </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, factor(n));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h4><p>例子</p><p><strong>删字母</strong></p><img src="C:\Users\l\Pictures\QQ图片20231120192343.png" style="zoom: 50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">char</span> str[N],res[N];</span><br><span class="line"><span class="type">int</span> len,n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"> cin &gt;&gt; str;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">  <span class="keyword">while</span>(len &gt; <span class="number">0</span> &amp;&amp; m&gt; <span class="number">0</span> &amp;&amp; str[i] &lt; res[len - <span class="number">1</span>])&#123;</span><br><span class="line">   len --;</span><br><span class="line">   m--;</span><br><span class="line">  &#125;</span><br><span class="line">  res[len ++] = str[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">while</span>(m --) len--;</span><br><span class="line"> res[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"> cout &lt;&lt; res;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231120191834781.png" alt="image-20231120191834781"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num,i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (num=<span class="number">1</span>; num&lt;=<span class="number">100</span>; num++) &#123;</span><br><span class="line">        <span class="type">int</span> a = num;<span class="comment">//暂存num的原始数据</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &amp; <span class="number">1</span> == <span class="number">1</span>) &#123;<span class="comment">//判断 &quot;num&quot; 的二进制表示中最低位是否为 1</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            num = num &gt;&gt; <span class="number">1</span>;<span class="comment">//和num = num/=10相等</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">3</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">23</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num = a;<span class="comment">//将num的值恢复为原始状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20240124141532172.png" alt="image-20240124141532172"></p><p>x&gt;&gt;k&amp;&amp;1(x的第k位是否为1)</p><p>-a&#x3D;^a+1</p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20240124142231866.png" alt="image-20240124142231866"></p><h4 id="DFS（深度优先搜索-暴力搜索）"><a href="#DFS（深度优先搜索-暴力搜索）" class="headerlink" title="DFS（深度优先搜索&#x2F;暴力搜索）"></a>DFS（深度优先搜索&#x2F;暴力搜索）</h4><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231125105204057.png" alt="image-20231125105204057"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//最大联通</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">80</span>;</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="type">int</span> m[N][N];</span><br><span class="line"><span class="type">int</span> res ,cnt;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;<span class="number">30</span>||y&lt;<span class="number">1</span>||y&gt;<span class="number">60</span>||m[x][y]==<span class="number">0</span>||st[x][y])<span class="keyword">return</span>;</span><br><span class="line">    st[x][y]= <span class="literal">true</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> nx=dx[i]+x,ny=dy[i]+y;</span><br><span class="line">        <span class="built_in">dfs</span>(nx,ny);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">30</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">60</span> ; ++j) &#123;</span><br><span class="line">            <span class="type">char</span> c;</span><br><span class="line">            cin &gt;&gt; c;</span><br><span class="line">            m[i][j]=c<span class="number">-48</span>;<span class="comment">//c-&#x27;0&#x27;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">30</span> ; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">60</span> ; ++j) &#123;</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i,j);</span><br><span class="line">            res=<span class="built_in">max</span>(res,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231218143842238.png" alt="image-20231218143842238"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">int n;</span><br><span class="line">vector&lt;int&gt;path;</span><br><span class="line"></span><br><span class="line">void dfs(int u,int state)&#123;</span><br><span class="line">    if(u==n)&#123;</span><br><span class="line">        for(auto x:path)cout&lt;&lt;x&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">       if(!(state&gt;&gt;i&amp;1))</span><br><span class="line">       &#123;</span><br><span class="line">           path.push_back(i+1);</span><br><span class="line">           dfs(u+1,state|(1&lt;&lt;i));</span><br><span class="line">           path.pop_back();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    dfs(0,0);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h4><p>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">sushu</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;=n/i ; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="回文"><a href="#回文" class="headerlink" title="回文"></a>回文</h4><p>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">huiwen</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp=n;</span><br><span class="line">    <span class="type">int</span> reverse=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> x=tmp%<span class="number">10</span>;</span><br><span class="line">        reverse=reverse*<span class="number">10</span>+x;</span><br><span class="line">        tmp/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reverse == n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l+r)/<span class="number">2</span>;<span class="comment">//l+r/2</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(l,mid), <span class="built_in">merge_sort</span>(mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>,i = l, j = mid<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt;= a[j])tmp[k++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++]=a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)tmp[k++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)tmp[k++]=a[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l,j=<span class="number">0</span>;i&lt;=r;i++,j++)&#123;</span><br><span class="line">        a[i] = tmp[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">merge_sort</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：</p><p>逆序对</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,a[N],tmp[N],count = <span class="number">0</span>;</span><br><span class="line">ll res;</span><br><span class="line"><span class="function">ll <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)<span class="keyword">return</span> <span class="number">0</span> ;<span class="comment">//1</span></span><br><span class="line">    <span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(<span class="number">1</span>,mid), <span class="built_in">merge_sort</span>(mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>,i=l,j=mid<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt;= a[j])tmp[k++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++]=a[j++];</span><br><span class="line">        res += mid-i<span class="number">+1</span><span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)tmp[k++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)tmp[k++]=a[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l,j=<span class="number">0</span>;i&lt;=r;i++,j++)&#123;</span><br><span class="line">        a[i] = tmp[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">merge_sort</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三小"><a href="#第三小" class="headerlink" title="第三小"></a>第三小</h3><p><img src="C:\Users\l\Pictures\QQ图片20231128210923.jpg"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> q[N],n,num;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getres</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"> q[<span class="number">3</span>]=x;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">3</span>;</span><br><span class="line"> <span class="keyword">while</span>(q[i]&lt;q[i<span class="number">-1</span>])&#123;<span class="comment">//一直保留前三小的数</span></span><br><span class="line">  <span class="built_in">swap</span>(q[i],q[i<span class="number">-1</span>]);</span><br><span class="line">  i--;</span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> q[<span class="number">2</span>];<span class="comment">//输出第三小</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;<span class="comment">//？？？？？</span></span><br><span class="line"> cin&gt;&gt;q[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q,q<span class="number">+3</span>);<span class="comment">//前三个排序</span></span><br><span class="line">cout&lt;&lt;q[<span class="number">2</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//输出第三小</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;n;i++)&#123;</span><br><span class="line"> cin&gt;&gt;num;<span class="comment">//输入新值</span></span><br><span class="line"> <span class="keyword">if</span>(num&lt;q[<span class="number">2</span>])cout&lt;&lt;<span class="built_in">getres</span>(num)&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//如果新值小于刚才的第三小，输出新值</span></span><br><span class="line"> <span class="keyword">else</span> cout&lt;&lt;q[<span class="number">2</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">11</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">22</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">88</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">120</span>&#125;;</span><br><span class="line">  <span class="type">int</span> n,high=<span class="number">10</span>,low=<span class="number">0</span>,mid,count=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入查找数据：&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">  count++;</span><br><span class="line">  mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span>(a[mid]==n) <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;n)</span><br><span class="line">  low = mid + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">if</span>(low&lt;=high)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,count);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>二分模板一共有两个，分别适用于不同情况。<br>算法思路：假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l &#x3D; r时，我们就找到了目标值。</p><p>版本1(上取整)<br>当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r &#x3D; mid或者l &#x3D; mid + 1;，计算mid时不需要加1。</p><p>C++ 代码模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>版本2（下取整）<br>当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r &#x3D; mid - 1或者l &#x3D; mid;，此时为了防止死循环，计算mid时需要加1。</p><p>C++ 代码模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![](C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20240124143500996.png</p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20240124145153842.png" alt="image-20240124145153842"></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210111432799.png" alt="image-20231210111432799"></p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//快速幂</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a,b,p;</span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span> ,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;</span><br><span class="line">        <span class="keyword">while</span> (b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b &amp; <span class="number">1</span>)res = (ll) res * a % p;</span><br><span class="line">            b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            a = (ll)a*a%p;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">        res=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>64位整数乘法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res=<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,p;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=(<span class="type">long</span> <span class="type">long</span>)res*a%p;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">​    b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">​    a=(<span class="type">long</span> <span class="type">long</span>)a*a%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">1</span>)res=<span class="number">0</span>;</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line">res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h5 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h5><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210140833620.png" alt="image-20231210140833620"></p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210143111690.png" alt="image-20231210143111690"></p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210143448127.png" alt="image-20231210143448127"></p><p>优化后（一维）&#x2F;&#x2F;优化空间</p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210150402969.png" alt="image-20231210150402969"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//背包问题</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> n,m,v,w;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n ; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;=v ; j--) &#123;</span><br><span class="line">            f[j]= <span class="built_in">max</span>(f[j],f[j-v]+w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h5><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210151133333.png" alt="image-20231210151133333"></p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210153554359.png" alt="image-20231210153554359"></p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231222201639020.png" alt="image-20231222201639020"></p><h5 id="Hello-Kitty摘花生数字三角形"><a href="#Hello-Kitty摘花生数字三角形" class="headerlink" title="Hello Kitty摘花生数字三角形"></a>Hello Kitty摘花生数字三角形</h5><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210154348212.png" alt="image-20231210154348212"></p><h5 id="最少费用穿过网络"><a href="#最少费用穿过网络" class="headerlink" title="最少费用穿过网络"></a>最少费用穿过网络</h5><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210161149308.png" alt="image-20231210161149308"></p><p>5<br>1 4 6 8 10<br>2 5 7 15 17<br>6 8 9 18 20<br>10 11 12 19 21<br>20 23 25 29 33</p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210164030789.png" alt="image-20231210164030789"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n,m,t;</span><br><span class="line"><span class="type">int</span> q[N][N],f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n ; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;=n ; ++j) &#123;</span><br><span class="line">            cin&gt;&gt;q[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">100</span>,<span class="keyword">sizeof</span> f);<span class="comment">//使f数组初始值全为100，以便求最小值不为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n ; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;=n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">1</span>&amp;&amp;j==<span class="number">1</span>)&#123;</span><br><span class="line">                f[<span class="number">1</span>][<span class="number">1</span>]=q[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i][j]= <span class="built_in">min</span>(f[i<span class="number">-1</span>][j],f[i][j<span class="number">-1</span>])+q[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n][n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="压轴题"><a href="#压轴题" class="headerlink" title="压轴题"></a>压轴题</h5><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210165800749.png" alt="image-20231210165800749"></p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210170206298.png" alt="image-20231210170206298"></p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210171505800.png" alt="image-20231210171505800"></p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="快速排序算法模板-——-模板题-AcWing-785-快速排序"><a href="#快速排序算法模板-——-模板题-AcWing-785-快速排序" class="headerlink" title="快速排序算法模板 —— 模板题 AcWing 785. 快速排序"></a>快速排序算法模板 —— 模板题 AcWing 785. 快速排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void quick_sort(int q[], int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l &gt;= r) return;</span><br><span class="line"></span><br><span class="line">int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1];</span><br><span class="line">while (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">    do i ++ ; while (q[i] &lt; x);</span><br><span class="line">    do j -- ; while (q[j] &gt; x);</span><br><span class="line">    if (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">&#125;</span><br><span class="line">quick_sort(q, l, j), quick_sort(q, j + 1, r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序算法模板-——-模板题-AcWing-787-归并排序"><a href="#归并排序算法模板-——-模板题-AcWing-787-归并排序" class="headerlink" title="归并排序算法模板 —— 模板题 AcWing 787. 归并排序"></a>归并排序算法模板 —— 模板题 AcWing 787. 归并排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void merge_sort(int q[], int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l &gt;= r) return;</span><br><span class="line"></span><br><span class="line">int mid = l + r &gt;&gt; 1;</span><br><span class="line">merge_sort(q, l, mid);</span><br><span class="line">merge_sort(q, mid + 1, r);</span><br><span class="line"></span><br><span class="line">int k = 0, i = l, j = mid + 1;</span><br><span class="line">while (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    if (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    else tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">while (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">while (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">for (i = l, j = 0; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整数二分算法模板-——-模板题-AcWing-789-数的范围"><a href="#整数二分算法模板-——-模板题-AcWing-789-数的范围" class="headerlink" title="整数二分算法模板 —— 模板题 AcWing 789. 数的范围"></a>整数二分算法模板 —— 模板题 AcWing 789. 数的范围</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bool check(int x) &#123;/* ... */&#125; // 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span><br><span class="line">int bsearch_1(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) r = mid;    // check()判断mid是否满足性质</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="line">int bsearch_2(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r + 1 &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) l = mid;</span><br><span class="line">        else r = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浮点数二分算法模板-——-模板题-AcWing-790-数的三次方根"><a href="#浮点数二分算法模板-——-模板题-AcWing-790-数的三次方根" class="headerlink" title="浮点数二分算法模板 —— 模板题 AcWing 790. 数的三次方根"></a>浮点数二分算法模板 —— 模板题 AcWing 790. 数的三次方根</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool check(double x) &#123;/* ... */&#125; // 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">double bsearch_3(double l, double r)</span><br><span class="line">&#123;</span><br><span class="line">    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求</span><br><span class="line">    while (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        double mid = (l + r) / 2;</span><br><span class="line">        if (check(mid)) r = mid;</span><br><span class="line">        else l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度加法-——-模板题-AcWing-791-高精度加法"><a href="#高精度加法-——-模板题-AcWing-791-高精度加法" class="headerlink" title="高精度加法 —— 模板题 AcWing 791. 高精度加法"></a>高精度加法 —— 模板题 AcWing 791. 高精度加法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// C = A + B, A &gt;= 0, B &gt;= 0</span><br><span class="line">vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    if (A.size() &lt; B.size()) return add(B, A);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; C;</span><br><span class="line">int t = 0;</span><br><span class="line">for (int i = 0; i &lt; A.size(); i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    t += A[i];</span><br><span class="line">    if (i &lt; B.size()) t += B[i];</span><br><span class="line">    C.push_back(t % 10);</span><br><span class="line">    t /= 10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (t) C.push_back(t);</span><br><span class="line">return C;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度减法-——-模板题-AcWing-792-高精度减法"><a href="#高精度减法-——-模板题-AcWing-792-高精度减法" class="headerlink" title="高精度减法 —— 模板题 AcWing 792. 高精度减法"></a>高精度减法 —— 模板题 AcWing 792. 高精度减法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span><br><span class="line">vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line">    for (int i = 0, t = 0; i &lt; A.size(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        if (i &lt; B.size()) t -= B[i];</span><br><span class="line">        C.push_back((t + 10) % 10);</span><br><span class="line">        if (t &lt; 0) t = 1;</span><br><span class="line">        else t = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();</span><br><span class="line">return C;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="高精度乘低精度-——-模板题-AcWing-793-高精度乘法"><a href="#高精度乘低精度-——-模板题-AcWing-793-高精度乘法" class="headerlink" title="高精度乘低精度 —— 模板题 AcWing 793. 高精度乘法"></a>高精度乘低精度 —— 模板题 AcWing 793. 高精度乘法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// C = A * b, A &gt;= 0, b &gt;= 0</span><br><span class="line">vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line"></span><br><span class="line">int t = 0;</span><br><span class="line">for (int i = 0; i &lt; A.size() || t; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    if (i &lt; A.size()) t += A[i] * b;</span><br><span class="line">    C.push_back(t % 10);</span><br><span class="line">    t /= 10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();</span><br><span class="line"></span><br><span class="line">return C;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度除以低精度-——-模板题-AcWing-794-高精度除法"><a href="#高精度除以低精度-——-模板题-AcWing-794-高精度除法" class="headerlink" title="高精度除以低精度 —— 模板题 AcWing 794. 高精度除法"></a>高精度除以低精度 —— 模板题 AcWing 794. 高精度除法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// A / b = C ... r, A &gt;= 0, b &gt; 0</span><br><span class="line">vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line">    r = 0;</span><br><span class="line">    for (int i = A.size() - 1; i &gt;= 0; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * 10 + A[i];</span><br><span class="line">        C.push_back(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(C.begin(), C.end());</span><br><span class="line">    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();</span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维前缀和-——-模板题-AcWing-795-前缀和"><a href="#一维前缀和-——-模板题-AcWing-795-前缀和" class="headerlink" title="一维前缀和 —— 模板题 AcWing 795. 前缀和"></a>一维前缀和 —— 模板题 AcWing 795. 前缀和</h2><p>S[i] &#x3D; a[1] + a[2] + … a[i]<br>a[l] + … + a[r] &#x3D; S[r] - S[l - 1]</p><h2 id="二维前缀和-——-模板题-AcWing-796-子矩阵的和"><a href="#二维前缀和-——-模板题-AcWing-796-子矩阵的和" class="headerlink" title="二维前缀和 —— 模板题 AcWing 796. 子矩阵的和"></a>二维前缀和 —— 模板题 AcWing 796. 子矩阵的和</h2><p>S[i, j] &#x3D; 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</p><h2 id="一维差分-——-模板题-AcWing-797-差分"><a href="#一维差分-——-模板题-AcWing-797-差分" class="headerlink" title="一维差分 —— 模板题 AcWing 797. 差分"></a>一维差分 —— 模板题 AcWing 797. 差分</h2><p>给区间[l, r]中的每个数加上c：B[l] +&#x3D; c, B[r + 1] -&#x3D; c</p><h2 id="二维差分-——-模板题-AcWing-798-差分矩阵"><a href="#二维差分-——-模板题-AcWing-798-差分矩阵" class="headerlink" title="二维差分 —— 模板题 AcWing 798. 差分矩阵"></a>二维差分 —— 模板题 AcWing 798. 差分矩阵</h2><p>给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] +&#x3D; c, S[x2 + 1, y1] -&#x3D; c, S[x1, y2 + 1] -&#x3D; c, S[x2 + 1, y2 + 1] +&#x3D; c</p><h2 id="位运算-——-模板题-AcWing-801-二进制中1的个数"><a href="#位运算-——-模板题-AcWing-801-二进制中1的个数" class="headerlink" title="位运算 —— 模板题 AcWing 801. 二进制中1的个数"></a>位运算 —— 模板题 AcWing 801. 二进制中1的个数</h2><p>求n的第k位数字: n &gt;&gt; k &amp; 1<br>返回n的最后一位1：lowbit(n) &#x3D; n &amp; -n</p><h2 id="双指针算法-——-模板题-AcWIng-799-最长连续不重复子序列-AcWing-800-数组元素的目标和"><a href="#双指针算法-——-模板题-AcWIng-799-最长连续不重复子序列-AcWing-800-数组元素的目标和" class="headerlink" title="双指针算法 —— 模板题 AcWIng 799. 最长连续不重复子序列, AcWing 800. 数组元素的目标和"></a>双指针算法 —— 模板题 AcWIng 799. 最长连续不重复子序列, AcWing 800. 数组元素的目标和</h2><p>for (int i &#x3D; 0, j &#x3D; 0; i &lt; n; i ++ )<br>{<br>    while (j &lt; i &amp;&amp; check(i, j)) j ++ ;</p><p>&#x2F;&#x2F; 具体问题的逻辑</p><p>}<br>常见问题分类：<br>    (1) 对于一个序列，用两个指针维护一段区间<br>    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</p><h2 id="离散化-——-模板题-AcWing-802-区间和"><a href="#离散化-——-模板题-AcWing-802-区间和" class="headerlink" title="离散化 —— 模板题 AcWing 802. 区间和"></a>离散化 —— 模板题 AcWing 802. 区间和</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; alls; // 存储所有待离散化的值</span><br><span class="line">sort(alls.begin(), alls.end()); // 将所有值排序</span><br><span class="line">alls.erase(unique(alls.begin(), alls.end()), alls.end());   // 去掉重复元素</span><br><span class="line"></span><br><span class="line">// 二分求出x对应的离散化的值</span><br><span class="line">int find(int x) // 找到第一个大于等于x的位置</span><br><span class="line">&#123;</span><br><span class="line">    int l = 0, r = alls.size() - 1;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return r + 1; // 映射到1, 2, ...n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间合并-——-模板题-AcWing-803-区间合并"><a href="#区间合并-——-模板题-AcWing-803-区间合并" class="headerlink" title="区间合并 —— 模板题 AcWing 803. 区间合并"></a>区间合并 —— 模板题 AcWing 803. 区间合并</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 将所有存在交集的区间合并</span><br><span class="line">void merge(vector&lt;PII&gt; &amp;segs)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line">sort(segs.begin(), segs.end());</span><br><span class="line"></span><br><span class="line">int st = -2e9, ed = -2e9;</span><br><span class="line">for (auto seg : segs)</span><br><span class="line">    if (ed &lt; seg.first)</span><br><span class="line">    &#123;</span><br><span class="line">        if (st != -2e9) res.push_back(&#123;st, ed&#125;);</span><br><span class="line">        st = seg.first, ed = seg.second;</span><br><span class="line">    &#125;</span><br><span class="line">    else ed = max(ed, seg.second);</span><br><span class="line"></span><br><span class="line">if (st != -2e9) res.push_back(&#123;st, ed&#125;);</span><br><span class="line"></span><br><span class="line">segs = res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c-好用库函数"><a href="#c-好用库函数" class="headerlink" title="c++好用库函数"></a>c++好用库函数</h1><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20240201092535322.png" alt="image-20240201092535322"></p><h3 id="万能头"><a href="#万能头" class="headerlink" title="万能头&lt;bit&#x2F;stdc++.h&gt;"></a>万能头&lt;bit&#x2F;stdc++.h&gt;</h3><h3 id=""><a href="#" class="headerlink" title=""></a><algorithm></h3><p>swap()   交换</p><p>sort(arr.begin(),arr.end(),greater<int>())   排序</p><p>reverse(arr.begin(),arr.end())   倒置</p><p>lower_bound()&#x2F;upper_bound()  二分法查找</p><p>unique()</p><p>先排序，后删无效数据</p><p>去重+删除方法：</p><p>arr.erase(unique(arr.begin(),arr.end()),arr.end())</p><p>遍历输出：</p><p>for(auto ele :arr)</p><p>​    cout &lt;&lt; ele &lt;&lt;endl;</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><cmath></h3><p>abs(x)  绝对值</p><p>exp(x)  e的x次方</p><p>log(x)  ln(x)</p><p>pow(x,y)  x的y次方</p><p>sqrt(x)  根号下x</p><p>ceil(2.1) -&gt;3   向上取整</p><p>floor(2.1)-&gt;2  向下取整</p><p>round(2.9)-&gt;3 四舍五入</p><p>gcd()最大公约数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">long long gcd(long long a, long long b) &#123;  </span><br><span class="line">    return b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231210102110949.png" alt="image-20231210102110949"></p><p>lcm()最小公倍数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">long long lcm(long long a, long long b) &#123;  </span><br><span class="line">    return a * b / gcd(a, b); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a * b&#x3D;gcd(a,b) * lcm(a,b)</p><h2 id="c-stl"><a href="#c-stl" class="headerlink" title="c++stl"></a>c++stl</h2><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p>priority_queue&lt;int,vector<int>,greater<int>&gt;heap;&#x2F;&#x2F;小根堆</p><p>heap.push()放</p><p>top()取堆顶（最小的数）</p><p>pop()删掉堆顶元素</p><h1 id="不用输入长度输入数组的方法"><a href="#不用输入长度输入数组的方法" class="headerlink" title="不用输入长度输入数组的方法"></a>不用输入长度输入数组的方法</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a ;</span><br><span class="line">    <span class="type">int</span> n,i=<span class="number">0</span>,len;</span><br><span class="line">    <span class="type">char</span> chr;</span><br><span class="line">    <span class="keyword">while</span> (cin&gt;&gt;n)&#123;</span><br><span class="line">        a.<span class="built_in">push_back</span>(n);</span><br><span class="line">        i++;</span><br><span class="line">        cin.<span class="built_in">get</span>(chr);</span><br><span class="line">        <span class="keyword">if</span>(chr!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len = a.<span class="built_in">size</span>();</span><br><span class="line">    cout&lt;&lt;len&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="蓝桥杯模拟赛2"><a href="#蓝桥杯模拟赛2" class="headerlink" title="蓝桥杯模拟赛2"></a>蓝桥杯模拟赛2</h1><h2 id="1题-5"><a href="#1题-5" class="headerlink" title="1题 5"></a>1题 5</h2><p>问题描述</p><p>　　小蓝要在屏幕上放置一行文字，每个字的宽度相同。<br>　　小蓝发现，如果每个字的宽为 36 像素，一行正好放下 30 个字，字符之间和前后都没有任何空隙。<br>　　请问，如果每个字宽为 10 像素，字符之间不包含空隙，一行可以放下多少个字？</p><p>答案提交</p><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="答案-108"><a href="#答案-108" class="headerlink" title="答案 : 108"></a><strong>答案 : 108</strong></h2><h2 id="2题-15"><a href="#2题-15" class="headerlink" title="2题 15"></a>2题 15</h2><p>问题描述</p><p>　　求 2**2023%1000，即 2的2023次方除以1000的余数。</p><p>答案提交</p><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="答案-608"><a href="#答案-608" class="headerlink" title="答案 : 608"></a>答案 : 608</h2><h2 id="3题-10"><a href="#3题-10" class="headerlink" title="3题 10"></a>3题 10</h2><p>问题描述</p><p>　　如果一个正整数转化成二进制与转换成八进制后所有数位的数字之和相等，则称为数位和相等的数。<br>　　前几个数位和相等的正整数为 1, 8, 9, 64, ……<br>　　请问第 23 个数位和相等的正整数是多少？</p><p>答案提交</p><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="答案-4169"><a href="#答案-4169" class="headerlink" title="答案 : 4169"></a>答案 : 4169</h2><h2 id="4题-5"><a href="#4题-5" class="headerlink" title="4题 5"></a>4题 5</h2><p>问题描述</p><p>　　对于以下这些数（6行，每行6个，共36个），请问约数个数最多的是哪个？（如果有多个，请回答出现最早的那个）<br>　　393353 901440 123481 850930 423154 240461<br>　　373746 232926 396677 486579 744860 468782<br>　　941389 777714 992588 343292 385198 876426<br>　　483857 241899 544851 647930 772403 109929<br>　　882745 372491 877710 340000 659788 658675<br>　　296521 491295 609764 718967 842000 670302</p><p>答案提交</p><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="答案-901440"><a href="#答案-901440" class="headerlink" title="答案 : 901440"></a>答案 : 901440</h2><h2 id="5题-15"><a href="#5题-15" class="headerlink" title="5题 15"></a>5题 15</h2><p>问题描述</p><p>　　小蓝有一个01矩阵。他打算将第一行第一列的 0 变为 2 。变化过程有传染性，每次 2 的上下左右四个相邻的位置中的 0 都会变成 2 。直到最后每个 2 的周围都是 1 或 2 结束。<br>　　请问，最终矩阵中有多少个 2 ？<br>　　以下是小蓝的矩阵，共 30 行 40 列。　　</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">0000100010000001101010101001001100000011</span><br><span class="line">0101111001111101110111100000101010011111</span><br><span class="line">1000010000011101010110000000001011010100</span><br><span class="line">0110101010110000000101100100000101001001</span><br><span class="line">0000011010100000111111001101100010101001</span><br><span class="line">0110000110000000110100000000010010100011</span><br><span class="line">0100110010000110000000100010000101110000</span><br><span class="line">0010011010100110001111001101100110100010</span><br><span class="line">1111000111101000001110010001001011101101</span><br><span class="line">0011110100011000000001101001101110100001</span><br><span class="line">0000000101011000010011111001010011011100</span><br><span class="line">0000100000011001000100101000111011101100</span><br><span class="line">0010110000001000001010100011000010100011</span><br><span class="line">0110110000100011011010011010001101011011</span><br><span class="line">0000100100000001010000101100000000000010</span><br><span class="line">0011001000001000000010011001100101000110</span><br><span class="line">1110101000011000000100011001001100111010</span><br><span class="line">0000100100111000001101001000001010010001</span><br><span class="line">0100010010000110100001100000110111110101</span><br><span class="line">1000001001100010011001111101011001110001</span><br><span class="line">0000000010100101000000111100110010101101</span><br><span class="line">0010110101001100000100000010000010110011</span><br><span class="line">0000011101001001000111011000100111010100</span><br><span class="line">0010001100100000011000101011000000010101</span><br><span class="line">1001111010010110011010101110000000101110</span><br><span class="line">0110011101000010100001000101001001100010</span><br><span class="line">1101000000010010011001000100110010000101</span><br><span class="line">1001100010100010000100000101111111111100</span><br><span class="line">1001011010101100001000000011000110110000</span><br><span class="line">0011000100011000010111101000101110110001</span><br></pre></td></tr></table></figure><p>答案提交</p><p>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><h2 id="答案-591-1-i-j-1-或-541-1-1"><a href="#答案-591-1-i-j-1-或-541-1-1" class="headerlink" title="答案 : 591(1, i) &amp; (j, 1) 或 541(1, 1)"></a>答案 : 591(1, i) &amp; (j, 1) 或 541(1, 1)</h2><h2 id="6题-5"><a href="#6题-5" class="headerlink" title="6题 5"></a>6题 5</h2><p>问题描述</p><p>　　给定一个正好六位的正整数 x，请将 x 循环左移一位后输出。<br>　　所谓循环左移一位，是指将原来的十万位变为个位，原来的万位到个位向左移动依次变为十万位到十位。<br>　　例如：194910 左移一位变为 949101 。<br>　　又如：987123 左移一位变为 871239 。</p><p>输入格式</p><p>　　输入一行包含一个整数 x 。保证输入的 x 正好包含 6 个十进制数位，而且十万位和万位上的数字均不为 0 。</p><p>输出格式</p><p>　　输出一行包含一个整数，表示答案。</p><p>样例输入</p><p>194910</p><p>样例输出</p><p>949101</p><h2 id="7题-5"><a href="#7题-5" class="headerlink" title="7题 5"></a>7题 5</h2><p>问题描述</p><p>　　输入一个仅包含小写英文字母的字符串，请问这个字符串中的最后一元音是什么。<br>　　在英文中，a, e, i, o, u 共 5 个字母是元音字母，其它字母不是元音字母。</p><p>输入格式</p><p>　　输入一行包含一个字符串，仅由小写英文字符组成，字符串中至少包含一个元音字母。</p><p>输出格式</p><p>　　输出一行包含一个字符，表示答案。</p><p>样例输入</p><p>lanqiao</p><p>样例输出</p><p>o</p><p>样例输入</p><p>cup</p><p>样例输出</p><p>u</p><p>评测用例规模与约定</p><p>　　对于所有评测用例，1 &lt;&#x3D; 字符数量 &lt;&#x3D; 10000 。</p><h2 id="8题-10"><a href="#8题-10" class="headerlink" title="8题 10"></a>8题 10</h2><p>问题描述</p><p>　　给定一个整数，对这个整数的一次转换是指将这个整数变为这个整数的所有数位上的非零数字的乘积。<br>　　例如，对 123456789 进行一次转换变为 1<em>2</em>3<em>4</em>5<em>6</em>7<em>8</em>9&#x3D;362880，再进行一次转换变为 3<em>6</em>2<em>8</em>8&#x3D;2304，再进行一次转换变为 2<em>3</em>4&#x3D;24，再进行一次转换变为 8。<br>　　给定一个整数，请依次将转换过程中经历的每个整数输出，直到小于 10 。</p><p>输入格式</p><p>　　输入一行包含一个整数 n 。</p><p>输出格式</p><p>　　输出多行，每行包含一个整数。</p><p>样例输入</p><p>123456789</p><p>样例输出</p><p>362880<br>2304<br>24<br>8</p><p>评测用例规模与约定</p><p>　　对于 50% 的评测用例，1 &lt;&#x3D; n &lt;&#x3D; 10<strong>9 （10的9次方）。<br>　　对于所有评测用例，1 &lt;&#x3D; n &lt;&#x3D; 10</strong>18 （10的18次方）。</p><h2 id="9题-20"><a href="#9题-20" class="headerlink" title="9题 20"></a>9题 20</h2><p>问题描述</p><p>　　小蓝站在一个 n 行 m 列的方格图中间，方格图的每一个方格上都标有一个正整数。<br>　　如果两个相邻方格（上下左右四个方向相邻）内的数的最大公约数大于 1 ，则可以从其中一个方格移动到另一个方格，当然也可以从另一个方格移回第一个方格。<br>　　假设小蓝开始时站在第 r 行第 c 列，请问小蓝可以移动到方格图内的多少个方格？</p><p>输入格式</p><p>　　输入的第一行包含两个整数 n, m ，用一个空格分隔，表示方格图的行数和列数。<br>　　接下来 n 行，每行包含 m 个正整数，相邻整数间用一个空格分隔，依次表示方格图中从第 1 行到第 n 行，每行从第 1 列到第 m 列中的数。<br>　　接下来一行包含两个整数 r, c，用一个空格分隔，表示小蓝所在的行号和列号。</p><p>输出格式</p><p>　　输出一行包含一个整数，表示答案。</p><p>样例输入</p><p>3 4<br>3 6 5 5<br>2 4 3 5<br>7 8 3 8<br>3 2</p><p>样例输出</p><p>5</p><p>评测用例规模与约定</p><p>　　对于50%的评测用例，1 &lt;&#x3D; n, m &lt;&#x3D; 100，方格图中的每个数不超过 10<strong>5 （10的5次方）。<br>　　对于所有评测用例，1 &lt;&#x3D; n, m &lt;&#x3D; 1000，方格图中的每个数不超过 10</strong>9 （10的9次方）。</p><h2 id="10题-10"><a href="#10题-10" class="headerlink" title="10题 10"></a>10题 10</h2><p>问题描述</p><p>　　给定一个序列 a[1], a[2], …, a[n] 和一个整数 k，请找出一个长度正好为 k 的区间，使得区间中所有数的和最大。<br>　　即要找到一个整数 p ，使得 1 &lt;&#x3D; p 且 p+k-1 &lt;&#x3D; n ，使得 a[p]+a[p+1]+…+a[p+k-1] 最大。</p><p>输入格式</p><p>　　输入的第一行包含两个整数 n , k。<br>　　第二行包含 n 个整数，相邻的整数之间使用一个空格分隔，表示给定的序列。</p><p>输出格式</p><p>　　输出一行包含一个整数，表示最大的区间和，你只需要输出和就行，不需要输出方案。</p><p>样例输入</p><p>6 3<br>2 3 9 1 9 5</p><p>样例输出</p><p>19</p><p>评测用例规模与约定</p><p>　　对于 30% 的评测用例，1 &lt;&#x3D; k &lt;&#x3D; n &lt;&#x3D; 30，1 &lt;&#x3D; a[i] &lt;&#x3D; 100。<br>　　对于 60% 的评测用例，1 &lt;&#x3D; k &lt;&#x3D; n &lt;&#x3D; 1000，1 &lt;&#x3D; a[i] &lt;&#x3D; 10000。<br>　　对于所有评测用例，1 &lt;&#x3D; k &lt;&#x3D; n &lt;&#x3D; 100000，1 &lt;&#x3D; a[i] &lt;&#x3D; 1000000。</p><h1 id="白洋淀杯2"><a href="#白洋淀杯2" class="headerlink" title="白洋淀杯2"></a>白洋淀杯2</h1><h5 id="比赛须知-本次比赛只开放-C-C-Java-Python-三种语言"><a href="#比赛须知-本次比赛只开放-C-C-Java-Python-三种语言" class="headerlink" title="比赛须知 : 本次比赛只开放 C&#x2F;C++, Java, Python 三种语言"></a>比赛须知 : 本次比赛只开放 C&#x2F;C++, Java, Python 三种语言</h5><h3 id="A、日期统计"><a href="#A、日期统计" class="headerlink" title="A、日期统计"></a>A、日期统计</h3><h5 id="难度-简单"><a href="#难度-简单" class="headerlink" title="难度 : 简单"></a>难度 : <code>简单</code></h5><h5 id="算法标签-暴力-枚举"><a href="#算法标签-暴力-枚举" class="headerlink" title="算法标签 : 暴力 枚举"></a>算法标签 : <code>暴力</code> <code>枚举</code></h5><h5 id="分值-5"><a href="#分值-5" class="headerlink" title="分值 : 5"></a>分值 : <code>5</code></h5><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>小蓝现在有一个长度为 100 的数组，数组中的每个元素的值都在 0 到 9 的范围之内。数组中的元素从左至右如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">6</span> <span class="number">9</span> <span class="number">1</span> <span class="number">6</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">9</span> <span class="number">1</span> <span class="number">9</span> <span class="number">8</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">7</span> <span class="number">5</span> <span class="number">9</span> <span class="number">5</span> <span class="number">0</span> <span class="number">3</span> <span class="number">8</span> <span class="number">7</span> <span class="number">5</span> <span class="number">8</span> <span class="number">1</span> <span class="number">5</span> <span class="number">8</span> <span class="number">6</span> <span class="number">1</span> <span class="number">8</span> <span class="number">3</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">7</span> <span class="number">0</span> <span class="number">5</span> <span class="number">8</span> <span class="number">8</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">9</span> <span class="number">9</span> <span class="number">1</span> <span class="number">9</span> <span class="number">4</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">6</span> <span class="number">3</span> <span class="number">3</span> <span class="number">8</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">0</span> <span class="number">7</span> <span class="number">8</span> <span class="number">2</span> <span class="number">7</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span> <span class="number">5</span> <span class="number">6</span> <span class="number">5</span> <span class="number">6</span> <span class="number">1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">9</span> <span class="number">4</span> <span class="number">8</span> <span class="number">0</span> <span class="number">9</span> <span class="number">1</span> <span class="number">2</span> <span class="number">8</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>现在他想要从这个数组中寻找一些满足以下条件的子序列：</p><p>​1. 子序列的长度为 8；</p><p>​        2. 这个子序列可以按照下标顺序组成一个 <strong><code>yyyymmdd</code></strong> 格式的日期，并且要求这个日期是 <strong>2023</strong> 年中的某一天的日期，例如 <strong>20230902</strong>，</p><p>​<strong>20231223</strong>。**<code>yyyy</code>** 表示年份，**<code>mm</code>** 表示月份，**<code>dd</code>** 表示天数，当月份或者天数的长度只有一位时需要一个前导零补充。</p><p>请你帮小蓝计算下按上述条件一共能找到多少个<strong>不同</strong>的 2023 年的日期。对于相同的日期你只需要统计一次即可。</p><h4 id="时-空限制"><a href="#时-空限制" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Java     <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Python   <span class="number">1</span>s/<span class="number">64</span>MB</span><br></pre></td></tr></table></figure><h4 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> days[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++ ) cin &gt;&gt; q[i];    </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= days[i]; j ++ ) &#123;</span><br><span class="line">            string data = <span class="string">&quot;2023&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">10</span>) data += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            data += <span class="built_in">to_string</span>(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">10</span>) data += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            data += <span class="built_in">to_string</span>(j);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//string =&gt; char ch[];</span></span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span> &amp;&amp; cnt &lt; <span class="number">8</span>; k ++ )</span><br><span class="line">                <span class="keyword">if</span> (data[cnt] - <span class="number">48</span> == q[k]) cnt ++ ;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">8</span>) res ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">235</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="B、01串的熵"><a href="#B、01串的熵" class="headerlink" title="B、01串的熵"></a>B、01串的熵</h3><h5 id="难度-中等"><a href="#难度-中等" class="headerlink" title="难度 : 中等"></a>难度 : <code>中等</code></h5><h5 id="算法标签-暴力-枚举-1"><a href="#算法标签-暴力-枚举-1" class="headerlink" title="算法标签 : 暴力 枚举"></a>算法标签 : <code>暴力</code> <code>枚举</code></h5><h5 id="分值-15"><a href="#分值-15" class="headerlink" title="分值 : 15"></a>分值 : <code>15</code></h5><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>对于一个长度为 n 的 01 串 $S&#x3D;x_1x_2x_3…x_n$，香农信息熵的定义为 $H(S)$&#x3D; −$Σ_1^np(x_i)log⁡_2{p(x_i)}$，其中 $p(0),p(1)p(0),p(1)$ 表示在这个 01 串中 0 和 1 出现的占比。 </p><p>比如，对于$ S&#x3D;100$ 来说，信息熵 $H(S)$&#x3D;−$\frac{1}{3}log⁡_2(\frac{1}{3})−\frac{2}{3}log_⁡2(\frac{2}{3})−\frac{2}{3}log_⁡2(\frac{2}{3})&#x3D;1.3083$</p><p>对于一个长度为 23333333 的 01 串, 如果其信息熵为 11625907.5798， 且 0 出现次数比 1 少, 那么这个 01 串中 0 出现了多少次?</p><h4 id="时-空限制-1"><a href="#时-空限制-1" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Java     <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Python   <span class="number">1</span>s/<span class="number">64</span>MB</span><br></pre></td></tr></table></figure><h4 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">23333333</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">double</span> i = <span class="number">1</span>; i &lt; N; i ++ ) &#123;</span><br><span class="line">        <span class="type">double</span> s1 = <span class="number">0</span>, s2 = <span class="number">0</span>;</span><br><span class="line">        s1 -= i / N * <span class="built_in">log2</span>(i / N) * i;</span><br><span class="line">        s2 -= (N - i) / N * <span class="built_in">log2</span>((N - i) / N) * (N - i);</span><br><span class="line">        <span class="keyword">if</span> (s1 + s2 &gt;= <span class="number">11625907.579745</span> &amp;&amp; s1 + s2 &lt;= <span class="number">11625907.579844</span>) &#123;</span><br><span class="line">            res = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">11027421</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C、时间显示"><a href="#C、时间显示" class="headerlink" title="C、时间显示"></a>C、时间显示</h3><h5 id="难度-简单-1"><a href="#难度-简单-1" class="headerlink" title="难度 : 简单"></a>难度 : <code>简单</code></h5><h5 id="算法标签-暴力"><a href="#算法标签-暴力" class="headerlink" title="算法标签 : 暴力"></a>算法标签 : <code>暴力</code></h5><h5 id="分值-5-1"><a href="#分值-5-1" class="headerlink" title="分值 : 5"></a>分值 : <code>5</code></h5><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>小蓝要和朋友合作开发一个时间显示的网站。</p><p>在服务器上，朋友已经获取了当前的时间，用一个整数表示，值为从 $1970年 1 月 1 日 00:00:00$ 到当前时刻经过的毫秒数。</p><p>现在，小蓝要在客户端显示出这个时间。</p><p>小蓝不用显示出年月日，只需要显示出时分秒即可，毫秒也不用显示，直接舍去即可。</p><p>给定一个用整数表示的时间，请将这个时间对应的时分秒输出。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行包含一个整数，表示时间。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出时分秒表示的当前时间，格式形如 <code>HH:MM:SS</code>，其中 <code>HH</code> 表示时，值为 0 到 23，<code>MM</code> 表示分，值为 0 到 59，<code>SS</code> 表示秒，值为 0 到 59。</p><p>时、分、秒不足两位时补前导 0。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于所有评测用例，给定的时间为不超过 $10^{18}$的正整数。</p><h4 id="时-空限制-2"><a href="#时-空限制-2" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Java     <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Python   <span class="number">1</span>s/<span class="number">64</span>MB</span><br></pre></td></tr></table></figure><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">46800999</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13:00:00</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1618708103123</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01:08:23</span><br></pre></td></tr></table></figure><h4 id="答案提交-2"><a href="#答案提交-2" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目须知 : </span></span><br><span class="line"><span class="comment">本题为编程题, 需要将代码交于此处</span></span><br><span class="line"><span class="comment">Java组同学不需要copy包名, 但是需要import相关库, 主类名务必是 Main</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    n /= <span class="number">1000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02lld:&quot;</span>, (n / <span class="number">3600</span>) % <span class="number">24</span>);</span><br><span class="line">    n %= <span class="number">3600</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02lld:&quot;</span>, n / <span class="number">60</span>);</span><br><span class="line">    n %= <span class="number">60</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02lld&quot;</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="D、完全平方数"><a href="#D、完全平方数" class="headerlink" title="D、完全平方数"></a>D、完全平方数</h3><h5 id="难度-简单-2"><a href="#难度-简单-2" class="headerlink" title="难度 : 简单"></a>难度 : <code>简单</code></h5><h5 id="算法标签-质因数"><a href="#算法标签-质因数" class="headerlink" title="算法标签 : 质因数"></a>算法标签 : <code>质因数</code></h5><h5 id="分值-15-1"><a href="#分值-15-1" class="headerlink" title="分值 : 15"></a>分值 : <code>15</code></h5><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>一个整数 <em>a</em> 是一个完全平方数，是指它是某一个整数的平方，即存在一个整数 <em>b</em>，使得 <em>a</em> &#x3D; $b^2$。</p><p>给定一个正整数 <em>n</em>，请找到最小的正整数 <em>x</em>，使得它们的乘积是一个完全平方数。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行包含一个正整数 <em>n</em>。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出找到的最小的正整数 <em>x</em>。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 30%的评测用例，1 ≤ <em>n</em> ≤ 1000，答案不超过 1000。<br>对于 60% 的评测用例，1 ≤ <em>n</em> ≤ $10^8$，答案不超过 $10^8$。<br>对于所有评测用例，1 ≤ <em>n</em> ≤ $10^{12}$，答案不超过 $10^{12}$。</p><h4 id="时-空限制-3"><a href="#时-空限制-3" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">256</span>MB</span><br><span class="line">Java     <span class="number">2</span>s/<span class="number">256</span>MB</span><br><span class="line">Python   <span class="number">3</span>s/<span class="number">256</span>MB</span><br></pre></td></tr></table></figure><h4 id="输入样例1：-1"><a href="#输入样例1：-1" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-1"><a href="#输出样例1：-1" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-1"><a href="#输入样例2：-1" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-1"><a href="#输出样例2：-1" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h4 id="答案提交-3"><a href="#答案提交-3" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目须知 : </span></span><br><span class="line"><span class="comment">本题为编程题, 需要将代码交于此处</span></span><br><span class="line"><span class="comment">Java组同学不需要copy包名, 但是需要import相关库, 主类名务必是 Main</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; i ++ ) </span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) s ++ , n /= i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (s % <span class="number">2</span>) res *= i; </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) res *= n;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="E、超级胶水"><a href="#E、超级胶水" class="headerlink" title="E、超级胶水"></a>E、超级胶水</h3><h5 id="难度-简单-3"><a href="#难度-简单-3" class="headerlink" title="难度 : 简单"></a>难度 : <code>简单</code></h5><h5 id="算法标签-贪心"><a href="#算法标签-贪心" class="headerlink" title="算法标签 : 贪心"></a>算法标签 : <code>贪心</code></h5><h5 id="分值-10"><a href="#分值-10" class="headerlink" title="分值 : 10"></a>分值 : <code>10</code></h5><p>小明有 <em>n</em> 颗石子，按顺序摆成一排。</p><p>他准备用胶水将这些石子粘在一起。</p><p>每颗石子有自己的重量，如果将两颗石子粘在一起，将合并成一颗新的石子，重量是这两颗石子的重量之和。</p><p>为了保证石子粘贴牢固，粘贴两颗石子所需要的胶水与两颗石子的重量乘积成正比，本题不考虑物理单位，认为所需要的胶水在数值上等于两颗石子重量的乘积。</p><p>每次合并，小明只能合并位置相邻的两颗石子，并将合并出的新石子放在原来的位置。</p><p>现在，小明想用最少的胶水将所有石子粘在一起，请帮助小明计算最少需要多少胶水。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数 <em>n</em>，表示初始时的石子数量。</p><p>第二行包含 <em>n</em> 个整数$ w_1,w_2,…,w_n$，依次表示每颗石子的重量。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数表示答案。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1 ≤ <em>n</em> ≤ $10^5$,<br>1 ≤ $w_i$ ≤ 1000</p><h4 id="时-空限制-4"><a href="#时-空限制-4" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Java     <span class="number">2</span>s/<span class="number">128</span>MB</span><br><span class="line">Python   <span class="number">3</span>s/<span class="number">128</span>MB</span><br></pre></td></tr></table></figure><h4 id="输入样例1：-2"><a href="#输入样例1：-2" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 4 5</span><br></pre></td></tr></table></figure><h4 id="输出样例1：-2"><a href="#输出样例1：-2" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">47</span><br></pre></td></tr></table></figure><h4 id="输入样例2：-2"><a href="#输入样例2：-2" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 5 2 6 3 7 4 8</span><br></pre></td></tr></table></figure><h4 id="输出样例2：-2"><a href="#输出样例2：-2" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">546</span><br></pre></td></tr></table></figure><h4 id="答案提交-4"><a href="#答案提交-4" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目须知 : </span></span><br><span class="line"><span class="comment">本题为编程题, 需要将代码交于此处</span></span><br><span class="line"><span class="comment">Java组同学不需要copy包名, 但是需要import相关库, 主类名务必是 Main</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        heap.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ll a = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        ll b = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        res += a * b;</span><br><span class="line">        heap.<span class="built_in">push</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="F、数字组合"><a href="#F、数字组合" class="headerlink" title="F、数字组合"></a>F、数字组合</h3><h5 id="难度-简单-4"><a href="#难度-简单-4" class="headerlink" title="难度 : 简单"></a>难度 : <code>简单</code></h5><h5 id="算法标签-动态规划-DP-背包问题"><a href="#算法标签-动态规划-DP-背包问题" class="headerlink" title="算法标签 : 动态规划 DP 背包问题"></a>算法标签 : <code>动态规划</code> <code>DP</code> <code>背包问题</code></h5><h5 id="分值-10-1"><a href="#分值-10-1" class="headerlink" title="分值 : 10"></a>分值 : <code>10</code></h5><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>$给定 N 个正整数 A_1,A_2,…,A_N，从中选出若干个数，使它们的和为 M，求有多少种选择方案。$</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>$第一行包含两个整数 N 和 M。$</p><p>$第二行包含 N 个整数，表示 A_1,A_2,…,A_N。$</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>包含一个整数，表示可选方案数。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1 ≤ N ≤ 100,$<br>$1 ≤ M ≤ 10000,$<br>$1 ≤ A_i ≤ 1000,$<br>答案保证在 int 范围内。</p><h4 id="时-空限制-5"><a href="#时-空限制-5" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Java     <span class="number">2</span>s/<span class="number">128</span>MB</span><br><span class="line">Python   <span class="number">3</span>s/<span class="number">128</span>MB</span><br></pre></td></tr></table></figure><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 1 2 2</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="答案提交-5"><a href="#答案提交-5" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目须知 : </span></span><br><span class="line"><span class="comment">本题为编程题, 需要将代码交于此处</span></span><br><span class="line"><span class="comment">Java组同学不需要copy包名, 但是需要import相关库, 主类名务必是 Main</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, v;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        cin &gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= v; j -- ) </span><br><span class="line">            f[j] += f[j - v];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[m];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="G、冶炼金属"><a href="#G、冶炼金属" class="headerlink" title="G、冶炼金属"></a>G、冶炼金属</h3><h5 id="难度-中等-1"><a href="#难度-中等-1" class="headerlink" title="难度 : 中等"></a>难度 : <code>中等</code></h5><h5 id="算法标签-二分-推公式"><a href="#算法标签-二分-推公式" class="headerlink" title="算法标签 : 二分 推公式"></a>算法标签 : <code>二分</code> <code>推公式</code></h5><h5 id="分值-15-2"><a href="#分值-15-2" class="headerlink" title="分值 : 15"></a>分值 : <code>15</code></h5><p>小蓝有一个神奇的炉子用于将普通金属 <em>O</em> 冶炼成为一种特殊金属 <em>X</em> 。</p><p>这个炉子有一个称作转换率的属性 <em>V</em> ，<em>V</em> 是一个正整数，这意味着消耗 <em>V</em> 个普通金属 <em>O</em> 恰好可以冶炼出一个特殊金属 <em>X</em>，当普通金属 <em>O</em> 的数目不足 <em>V</em>时，无法继续冶炼。</p><p>现在给出了 <em>N</em> 条冶炼记录，每条记录中包含两个整数 <em>A</em> 和 <em>B</em>，这表示本次投入了 <em>A</em> 个普通金属 <em>O</em>，最终冶炼出了 <em>B</em> 个特殊金属 <em>X</em>。</p><p>每条记录都是独立的，这意味着上一次没消耗完的普通金属 <em>O</em> 不会累加到下一次的冶炼当中。</p><p>根据这 <em>N</em> 条冶炼记录，请你推测出转换率 <em>V</em> 的最小值和最大值分别可能是多少，<strong>题目保证评测数据不存在无解的情况</strong>。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个整数 <em>N</em>，表示冶炼记录的数目。</p><p>接下来输入 <em>N</em> 行，每行两个整数 <em>A</em>、<em>B</em>，含义如题目所述。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出两个整数，分别表示 <em>V</em></p><p>可能的最小值和最大值，中间用空格分开。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 30%的评测用例，1≤<em>N</em>≤$10^2$。<br>对于 60% 的评测用例，1≤<em>N</em>≤$10^3$。<br>对于 100% 的评测用例，1≤<em>N</em>≤$10^4$，1≤<em>B</em>≤<em>A</em>≤$10^9$。</p><h4 id="时-空限制-6"><a href="#时-空限制-6" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">256</span>MB</span><br><span class="line">Java     <span class="number">2</span>s/<span class="number">256</span>MB</span><br><span class="line">Python   <span class="number">3</span>s/<span class="number">256</span>MB</span><br></pre></td></tr></table></figure><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">75 3</span><br><span class="line">53 2</span><br><span class="line">59 2</span><br></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 25</span><br></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>当 <em>V</em>&#x3D;20 时，有：$⌊\frac{75}{20}⌋&#x3D;3，⌊\frac{53}{20}⌋&#x3D;2，⌊\frac{59}{20}⌋&#x3D;2$，可以看到符合所有冶炼记录。</p><p>当 <em>V</em>&#x3D;25 时，有：$⌊\frac{75}{25}⌋&#x3D;3，⌊\frac{53}{25}⌋&#x3D;2，⌊\frac{59}{25}⌋&#x3D;2$，可以看到符合所有冶炼记录。</p><p>且再也找不到比 20 更小或者比 25 更大的符合条件的 <em>V</em> 值了。</p><h4 id="答案提交-6"><a href="#答案提交-6" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目须知 : </span></span><br><span class="line"><span class="comment">本题为编程题, 需要将代码交于此处</span></span><br><span class="line"><span class="comment">Java组同学不需要copy包名, 但是需要import相关库, 主类名务必是 Main</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">### 二分</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid,<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / mid == b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i] / b[i] &lt; k)k = a[i] / b[i];   <span class="comment">//找到划分区间的中间值</span></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = k;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> minvalue = <span class="number">-1</span>,maxvalue = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>,r = k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)   <span class="comment">//二分板子</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(mid,a[i],b[i])) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        minvalue = <span class="built_in">max</span>(minvalue,l);    <span class="comment">//找到满足所有矿石的转换率的最小值 </span></span><br><span class="line">        l = k; r = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)   <span class="comment">//偏右二分板子</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(mid,a[i],b[i])) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        maxvalue = <span class="built_in">min</span>(maxvalue,l);   <span class="comment">//找到满足所有矿石的转换率的最大值 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,minvalue,maxvalue);  <span class="comment">//这里的maxvalue换成ans也是可以AC的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 推公式</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span> (n -- ) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        l = <span class="built_in">max</span>(l, a / (b + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">        r = <span class="built_in">min</span>(r, a / b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; l &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; r;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="H、K倍区间"><a href="#H、K倍区间" class="headerlink" title="H、K倍区间"></a>H、K倍区间</h3><h5 id="难度-中等-2"><a href="#难度-中等-2" class="headerlink" title="难度 : 中等"></a>难度 : <code>中等</code></h5><h5 id="算法标签-前缀和"><a href="#算法标签-前缀和" class="headerlink" title="算法标签 : 前缀和"></a>算法标签 : <code>前缀和</code></h5><h5 id="分值-15-3"><a href="#分值-15-3" class="headerlink" title="分值 : 15"></a>分值 : <code>15</code></h5><p>$给定一个长度为 N 的数列，A_1,A_2,…A_N，如果其中一段连续的子序列 A_i,A_i+1,…A_j 之和是 K 的倍数，我们就称这个区间 [i,j] 是 K 倍区间。  $</p><p>$你能求出数列中总共有多少个 K 倍区间吗？$  </p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>$第一行包含两个整数 N 和 K 。$</p><p>$以下 N 行每行包含一个整数 A_i。$</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，代表 K 倍区间的数目。</p><h4 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1 ≤ N,K ≤ 100000,$</p><p>$1 ≤ A_i ≤ 100000$</p><h4 id="时-空限制-7"><a href="#时-空限制-7" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">64</span>MB</span><br><span class="line">Java     <span class="number">2</span>s/<span class="number">128</span>MB</span><br><span class="line">Python   <span class="number">3</span>s/<span class="number">128</span>MB</span><br></pre></td></tr></table></figure><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="答案提交-7"><a href="#答案提交-7" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目须知 : </span></span><br><span class="line"><span class="comment">本题为编程题, 需要将代码交于此处</span></span><br><span class="line"><span class="comment">Java组同学不需要copy包名, 但是需要import相关库, 主类名务必是 Main</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">LL cnt[N], s[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        res += cnt[s[i] % k];</span><br><span class="line">        cnt[s[i] % k] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="I、蜗牛"><a href="#I、蜗牛" class="headerlink" title="I、蜗牛"></a>I、蜗牛</h3><h5 id="难度-中等-3"><a href="#难度-中等-3" class="headerlink" title="难度 : 中等"></a>难度 : <code>中等</code></h5><h5 id="算法标签-动态规划-DP"><a href="#算法标签-动态规划-DP" class="headerlink" title="算法标签 : 动态规划 DP"></a>算法标签 : <code>动态规划</code> <code>DP</code></h5><h5 id="分值-25"><a href="#分值-25" class="headerlink" title="分值 : 25"></a>分值 : <code>25</code></h5><h4 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h4><p>$这天，一只蜗牛来到了二维坐标系的原点。$</p><p>$在 x 轴上长有 n 根竹竿。它们平行于 y 轴，底部纵坐标为 0，横坐标分别为 x_1,x_2,…,x_n。竹竿的高度均为无限高，宽度可忽略。$蜗牛想要从原点走到第 n 个竹竿的底部也就是坐标 $(x_n,0)$。$它只能在 x 轴上或者竹竿上爬行，在 x 轴上爬行速度为 1 单位每秒$；由于受到引力影响，蜗牛在竹竿上向上和向下爬行的速度分别为 0.7 单位每秒和 1.3 单位每秒。</p><p>$为了快速到达目的地，它施展了魔法，在第 i 和 i + 1 根竹竿之间建立了传送门（0 &lt; i &lt; n），如果蜗牛位于第 i 根竹竿的高度为 a_i的位置 (x_i,a_i)，就可以瞬间到达$$第 i+1 根竹竿的高度为 b_i+1 的位置 (x_i+1,b_i+1)，请计算蜗牛最少需要多少秒才能到达目的地。$</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>$输入共 n + 1 行，第一行为一个正整数 n；$</p><p>$第二行为 n 个正整数 x_1,x_2,…,x_n ；$</p><p>$后面 n - 1 行，每行两个正整数 a_i,b_i+1 。$</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出共一行，一个浮点数表示答案（四舍五入保留两位小数）。</p><p><img src="C:\Users\l\AppData\Roaming\Typora\typora-user-images\image-20231224164544438.png" alt="image-20231224164544438"></p><h4 id="时-空限制-8"><a href="#时-空限制-8" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">256</span>MB</span><br><span class="line">Java     <span class="number">2</span>s/<span class="number">512</span>MB</span><br><span class="line">Python   <span class="number">3</span>s/<span class="number">512</span>MB</span><br></pre></td></tr></table></figure><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 10 11</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.20</span><br></pre></td></tr></table></figure><h4 id="答案提交-8"><a href="#答案提交-8" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目须知 : </span></span><br><span class="line"><span class="comment">本题为编程题, 需要将代码交于此处</span></span><br><span class="line"><span class="comment">Java组同学不需要copy包名, 但是需要import相关库, 主类名务必是 Main</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> f[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> x[N], a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; x[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++ ) cin &gt;&gt; a[i] &gt;&gt; b[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  f[<span class="number">1</span>][<span class="number">0</span>] = x[<span class="number">1</span>];</span><br><span class="line">  f[<span class="number">1</span>][<span class="number">1</span>] = x[<span class="number">1</span>] + a[<span class="number">1</span>] / <span class="number">0.7</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">    f[i][<span class="number">0</span>] = <span class="built_in">min</span>(f[i - <span class="number">1</span>][<span class="number">0</span>] + x[i] - x[i - <span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">1</span>] + b[i] / <span class="number">1.3</span>);</span><br><span class="line">    f[i][<span class="number">1</span>] = <span class="built_in">min</span>(f[i][<span class="number">0</span>] + a[i] / <span class="number">0.7</span>, f[i - <span class="number">1</span>][<span class="number">1</span>] + (a[i] &gt; b[i] ? (a[i] - b[i]) / <span class="number">0.7</span> : (b[i] - a[i]) / <span class="number">1.3</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>, f[n][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="J、砍竹子"><a href="#J、砍竹子" class="headerlink" title="J、砍竹子"></a>J、砍竹子</h3><h5 id="难度-困难"><a href="#难度-困难" class="headerlink" title="难度 : 困难"></a>难度 : <code>困难</code></h5><h5 id="算法标签-贪心-堆"><a href="#算法标签-贪心-堆" class="headerlink" title="算法标签 : 贪心 堆"></a>算法标签 : <code>贪心</code> <code>堆</code></h5><h5 id="分值-35"><a href="#分值-35" class="headerlink" title="分值 : 35"></a>分值 : <code>35</code></h5><h4 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h4><p>这天，小明在砍竹子，他面前有 <em>n</em> 棵竹子排成一排，一开始第 <em>i</em> 棵竹子的高度为 $h_i$。</p><p>他觉得一棵一棵砍太慢了，决定使用魔法来砍竹子。</p><p>魔法可以对连续的一段相同高度的竹子使用，假设这一段竹子的高度为 <em>H</em>，</p><p>那么使用一次魔法可以把这一段竹子的高度都变为$ ⌊\sqrt{⌊\frac{H}{2}⌋+1} ⌋$，其中 ⌊<em>x</em>⌋ 表示对 <em>x</em></p><p> 向下取整。小明想知道他最少使用多少次魔法可以让所有的竹子的高度都变为 1。</p><h4 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行为一个正整数 <em>n</em>，表示竹子的棵数。</p><p>第二行共 <em>n</em> 个空格分开的正整数 $h_i$，表示每棵竹子的高度。</p><h4 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数表示答案。</p><h4 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 20% 的数据，保证 $1 ≤ n ≤ 1000,1 ≤ h_i ≤10^6$。<br>对于 100% 的数据，保证 $1 ≤ n ≤ 2×10^5 , 1 ≤ h_i ≤ 10^{18}$ 。</p><h4 id="时-空限制-9"><a href="#时-空限制-9" class="headerlink" title="时&#x2F;空限制"></a>时&#x2F;空限制</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C/C++    <span class="number">1</span>s/<span class="number">256</span>MB</span><br><span class="line">Java     <span class="number">2</span>s/<span class="number">512</span>MB</span><br><span class="line">Python   <span class="number">3</span>s/<span class="number">512</span>MB</span><br></pre></td></tr></table></figure><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2 1 4 2 6 7</span><br></pre></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释"></a>样例解释</h4><p>其中一种方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  2 1 4 2 6 7</span><br><span class="line">→ 2 1 4 2 6 2</span><br><span class="line">→ 2 1 4 2 2 2</span><br><span class="line">→ 2 1 1 2 2 2</span><br><span class="line">→ 1 1 1 2 2 2</span><br><span class="line">→ 1 1 1 1 1 1</span><br></pre></td></tr></table></figure><p>共需要 5 步完成。</p><h4 id="答案提交-9"><a href="#答案提交-9" class="headerlink" title="答案提交 :"></a>答案提交 :</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目须知 : </span></span><br><span class="line"><span class="comment">本题为编程题, 需要将代码交于此处</span></span><br><span class="line"><span class="comment">Java组同学不需要copy包名, 但是需要import相关库, 主类名务必是 Main</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">### 贪心 + 优先队列</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL h[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    LL v;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Seg&amp; S) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != S.v) <span class="keyword">return</span> v &lt; S.v;</span><br><span class="line">        <span class="keyword">return</span> l &gt; S.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">f</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrtl</span>(x / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;h[i]);</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;Seg&gt; heap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n &amp;&amp; h[i] == h[j]) j ++ ;</span><br><span class="line">        heap.<span class="built_in">push</span>(&#123;i, j - <span class="number">1</span>, h[i]&#125;);</span><br><span class="line">        i = j - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>() &gt; <span class="number">1</span> || heap.<span class="built_in">top</span>().v &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (heap.<span class="built_in">size</span>() &amp;&amp; heap.<span class="built_in">top</span>().v == t.v &amp;&amp; t.r + <span class="number">1</span> == heap.<span class="built_in">top</span>().l)</span><br><span class="line">        &#123;</span><br><span class="line">            t.r = heap.<span class="built_in">top</span>().r;</span><br><span class="line">            heap.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        heap.<span class="built_in">push</span>(&#123;t.l, t.r, <span class="built_in">f</span>(t.v)&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t.v &gt; <span class="number">1</span>) res ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 贪心 </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>, M = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">LL f[N][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    LL stk[N];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        LL x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">1</span>) stk[ ++ top] = x, x = <span class="built_in">sqrtl</span>(x / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        res += top;</span><br><span class="line">        m = <span class="built_in">max</span>(m, top);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, k = top; k; j ++ , k -- ) </span><br><span class="line">            f[i][j] = stk[k];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (f[j][i] &amp;&amp; f[j][i] == f[j - <span class="number">1</span>][i])</span><br><span class="line">                res -- ;</span><br><span class="line">                </span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端入门</title>
      <link href="/2025/03/19/front-introduction/"/>
      <url>/2025/03/19/front-introduction/</url>
      
        <content type="html"><![CDATA[<h3 id="前端入门"><a href="#前端入门" class="headerlink" title="前端入门"></a><strong>前端入门</strong></h3><h3 id="1，HTML-CSS"><a href="#1，HTML-CSS" class="headerlink" title="1，HTML+CSS"></a><strong>1，HTML+CSS</strong></h3><p>HTML（<a href="https://so.csdn.net/so/search?q=%E8%B6%85%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80&spm=1001.2101.3001.7020">超文本标记语言</a>）和 CSS（级联样式表）是用于构建 Web 页面的两项核心技术。学习 HTML+CSS 是前端小白入门的必经之路。</p><p>HTML 全称为超文本标签语言，是一种标识性的语言。它包括一系列标签，通过这些标签可以将网络上的文档格式统一，使分散的 Internet 资源连接为一个逻辑整体。HTML 文本是由 HTML 命令组成的描述性文本，HTML 命令可以说明文字，图形、动画、声音、表格、链接等。</p><p>CSS <a href="https://so.csdn.net/so/search?q=%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8&spm=1001.2101.3001.7020">层叠样式表</a>是一种用来表现 HTML 或 XML 等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p><h3 id="2，JavaScript-基础"><a href="#2，JavaScript-基础" class="headerlink" title="2，JavaScript 基础"></a><strong>2，JavaScript 基础</strong></h3><p>JavaScript 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式风格。</p><p><strong>主要功能</strong>：</p><ul><li>嵌入动态文本于HTML页面。</li><li>对浏览器事件做出响应。</li><li>读写HTML元素</li><li>在数据被提交到服务器之前验证数据。</li><li>检测访客的浏览器信息。控制 cookies，包括创建和修改等。</li><li>基于 Node.js 技术进行服务器端编程。</li></ul><h5 id="pinia-vuex"><a href="#pinia-vuex" class="headerlink" title="pinia&gt;vuex"></a>pinia&gt;vuex</h5><h3 id="3-vue3"><a href="#3-vue3" class="headerlink" title="3,vue3"></a><strong>3,vue3</strong></h3><p>Vue 3 是一个流行的开源JavaScript框架，用于构建用户界面和单页面应用。它带来了许多新特性和改进，包括更好的性能、更小的打包大小、更好的TypeScript支持、全新的组合式 API，以及一些新的内置组件。</p><h3 id="4-组件库"><a href="#4-组件库" class="headerlink" title="4,组件库"></a><strong>4,组件库</strong></h3><h4 id="Element-Plus：一个-Vue-3-UI-框架-Element-Plus"><a href="#Element-Plus：一个-Vue-3-UI-框架-Element-Plus" class="headerlink" title="Element-Plus：一个 Vue 3 UI 框架 | Element Plus"></a>Element-Plus：<a href="https://element-plus.org/zh-CN/">一个 Vue 3 UI 框架 | Element Plus</a></h4><h4 id="Arco-Arco-Design-企业级产品的完整设计和开发解决方案"><a href="#Arco-Arco-Design-企业级产品的完整设计和开发解决方案" class="headerlink" title="Arco:Arco Design - 企业级产品的完整设计和开发解决方案"></a>Arco:<a href="https://arco.design/">Arco Design - 企业级产品的完整设计和开发解决方案</a></h4><h4 id="Ant：Ant-Design-一套企业级-UI-设计语言和-React-组件库"><a href="#Ant：Ant-Design-一套企业级-UI-设计语言和-React-组件库" class="headerlink" title="Ant：Ant Design - 一套企业级 UI 设计语言和 React 组件库"></a>Ant：<a href="https://ant-design.antgroup.com/index-cn">Ant Design - 一套企业级 UI 设计语言和 React 组件库</a></h4><h3 id="5，小程序"><a href="#5，小程序" class="headerlink" title="5，小程序"></a>5，小程序</h3><p>【新课uniapp项目实战、uniapp小程序、微信小程序、最新vue3语法入门到实战（已完结）】 <a href="https://www.bilibili.com/video/BV1mb421H7k4/?p=26&share_source=copy_web&vd_source=630e5b395d32446f0552374f5ea59dac">https://www.bilibili.com/video/BV1mb421H7k4/?p=26&amp;share_source=copy_web&amp;vd_source=630e5b395d32446f0552374f5ea59dac</a></p><p><strong>uni-app文档：<a href="https://uniapp.dcloud.net.cn/">https://uniapp.dcloud.net.cn</a></strong></p><h3 id="6，调色盘"><a href="#6，调色盘" class="headerlink" title="6，调色盘"></a>6，调色盘</h3><p>渐变色：<a href="https://uigradients.com/#PiggyPink">uiGradients - Beautiful colored gradients</a></p><p><a href="https://www.zhongguose.com/">zhongguose － 传统颜色</a></p><p><a href="https://nipponcolors.com/#kurumi">NIPPON COLORS - 日本の伝統色</a></p><p><a href="https://coolors.co/generate">创建调色板 - 冷却器</a></p><p><a href="https://color.adobe.com/zh/create/color-wheel">色輪、調色盤產生器 | Adobe Color</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 前端 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传（批量+git）</title>
      <link href="/2025/03/18/file-upload/"/>
      <url>/2025/03/18/file-upload/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传（批量-git）"><a href="#文件上传（批量-git）" class="headerlink" title="文件上传（批量+git）"></a>文件上传（批量+git）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;document-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 左侧内容区域 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-section&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 顶部标题区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>AI-ARG 文档助手<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;subtitle&quot;</span>&gt;</span>上传您的文档，让AI为您分析和处理<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 上传模式切换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-mode-switch&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 文件上传按钮 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;[&#x27;mode-btn&#x27;, &#123; active: uploadMode === &#x27;file&#x27; &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;uploadMode = &#x27;file&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326z m1.8 562H232V136h302v216c0 23.2 18.8 42 42 42h216v494z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- git上传按钮 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;[&#x27;mode-btn&#x27;, &#123; active: uploadMode === &#x27;git&#x27; &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;uploadMode = &#x27;git&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 213.1 23.5 23.2 38.1 55.4 38.1 91v112.5c0.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Git仓库<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 文件上传区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;uploadMode === &#x27;file&#x27;&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">class</span>=<span class="string">&quot;upload-area&quot;</span> </span></span><br><span class="line"><span class="tag">             @<span class="attr">dragover.prevent</span> </span></span><br><span class="line"><span class="tag">             @<span class="attr">drop.prevent</span>=<span class="string">&quot;handleDrop&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;dragging&#x27;: isDragging &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>将文件拖拽到此处<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;upload-text&quot;</span>&gt;</span>或<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;upload-button&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>浏览文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> </span></span><br><span class="line"><span class="tag">                     @<span class="attr">change</span>=<span class="string">&quot;handleFileSelect&quot;</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">multiple</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">accept</span>=<span class="string">&quot;.pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.mp3,.wav,.mp4,.avi,.mov&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;upload-hint&quot;</span>&gt;</span>支持文档、图片、音频和视频格式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Git仓库上传区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;git-upload-area&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;git-form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>Git仓库地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;gitRepo&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;例如：https://github.com/username/repo.git&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;gitUsername&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;Git用户名&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>私人令牌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;password-input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">:type</span>=<span class="string">&quot;showToken ? &#x27;text&#x27; : &#x27;password&#x27;&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">v-model</span>=<span class="string">&quot;gitToken&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">placeholder</span>=<span class="string">&quot;输入您的私人访问令牌&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;toggle-pwd&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showToken = !showToken&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">v-if</span>=<span class="string">&quot;showToken&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3-7.7 16.2-7.7 35.2 0 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M508 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176z m0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">v-else</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M942.3 486.4l-0.1-0.1-0.1-0.1c-36.4-76.7-80-138.7-130.7-186L760.7 351c43.7 40.2 81.5 93.7 114.1 160.9C791.5 684.2 673.4 766 512 766c-51.3 0-98.3-8.3-141.2-25.1l-54.5 54.5C366.3 819.2 435.3 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.3zM878.3 154.2l-42.4-42.4c-3.1-3.1-8.2-3.1-11.3 0L707.8 228.5C649.4 200.2 584.2 186 512 186c-192.2 0-335.4 100.5-430.2 300.3v0.1c-7.7 16.2-7.7 35.2 0 51.5 36.4 76.7 80 138.7 130.7 186.1L111.8 824.5c-3.1 3.1-3.1 8.2 0 11.3l42.4 42.4c3.1 3.1 8.2 3.1 11.3 0l712.8-712.8c3.1-3 3.1-8.1 0-11.2zM398.9 537.4c-1.9-8.2-2.9-16.7-2.9-25.4 0-61.9 50.1-112 112-112 8.7 0 17.2 1 25.4 2.9L398.9 537.4z m184.5-184.5C560.5 342.1 535 336 508 336c-97.2 0-176 78.8-176 176 0 27 6.1 52.5 16.9 75.4L232.7 703.5c-43.7-40.2-81.5-93.7-114.1-160.9C202 369.8 320.1 258 512 258c51.3 0 98.3 8.3 141.2 25.1l-69.8 69.8z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;git-submit-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleGitUpload&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;isUploading&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; isUploading ? &#x27;克隆中...&#x27; : &#x27;克隆仓库&#x27; &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 右侧文件列表 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-section&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;has-files&#x27;: files.length &gt; 0 &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;submit-btn&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;files.length &gt; 0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpload&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;isUploading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; isUploading ? &#x27;上传中...&#x27; : &#x27;开始上传&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-list&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;files.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(file, index) in files&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-info&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-icon-name&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;file-name&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;file.name&quot;</span>&gt;</span>&#123;&#123; file.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;file-size&quot;</span>&gt;</span>&#123;&#123; formatFileSize(file.size) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-actions&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;file.uploading&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; width: file.progress + &#x27;%&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;progress-text&quot;</span>&gt;</span>&#123;&#123; file.progress &#125;&#125;%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;removeFile(index)&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M864 256H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tooltip&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;empty-state&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;48&quot;</span> <span class="attr">height</span>=<span class="string">&quot;48&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#EDE8DC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.8 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#EDE8DC&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>暂无文件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;empty-hint&quot;</span>&gt;</span>请先选择或拖拽文件到左侧上传区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DocumentUpload&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">files</span>: [],</span><br><span class="line">      <span class="attr">isDragging</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">isUploading</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">uploadMode</span>: <span class="string">&#x27;file&#x27;</span>, <span class="comment">// &#x27;file&#x27; 或 &#x27;git&#x27;</span></span><br><span class="line">      <span class="attr">gitRepo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">gitUsername</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">gitToken</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">showToken</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//处理文件拖放操作</span></span><br><span class="line">    <span class="title function_">handleDrop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isDragging</span> = <span class="literal">false</span><span class="comment">//将 isDragging 设置为 false，表示拖放操作结束</span></span><br><span class="line">      <span class="keyword">const</span> files = <span class="title class_">Array</span>.<span class="title function_">from</span>(e.<span class="property">dataTransfer</span>.<span class="property">files</span>)<span class="comment">//从拖放事件中获取文件列表，并将其转换为数组</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addFiles</span>(files)<span class="comment">//调用 addFiles 方法添加这些文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//处理文件选择操作（如通过文件选择对话框）</span></span><br><span class="line">    <span class="title function_">handleFileSelect</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> files = <span class="title class_">Array</span>.<span class="title function_">from</span>(e.<span class="property">target</span>.<span class="property">files</span>)<span class="comment">//从文件选择事件中获取文件列表，并将其转换为数组</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addFiles</span>(files)<span class="comment">//调用 addFiles 方法添加这些文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//添加文件到组件的文件列表中</span></span><br><span class="line">    <span class="title function_">addFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">      files.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;<span class="comment">//遍历传入的文件数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidFile</span>(file)) &#123;<span class="comment">//对每个文件，检查其是否是有效文件(通过 isValidFile 方法)</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">files</span>.<span class="title function_">push</span>(&#123;<span class="comment">//如果有效，将文件信息添加到组件的 files 数组中</span></span><br><span class="line">            file,<span class="comment">//文件对象</span></span><br><span class="line">            <span class="attr">name</span>: file.<span class="property">name</span>,<span class="comment">//名称</span></span><br><span class="line">            <span class="attr">size</span>: file.<span class="property">size</span>,<span class="comment">//大小</span></span><br><span class="line">            <span class="attr">progress</span>: <span class="number">0</span>,<span class="comment">//进度</span></span><br><span class="line">            <span class="attr">uploading</span>: <span class="literal">false</span><span class="comment">//上传状态</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//验证文件类型是否有效</span></span><br><span class="line">    <span class="title function_">isValidFile</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> validTypes = [<span class="comment">//定义一个有效的文件类型数组</span></span><br><span class="line">        <span class="string">&#x27;.pdf&#x27;</span>, <span class="string">&#x27;.doc&#x27;</span>, <span class="string">&#x27;.docx&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;.wav&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">      <span class="keyword">return</span> validTypes.<span class="title function_">some</span>(<span class="function"><span class="params">type</span> =&gt;</span> file.<span class="property">name</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">endsWith</span>(type))<span class="comment">///检查文件名是否以这些类型之一结尾</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//格式化文件大小为可读的格式</span></span><br><span class="line">    <span class="title function_">formatFileSize</span>(<span class="params">bytes</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bytes === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;0 B&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> k = <span class="number">1024</span></span><br><span class="line">      <span class="keyword">const</span> sizes = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;KB&#x27;</span>, <span class="string">&#x27;MB&#x27;</span>, <span class="string">&#x27;GB&#x27;</span>]</span><br><span class="line">      <span class="keyword">const</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">log</span>(bytes) / <span class="title class_">Math</span>.<span class="title function_">log</span>(k))</span><br><span class="line">      <span class="comment">//返回格式化后的字符串（保留两位小数）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">parseFloat</span>((bytes / <span class="title class_">Math</span>.<span class="title function_">pow</span>(k, i)).<span class="title function_">toFixed</span>(<span class="number">2</span>)) + <span class="string">&#x27; &#x27;</span> + sizes[i]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从文件列表中移除指定索引的文件</span></span><br><span class="line">    <span class="comment">//使用 splice 方法从 files 数组中删除指定索引的文件</span></span><br><span class="line">    <span class="title function_">removeFile</span>(<span class="params">index</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">files</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//处理文件上传操作</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleUpload</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isUploading</span>) <span class="keyword">return</span><span class="comment">//如果正在上传（isUploading 为 true），直接返回</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isUploading</span> = <span class="literal">true</span><span class="comment">//防止重复点击</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">files</span>) &#123;</span><br><span class="line">        file.<span class="property">uploading</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 模拟上传进度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i += <span class="number">10</span>) &#123;</span><br><span class="line">          file.<span class="property">progress</span> = i</span><br><span class="line">          <span class="comment">//从 0 到 100，每次增加 10，间隔 200ms</span></span><br><span class="line">          <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">200</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        file.<span class="property">uploading</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isUploading</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">files</span> = []</span><br><span class="line">      <span class="comment">//所有文件上传完成后，重置 isUploading 为 false，并清空文件列表</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//处理 Git 仓库克隆操作</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleGitUpload</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isUploading</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">gitRepo</span> || !<span class="variable language_">this</span>.<span class="property">gitUsername</span> || !<span class="variable language_">this</span>.<span class="property">gitToken</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;请填写完整的Git仓库信息&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isUploading</span> = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// 这里添加实际的Git克隆逻辑(实际逻辑未实现，仅通过 setTimeout 模拟延迟)</span></span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isUploading</span> = <span class="literal">false</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 清空表单</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">gitRepo</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">gitUsername</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">gitToken</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="selector-class">.document-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fafafa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">80vh</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.08</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-section</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分割线 */</span></span><br><span class="line"><span class="selector-class">.divider</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, transparent, <span class="number">#EDE8DC</span>, transparent);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right-section</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">16px</span> <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right-section</span><span class="selector-class">.has-files</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">80vh</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-title</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-title</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.empty-state</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.empty-state</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#EDE8DC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.empty-state</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.empty-hint</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-area</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#F7F4ED</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-area</span><span class="selector-class">.dragging</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">121</span>, <span class="number">16</span>, <span class="number">0.05</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-icon</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-button</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.8rem</span> <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff6600</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-hint</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.75rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f8f8f8</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-info</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-icon-name</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-icon-name</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-name</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1a1a1a</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-size</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-actions</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-text</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delete-btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delete-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff4444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delete-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.4rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.6rem</span> <span class="number">1.2rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff6600</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">  <span class="attribute">transform</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Material Icons */</span></span><br><span class="line"><span class="selector-class">.material-icons</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Material Icons&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: normal;</span><br><span class="line">  <span class="attribute">text-transform</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">word-wrap</span>: normal;</span><br><span class="line">  <span class="attribute">direction</span>: ltr;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加新的样式 */</span></span><br><span class="line"><span class="selector-class">.upload-mode-switch</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mode-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.8rem</span> <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mode-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mode-btn</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-upload-area</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-form</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.password-input</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toggle-pwd</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toggle-pwd</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-submit-btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-submit-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-submit-btn</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>c</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端js八股</title>
      <link href="/2025/03/18/first-eassay/"/>
      <url>/2025/03/18/first-eassay/</url>
      
        <content type="html"><![CDATA[<h1 id="js数据类型有哪些"><a href="#js数据类型有哪些" class="headerlink" title="js数据类型有哪些"></a>js数据类型有哪些</h1><p><code>JavaScript</code>共有八种数据类型，分别是 <strong>Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt</strong>。</p><p>其中 <strong>Symbol</strong> 和 <strong>BigInt</strong> 是ES6 中新增的数据类型：</p><ul><li><strong>Symbol</strong>代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li><li><strong>BigInt</strong> 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li></ul><p>这些数据可以分为<strong>原始数据类型</strong>和<strong>引用数据类型（复杂数据类型）</strong>，他们在内存中的存储方式不同。</p><ul><li><strong>堆：</strong> 存放<strong>引用数据类型</strong>，引用数据类型占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；<strong>引用数据类型在栈中存储了指针</strong>，该指针指向堆中该实体的起始地址，如<code>Object</code>、<code>Array</code>、<code>Function</code>。</li><li><strong>栈：</strong> 存放<strong>原始数据类型</strong>，栈中的简单数据段，占据空间小，属于被频繁使用的数据，如<code>String</code>、<code>Number</code>、<code>Null</code>、<code>Boolean</code>。</li></ul><h1 id="null和undefined区别"><a href="#null和undefined区别" class="headerlink" title="null和undefined区别"></a>null和undefined区别</h1><p><code>Undefined</code> 和 <code>Null</code> 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 <code>undefined</code> 和 <code>null</code>。</p><ul><li><strong>undefined</strong> 代表的含义是<strong>未定义</strong>，一般变量<strong>声明了但还没有定义</strong>的时候会返回 <code>undefined</code>，<code>typeof</code>为<code>undefined</code></li><li><strong>null</strong> 代表的含义是<strong>空对象</strong>，null主要用于赋值给一些可能会返回对象的变量，作为初始化，<code>typeof</code>为<code>object</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="instanceof-运算符的实现原理及实现"><a href="#instanceof-运算符的实现原理及实现" class="headerlink" title="instanceof 运算符的实现原理及实现"></a>instanceof 运算符的实现原理及实现</h1><p><code>instanceof</code>运算符适用于检测构造函数的<code>prototype</code>属性上是否出现在某个实例对象的原型链上</p><p><code>instanceof</code> 运算符的原理是基于原型链的查找。当使用 <code>obj instanceof Constructor</code> 进行判断时，<code>JavaScript</code> 引擎会从 <code>obj</code> 的原型链上查找 <code>Constructor.prototype</code> 是否存在，如果存在则返回 <code>true</code>，否则继续在原型链上查找。如果查找到原型链的顶端仍然没有找到，则返回 <code>false</code>。</p><p><code>instanceof</code>运算符只能用于检查某个对象是否是某个构造函数的实例，不能用于基本类型的检查，如<code>string</code>、<code>number</code>等</p><p>「<a href="https://juejin.cn/spost/7272737742307065914#heading-3">手写代码- 实现一个intanceof操作符</a>」</p><h1 id="typeof-和-instanceof-区别"><a href="#typeof-和-instanceof-区别" class="headerlink" title="typeof 和 instanceof 区别"></a>typeof 和 instanceof 区别</h1><p><code>typeof</code>与<code>instanceof</code> 都是判断数据类型的方法，区别如下：</p><ul><li><code>typeof</code>会返回一个<strong>运算数的基本类型</strong>，<code>instanceof </code>返回的是<strong>布尔值</strong></li><li><code>instanceof</code> 可以准确判断<strong>引用数据类型</strong>，但是不能正确判断<strong>原始数据类型</strong></li><li><code>typeof</code>虽然可以判断原始数据类型（<code>null</code> 除外），但是无法判断引用数据类型（<code>function</code> 除外）</li></ul><h2 id="那为什么typeof判断null为object？"><a href="#那为什么typeof判断null为object？" class="headerlink" title="那为什么typeof判断null为object？"></a>那为什么typeof判断null为object？</h2><p>这是 <code>JavaScript</code> 语言的一个历史遗留问题，在第一版<code>JS</code>代码中用32位比特来存储值，通过值的<code>1-3</code>位来识别类型，前三位为<code>000</code>表示对象类型。而<code>null</code>是一个空值，二进制表示都为0，所以前三位也就是<code>000</code>，所以导致 <code>typeof null </code>返回 <code>&quot;object&quot;</code></p><h1 id="为什么0-1-0-2-0-3，如何让其相等"><a href="#为什么0-1-0-2-0-3，如何让其相等" class="headerlink" title="为什么0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等"></a>为什么0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等</h1><p>因为浮点数运算的精度问题。在计算机运行过程中，需要将数据转化成二进制，然后再进行计算。 因为浮点数自身小数位数的限制而截断的二进制在转化为十进制，就变成0.30000000000000004，所以在计算时会产生误差。</p><p><strong>解决方案</strong></p><ul><li><p>将其先转换成整数，再相加之后转回小数。具体做法为先乘10相加后除以10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=(<span class="number">0.1</span>*<span class="number">10</span>+<span class="number">0.2</span>*<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x===<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用number对象的toFixed方法，只保留一位小数点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n1 + n2).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="判断数组的方式有哪些"><a href="#判断数组的方式有哪些" class="headerlink" title="判断数组的方式有哪些"></a>判断数组的方式有哪些</h1><ul><li><p>通过Object.prototype.toString.call()做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>) === <span class="string">&#x27;Array&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>通过原型链做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>通过ES6的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray()</span><br></pre></td></tr></table></figure><p>做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArrray</span>(obj);</span><br></pre></td></tr></table></figure></li><li><p>通过instanceof做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="对类数组对象的理解，如何转化为数组"><a href="#对类数组对象的理解，如何转化为数组" class="headerlink" title="对类数组对象的理解，如何转化为数组"></a>对类数组对象的理解，如何转化为数组</h1><p>类数组也叫<strong>伪数组</strong>，类数组和数组类似，但<strong>不能调用数组方法</strong>，常见的类数组有<strong>arguments</strong>、通过<code>document.getElements</code>获取到的内容等，这些类数组具有<code>length</code>属性。</p><p><strong>转换方法</strong></p><ul><li><p>通过 <code>call</code> 调用数组的 <code>slice</code> 方法来实现转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike)</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>call</code> 调用数组的 <code>splice</code> 方法来实现转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span>.<span class="title function_">call</span>(arrayLike, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>apply</code> 调用数组的 <code>concat</code> 方法来实现转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([], arrayLike)</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>Array.from</code> 方法来实现转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike)</span><br></pre></td></tr></table></figure></li></ul><p><strong>Array.propotype.slice.call()是什么</strong> 比如<code>Array.prototype.slice.call(arguments)</code>这句里，就是把 <code>arguments</code> 当做当前对象。</p><p>也就是说 要调用的是 <code>arguments</code> 的 <code>slice</code> 方法，而<code>typeof arguments=&quot;Object&quot;</code> 而不是 <code>Array</code></p><p>它没有<code>slice</code>这个方法，通过这么<code>Array.prototype.slice.call</code>调用，JS的内部机制应该是 把<code>arguments</code>对象转化为<code>Array</code></p><h1 id="数组有哪些原生方法？"><a href="#数组有哪些原生方法？" class="headerlink" title="数组有哪些原生方法？"></a>数组有哪些原生方法？</h1><ul><li>数组和字符串的转换方法：<code>toString()</code>、<code>toLocalString()</code>、<code>join() </code>其中<code> join()</code> 方法可以指定转换为字符串时的分隔符。</li><li>数组尾部操作的方法 <code>pop()</code> 和<code> push()</code>，<code>push</code> 方法可以传入多个参数。</li><li>数组首部操作的方法 <code>shift()</code> 和 <code>unshift()</code> 重排序的方法 <code>reverse()</code> 和<code> sort()</code>，<code>sort()</code> 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li><li>数组连接的方法<code> concat()</code> ，返回的是拼接好的数组，不影响原数组。</li><li>数组截取办法 <code>slice()</code>，用于截取数组中的一部分返回，不影响原数组。</li><li>数组插入方法 <code>splice()</code>，影响原数组查找特定项的索引的方法，<code>indexOf()</code> 和 <code>lastIndexOf()</code> 迭代方法 <code>every()</code>、<code>some()</code>、<code>filter()</code>、<code>map()</code> 和<code>forEach()</code>方法</li><li>数组归并方法 <code>reduce() </code>和 <code>reduceRight()</code> 方法</li><li><strong>改变原数组的方法</strong>：<code>fill()</code>、<code>pop()</code>、<code>push()</code>、<code>shift()</code>、<code>splice()</code>、<code>unshift()</code>、<code>reverse()</code>、<code>sort()</code>；</li><li><strong>不改变原数组的方法</strong>：<code>concat()</code>、<code>every()</code>、<code>filter()</code>、<code>find()</code>、<code>findIndex()</code>、<code>forEach()</code>、<code>indexOf()</code>、<code>join()</code>、<code>lastIndexOf()</code>、<code>map()</code>、<code>reduce()</code>、<code>reduceRight()</code>、<code>slice()</code>、<code>some()</code>。</li></ul><h1 id="substring和substr的区别"><a href="#substring和substr的区别" class="headerlink" title="substring和substr的区别"></a>substring和substr的区别</h1><p>它们都是字符串方法，用于截取字符串的一部分，主要区别在于参数不同</p><ul><li><code>substring(startIndex, endIndex)</code>： 接收两个参数，一个起始索引和结束索引，来指定字符串范围，如果省略第二个参数，则截取到字符串末尾。</li><li><code>substr(startIndex, length)</code>： 接收两个参数，并返回从 <code>startIndex</code> 开始，长度为 <code>length</code> 的子字符串。如果省略第二个参数，则截取到字符串末尾。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">5</span>)); <span class="comment">// 输出: &quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">7</span>, <span class="number">5</span>)); <span class="comment">// 输出: &quot;World&quot;</span></span><br></pre></td></tr></table></figure><h1 id="object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别"><a href="#object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别" class="headerlink" title="object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别"></a>object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别</h1><p><strong>都是浅拷贝</strong></p><ul><li><code>Object.assign()</code>方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。</li><li>扩展操作符<code>（…）</code>使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 <code>symbols</code> 属性。</li></ul><h1 id="new操作符的实现原理"><a href="#new操作符的实现原理" class="headerlink" title="new操作符的实现原理"></a>new操作符的实现原理</h1><p><code>new</code>操作符用来创建一个对象，并将该对象绑定到构造函数的<code>this</code>上。</p><p>new操作符的执行过程：</p><ol><li>创建一个空对象</li><li>设置原型，将构造函数的原型指向空对象的 <code>prototype</code> 属性。</li><li>将 <code>this</code> 指向这个对象，通过apply执行构造函数。</li><li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象</li></ol><p>「<a href="https://juejin.cn/spost/7272737742307065914#heading-2">手写代码-实现一个new操作符</a>」</p><h1 id="for…in和for…of的区别"><a href="#for…in和for…of的区别" class="headerlink" title="for…in和for…of的区别"></a>for…in和for…of的区别</h1><p><code>for...in</code>和<code>for...of</code>都是<code>JavaScript</code>中的循环语句，而<code>for…of </code>是ES6新增的遍历方式，允许遍历一个含有<code>iterator</code>接口的数据结构（数组、对象等）并且返回各项的值，和<code>ES3</code>中的<code>for…in</code>的区别如下</p><ul><li><code>for…of </code>遍历获取的是<strong>对象的键值</strong>，<code>for…in</code> 获取的是<strong>对象的键名</strong>；</li><li><code>for… in</code> 会遍历对象的<strong>整个原型链</strong>，性能非常差不推荐使用，而 <code>for … of</code> 只遍历当前对象不会遍历原型链；</li><li>对于数组的遍历，<code>for…in</code> 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，<code>for…of</code> 只返回数组的下标对应的属性值；</li></ul><p><strong>总结</strong>：<code>for...in</code> 循环主要是为了遍历对象而生，不适用于遍历数组；<code>for...of</code> 循环可以用来遍历数组、类数组对象，字符串、<code>Set</code>、<code>Map</code> 以及 <code>Generator</code> 对象。</p><h1 id="如何使用for…of遍历对象"><a href="#如何使用for…of遍历对象" class="headerlink" title="如何使用for…of遍历对象"></a>如何使用for…of遍历对象</h1><p><strong>为什么不能遍历对象</strong></p><p><code>for…of</code>是作为ES6新增的遍历方式，能被其遍历的数据内部都有一个<strong>遍历器iterator接口</strong>，而数组、字符串、<code>Map</code>、<code>Set</code>内部已经实现，普通对象内部没有，所以在遍历的时候会报错。想要遍历对象，可以给对象添加一个<code>Symbol.iterator</code>属性，并指向一个迭代器即可</p><p>在迭代器里面，通过<code>Object.keys</code>获取对象所有的<code>key</code>，然后遍历返回<code>key 、value</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">js 代码解读复制代码<span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>*()&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">of</span> keys)&#123;</span><br><span class="line">        <span class="keyword">yield</span> [k,obj[k]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [k,v] <span class="keyword">of</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k,v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对AJAX的理解，实现一个AJAX请求"><a href="#对AJAX的理解，实现一个AJAX请求" class="headerlink" title="对AJAX的理解，实现一个AJAX请求"></a>对AJAX的理解，实现一个AJAX请求</h1><p><code>AJAX</code>是 Asynchronous JavaScript and XML 的缩写，<strong>指的是通过 JavaScript 的 异步通信</strong>，从服务器获取 <code>XML</code> 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。 创建<code>AJAX</code>请求的步骤：</p><ul><li>创建一个 <code>XMLHttpRequest</code> 对象。</li><li>在这个对象上使用 <code>open</code> 方法创建一个 <code>HTTP</code> 请求，<code>open</code> 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li><li>在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 <code>setRequestHeader</code> 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 <code>XMLHttpRequest</code> 对象一共有 5 个状态，当它的状态变化时会触发<code>onreadystatechange</code> 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 <code>readyState</code> 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 <code>response</code> 中的数据来对页面进行更新了。</li><li>当对象的属性和监听函数设置完成后，最后调用 <code>send</code> 方法来向服务器发起请求，可以传入参数作为发送的数据体。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SERVER_URL</span> = <span class="string">&quot;/server&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 创建 Http 请求</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 设置状态监听函数</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 当请求成功时</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 设置请求失败时的监听函数</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 设置请求头信息</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"><span class="comment">// 发送 Http 请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h1 id="ajax、axios、fetch的区别"><a href="#ajax、axios、fetch的区别" class="headerlink" title="ajax、axios、fetch的区别"></a>ajax、axios、fetch的区别</h1><p><strong>ajax</strong></p><ul><li>基于原生<code>XHR</code>开发，<code>XHR</code>本身架构不清晰。</li><li>针对<strong>MVC</strong>编程，不符合现在前端MVVM的浪潮。</li><li>多个请求之间如果有先后关系的话，就会出现回调地狱</li><li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li></ul><p><strong>axios</strong></p><ul><li>支持<code>Promise</code>API</li><li>从浏览器中创建<code>XMLHttpRequest</code></li><li>从 <code>node.js</code> 创建 <code>http</code> 请求</li><li>支持请求拦截和响应拦截</li><li>自动转换<code>JSON</code>数据</li><li>客服端支持防止<code>CSRF/XSRF</code></li></ul><p><strong>fetch</strong></p><ul><li>浏览器原生实现的请求方式，ajax的替代品</li><li>基于标准 <code>Promise</code> 实现，支持<code>async/await</code></li><li><code>fetchtch</code>只对网络请求报错，对400，500都当做成功的请求，需要封装去处理</li><li>默认不会带<code>cookie</code>，需要添加配置项</li><li><code>fetch</code>没有办法原生监测请求的进度，而<code>XHR</code>可以。</li></ul><h1 id="forEach和map方法有什么区别"><a href="#forEach和map方法有什么区别" class="headerlink" title="forEach和map方法有什么区别"></a>forEach和map方法有什么区别</h1><p>两个方法都是用来遍历循环数组，区别如下：</p><ul><li><code>forEach()</code>对数据的操作会改变原数组，该方法没有返回值；</li><li><code>map()</code>方法不会改变原数组的值，<strong>返回一个新数组</strong>，新数组中的值为原数组调用函数处理之后的值；</li></ul><h1 id="什么是尾调用，使用尾调用有什么好处？"><a href="#什么是尾调用，使用尾调用有什么好处？" class="headerlink" title="什么是尾调用，使用尾调用有什么好处？"></a>什么是尾调用，使用尾调用有什么好处？</h1><p>尾调用就是在函数的<strong>最后一步调用函数</strong>，在一个函数里调用另外一个函数会<strong>保留当前执行的上下文</strong>，如果在函数尾部调用，因为已经是函数最后一步，所以这时可以不用保留当前的执行上下文，<strong>从而节省内存</strong>。但是ES6的尾调用只能在<strong>严格模式下开启</strong>，正常模式是无效的。</p><h1 id="你用过哪些设计模式"><a href="#你用过哪些设计模式" class="headerlink" title="你用过哪些设计模式"></a>你用过哪些设计模式</h1><ul><li><strong>单例模式</strong>：保证类只有一个实例，并提供一个访问它的全局访问点。</li><li><strong>工厂模式</strong>：用来创建对象，根据不同的参数返回不同的对象实例。</li><li><strong>策略模式</strong>：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</li><li><strong>装饰器模式</strong>：在不改变对象原型的基础上，对其进行包装扩展。</li><li><strong>观察者模式</strong>：定义了对象间一种一对多关系，当目标对象状态发生改变时，所有依赖它对对象都会得到通知。</li><li><strong>发布订阅模式</strong>： 基于一个主题&#x2F;事件通道，希望接收通知的对象通过自定义事件订阅主题，被激活事件的对象（通过发布主题事件的方式被通知)。</li></ul><h1 id="如何实现深浅拷贝"><a href="#如何实现深浅拷贝" class="headerlink" title="如何实现深浅拷贝"></a>如何实现深浅拷贝</h1><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li><pre><code>JSON.stringify()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">将js对象序列化，再通过</span><br><span class="line"></span><br></pre></td></tr></table></figure>JSON.parse<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  反序列</span><br><span class="line"></span><br><span class="line">  - 如果对象中有函数、`undefined`、`symbol`时，都会丢失</span><br><span class="line">  - 如果有正则表达式、`Error`对象等，会得到空对象</span><br><span class="line"></span><br><span class="line">「[手写代码-手写深拷贝](https://juejin.cn/spost/7272737742307065914#heading-8)」</span><br><span class="line"></span><br><span class="line">### 浅拷贝</span><br><span class="line"></span><br><span class="line">- `Objec.assign()` 拷贝对象</span><br><span class="line">- 扩展运算符</span><br><span class="line"></span><br><span class="line">「[手写代码-手写浅拷贝](https://juejin.cn/spost/7272737742307065914#heading-7)」</span><br><span class="line"></span><br><span class="line"># ES6</span><br><span class="line"></span><br><span class="line">## let、const、var的区别</span><br><span class="line"></span><br><span class="line">- 块级作用域：</span><br><span class="line"></span><br><span class="line">  块作用域由 &#123; &#125;包裹，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：</span><br><span class="line"></span><br><span class="line">  - 内层变量可能覆盖外层变量</span><br><span class="line">  - 用来计数的循环变量泄露为全局变量</span><br><span class="line"></span><br><span class="line">- **变量提升：** `var`存在变量提升，`let`和`const`不存在变量提升，即在变量只能在声明之后使用，否在会报错。</span><br><span class="line"></span><br><span class="line">- **给全局添加属性：** 浏览器的全局对象是`window`，`Node`的全局对象是`global`。`var`声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是`let`和`const`不会。</span><br><span class="line"></span><br><span class="line">- **重复声明：** `var`声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。`const`和`let`不允许重复声明变量。</span><br><span class="line"></span><br><span class="line">- **初始值设置：** 在变量声明时，`var `和`let`可以不用设置初始值。而`const`声明变量必须设置初始值。</span><br><span class="line"></span><br><span class="line">- **暂时性死区**：在使用`let`、`const`命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用`var`声明的变量不存在暂时性死区。</span><br><span class="line"></span><br><span class="line">## 箭头函数与普通函数的区别</span><br><span class="line"></span><br><span class="line">- 箭头函数是**匿名函数**，不能作为构造函数，使用`new`关键字。</span><br><span class="line">- 箭头函数没有`arguments`</span><br><span class="line">- 箭头函数没有自己的`this`，会获取所在的上下文作为自己的`this`</span><br><span class="line">- `call()`、`applay()`、`bind()`方法不能改变箭头函数中的`this`指向</span><br><span class="line">- 箭头函数没有`prototype`</span><br><span class="line">- 箭头函数不能用作`Generator`函数，不能使用`yeild`关键字</span><br><span class="line"></span><br><span class="line">## Set、Map的区别</span><br><span class="line"></span><br><span class="line">**Set**</span><br><span class="line"></span><br><span class="line">- 创建：`  new Set([1, 1, 2, 3, 3, 4, 2])`</span><br><span class="line">- `add(value)`：添加某个值，返回Set结构本身。</span><br><span class="line">- `delete(value)`：删除某个值，返回一个布尔值，表示删除是否成功。</span><br><span class="line">- `has(value)`：返回一个布尔值，表示该值是否为Set的成员。</span><br><span class="line">- `clear()`：清除所有成员，没有返回值。</span><br><span class="line"></span><br><span class="line">**Map**</span><br><span class="line"></span><br><span class="line">- `set(key, val):` 向`Map`中添加新元素</span><br><span class="line">- `get(key):` 通过键值查找特定的数值并返回</span><br><span class="line">- `has(key): `判断`Map`对象中是否有`Key`所对应的值，有返回`true`,否则返回`false`</span><br><span class="line">- `delete(key): `通过键值从`Map`中移除对应的数据</span><br><span class="line">- `clear():` 将这个`Map`中的所有元素删除</span><br><span class="line"></span><br><span class="line">#### 区别</span><br><span class="line"></span><br><span class="line">- `Map`是一种键值对的集合，和对象不同的是，键可以是任意值</span><br><span class="line">- `Map`可以遍历，可以和各种数据格式转换</span><br><span class="line">- `Set`是类似数组的一种的数据结构，类似数组的一种集合，但在Set中没有重复的值</span><br><span class="line"></span><br><span class="line">## map和Object的区别</span><br><span class="line"></span><br><span class="line">`map`和`Object`都是用键值对来存储数据，区别如下：</span><br><span class="line"></span><br><span class="line">- **键的类型**：`Map` 的键可以是**任意数据类型**（包括对象、函数、`NaN `等），而 `Object` 的键**只能是字符串**或者 `Symbol` 类型。</span><br><span class="line">- **键值对的顺序**：`Map`中的键值对是按照插入的顺序存储的，而对象中的键值对则没有顺序。</span><br><span class="line">- **键值对的遍例**：`Map` 的键值对可以使用 `for...of` 进行遍历，而 `Object` 的键值对需要手动遍历键值对。</span><br><span class="line">- **继承关系**：`Map `没有继承关系，而 `Object` 是所有对象的基类。</span><br><span class="line"></span><br><span class="line">## map和weakMap的区别</span><br><span class="line"></span><br><span class="line">它们是 `JavaScript` 中的两种不同的键值对集合，主要区别如下：</span><br><span class="line"></span><br><span class="line">1. `map`的键可以是任意类型，`weakMap`键只能是对象类型。</span><br><span class="line">2. `map` 使用常规的引用来管理键和值之间的关系，因此即使键不再使用，`map` 仍然会保留该键的内存。`weakMap` 使用弱引用来管理键和值之间的关系，因此如果键不再有其他引用，垃圾回收机制可以自动回收键值对。</span><br><span class="line"></span><br><span class="line">## 说说你对Promise的理解</span><br><span class="line"></span><br><span class="line">`Promise`是异步编程的一种解决方案，将异步操作以同步操作的流程表达出来，避免了地狱回调。</span><br><span class="line"></span><br><span class="line">`Promise`的实例有三个状态:</span><br><span class="line"></span><br><span class="line">- `Pending`（初始状态）</span><br><span class="line">- `Fulfilled`（成功状态）</span><br><span class="line">- `Rejected`（失败状态）</span><br><span class="line"></span><br><span class="line">`Promise`的实例有两个过程：</span><br><span class="line"></span><br><span class="line">- `pending` -&gt; `fulfilled` : **Resolved（已完成）**</span><br><span class="line"></span><br><span class="line">- `pending` -&gt; `rejected`：**Rejected（已拒绝）**</span><br><span class="line"></span><br><span class="line">  注意：一旦从进行状态变成为其他状态就永远不能更改状态了，其过程是不可逆的。</span><br><span class="line"></span><br><span class="line">`Promise`构造函数接收一个带有`resolve`和`reject`参数的回调函数。</span><br><span class="line"></span><br><span class="line">- `resolve`的作用是将`Promise`状态从`pending`变为`fulfilled`，在异步操作成功时调用，并将异步结果返回，作为参数传递出去</span><br><span class="line">- `reject`的作用是将`Promise`状态从`pending`变为`rejected`，在异步操作失败后，将异步操作错误的结果，作为参数传递出去</span><br><span class="line"></span><br><span class="line">`Promise`的缺点：</span><br><span class="line"></span><br><span class="line">- 无法取消 `Promise`，一旦新建它就会立即执行，无法中途取消。</span><br><span class="line">- 如果不设置回调函数，`Promise`内部抛出的错误，不会反应到外部。</span><br><span class="line">- 当处于`pending`状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</span><br><span class="line"></span><br><span class="line">## Promise方法</span><br><span class="line"></span><br><span class="line">- `promise.then()`  对应`resolve`成功的处理</span><br><span class="line">- `promise.catch()`对应`reject`失败的处理</span><br><span class="line">- `promise.all()`可以完成并行任务，将多个`Promise`实例数组，包装成一个新的`Promise`实例，返回的实例就是普通的`Promise`。有一个失败，代表该`Primise`失败。当所有的子`Promise`完成，返回值时全部值的数组</span><br><span class="line">- `promise.race()`类似`promise.all()`，区别在于有任意一个完成就算完成</span><br><span class="line">- `promise.allSettled()` 返回一个在所有给定的 `promise` 都已经 `fulfilled` 或 `rejected` 后的 `promise` ，并带有一个对象数组，每个对象表示对应的`promise` 结果。</span><br><span class="line"></span><br><span class="line">## promise.all 和 promise.allsettled 区别</span><br><span class="line"></span><br><span class="line">`Promise.all()` 和 `Promise.allSettled()` 都是用来处理多个 `Promise` 实例的方法，它们的区别在于以下几点：</span><br><span class="line"></span><br><span class="line">- **all:** 只有当所有`Promise`实例都`resolve`后，才会`resolve`返回一个由所有`Promise`返回值组成的数组。如果有一个`Promise`实例`reject`，就会立即被拒绝，并返回拒绝原因。`all`是团队的成功才算，如果有一个人失败就算失败。</span><br><span class="line">- **allSettled：** 等所有`Promise`执行完毕后，不管成功或失败， 都会吧每个`Promise`状态信息放到一个数组里面返回。</span><br><span class="line"></span><br><span class="line">## 对async/await 的理解</span><br><span class="line"></span><br></pre></td></tr></table></figure>async/await`其实**是Generator 的语法糖**，它能实现的效果都能用`then`链来实现，它是为优化`then`链而开发出来的。通过`async`关键字声明一个异步函数， `await `用于等待一个异步方法执行完成，**并且会阻塞执行**。 `async` 函数**返回的是一个 Promise 对象**，如果在函数中 `return` 一个变量，`async` 会把这个直接量通过 `Promise.resolve()` 封装成 `Promise` 对象。如果没有返回值，返回 `Promise.resolve(undefined)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## async/await对比Promise的优势</span><br><span class="line"></span><br><span class="line">- 代码可读性高，`Promise`虽然摆脱了回掉地狱，但自身的链式调用会影响可读性。</span><br><span class="line">- 相对`Promise`更优雅，传值更方便。</span><br><span class="line">- 对错误处理友好，可以通过`try/catch`捕获，`Promise`的错误捕获⾮常冗余</span><br><span class="line"></span><br><span class="line">## 谈谈你对ES6的理解</span><br><span class="line"></span><br><span class="line">- 解构赋值</span><br><span class="line">- 扩展运算符</span><br><span class="line">- 箭头函数</span><br><span class="line">- 模版字符串</span><br><span class="line">- `Set`、`Map`集合</span><br><span class="line">- 新增`class`类</span><br><span class="line">- `Proxy`</span><br><span class="line">- `Promise`</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">## ES6模块和CommonJS模块有什么区别</span><br><span class="line"></span><br><span class="line">- 语法不同：</span><br><span class="line"></span><br><span class="line">  ES6 模块使用 import 和 export关键字来导入和导出模块，而 CommonJS 模块使用 require和 module.exports或 exports来导入和导出模块。</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  // ES6 模块</span><br><span class="line">  import &#123; foo &#125; from &#x27;./module&#x27;;</span><br><span class="line">  export const bar = &#x27;bar&#x27;;</span><br><span class="line">  </span><br><span class="line">  // CommonJS 模块</span><br><span class="line">  const foo = require(&#x27;./commonjs&#x27;);</span><br><span class="line">  exports.bar = &#x27;bar&#x27;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>异步加载: <code>ES6</code> 模块支持动态导入（dynamic import），<strong>可以异步加载模块</strong>。这使得在需要时按需加载模块成为可能，从而提高了性能。<code>CommonJS</code> 模块在设计时没有考虑异步加载的需求，通常在模块的顶部进行同步加载。</p></li></ul><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><ul><li><strong>prototype</strong> : js通过构造函数来创建对象，每个构造函数内部都会一个原型<code>prototype</code>属性，它指向另外一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。</li><li><em><strong>*proto*</strong></em>: 当使用构造函数创建一个实例对象后，可以通过<code>__proto__</code>访问到<code>prototype</code>属性。</li><li><strong>constructor</strong>：实例对象通过这个属性可以访问到构造函数</li></ul><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>每个实例对象都有一个<code>__proto__</code>属性指向它的构造函数的原型对象，而这个原型对象也会有自己的原型对象，一层一层向上，直到顶级原型对象<code>null</code>，这样就形成了一个原型链。</p><p>当访问对象的一个属性或方法时，当对象身上不存在该属性方法时，就会沿着原型链向上查找，直到查找到该属性方法位置。</p><p>原型链的顶层原型是<code>Object.prototype</code>，如果这里没有就只指向<code>null</code></p><h1 id="实现寄生组合继承"><a href="#实现寄生组合继承" class="headerlink" title="实现寄生组合继承"></a>实现寄生组合继承</h1><p>利用<code>Object.create()</code>方法，将子类的原型指向父类，实现继承父类的方法属性，修改时也不影响父类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="comment">// 执行父类构造函数</span></span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将子类的原型  指向父类</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 此时的狗早函数为父类的 需要指回自己</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">child1.<span class="title function_">sayName</span>(); <span class="comment">// &#x27;Tom&#x27;</span></span><br><span class="line">child1.<span class="title function_">sayAge</span>(); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h1 id="对闭包的理解已经它的使用场景"><a href="#对闭包的理解已经它的使用场景" class="headerlink" title="对闭包的理解已经它的使用场景"></a>对闭包的理解已经它的使用场景</h1><p><strong>闭包是指有权访问另一个函数作用域中变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p><p><strong>闭包优点：</strong></p><ul><li>创建全局私有变量，避免变量全局污染</li><li>可以实现封装、缓存等</li></ul><p><strong>闭包缺点：</strong></p><ul><li>创建的变量不能被回收，容易消耗内存，使用不当会导致内存溢出<ul><li><strong>解决：</strong> 在不需要使用的时候把变量设为<code>null</code></li></ul></li></ul><p><strong>使用场景：</strong></p><ul><li>用于创建全局私有变量</li><li>封装类和模块</li><li>实现函数柯里化</li></ul><h2 id="闭包一定会造成内存泄漏吗？"><a href="#闭包一定会造成内存泄漏吗？" class="headerlink" title="闭包一定会造成内存泄漏吗？"></a>闭包一定会造成内存泄漏吗？</h2><p>闭包并不一定会造成内存泄漏，如果在使用闭包后变量没有及时销毁，可能会造成内存泄漏的风险。只要合理的使用闭包，就不会造成内存泄漏。</p><h1 id="对作用域、作用域链的理解"><a href="#对作用域、作用域链的理解" class="headerlink" title="对作用域、作用域链的理解"></a>对作用域、作用域链的理解</h1><p><strong>作用域</strong>是一个变量或函数的可访问范围，作用域控制着变量或函数的可见性和生命周期。</p><ol><li><strong>全局作用域</strong>：可以全局访问<ul><li>最外层函数和最外层定义的变量拥有全局作用域</li><li><code>window</code>上的对象属性方法拥有全局作用域</li><li>为定义直接复制的变量自动申明拥有全局作用域</li><li>过多的全局作用域变量会导致变量全局污染，命名冲突</li></ul></li><li><strong>函数作用域</strong>：只能在函数中访问使用哦<ul><li>在函数中定义的变量，都只能在内部使用，外部无法访问</li><li>内层作用域可以访问外层，外层不能访问内存作用域</li></ul></li><li>ES6中的<strong>块级作用域</strong>：只在代码块中访问使用<ul><li>使用ES6中新增的<code>let</code>、<code>const</code>什么的变量，具备块级作用域，块级作用域可以在函数中创建（由{}包裹的代码都是块级作用域）</li><li><code>let</code>、<code>const</code>申明的变量不会变量提升，<code>const</code>也不能重复申明</li><li>块级作用域主要用来解决由变量提升导致的变量覆盖问题</li></ul></li></ol><p><strong>作用域链：</strong> 变量在指定的作用域中没有找到，会依次向一层作用域进行查找，直到全局作用域。这个查找的过程被称为作用域链。</p><h1 id="call-、bind（）、-apply-的区别？"><a href="#call-、bind（）、-apply-的区别？" class="headerlink" title="call() 、bind（）、 apply() 的区别？"></a>call() 、bind（）、 apply() 的区别？</h1><ul><li>都可以用作改变<code>this</code>指向</li><li><code>call</code>和<code>apply</code>的区别在于传参，<code>call</code>、<code>bind</code>都是传入对象。<code>apply</code>传入一个数组。</li><li><code>call</code>、<code>apply</code>改变<code>this</code>指向后会立即执行函数，<code>bind</code>在改变<code>this</code>后返回一个函数，不会立即执行函数，需要手动调用。</li></ul><p>「<a href="https://juejin.cn/spost/7272737742307065914#heading-9">手写代码-call、bind、apply</a>」</p><h3 id="连续多个-bind，最后this指向是什么？"><a href="#连续多个-bind，最后this指向是什么？" class="headerlink" title="连续多个 bind，最后this指向是什么？"></a>连续多个 bind，最后this指向是什么？</h3><p>在 <code>JavaScript</code> 中，连续多次调用 <code>bind</code> 方法，最终函数的 <code>this</code> 上下文是由<strong>第一次调用 bind 方法</strong>的参数决定的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&#x27;obj3&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn1 = getName.<span class="title function_">bind</span>(obj1).<span class="title function_">bind</span>(obj2).<span class="title function_">bind</span>(obj3);</span><br><span class="line"><span class="title function_">fn1</span>(); <span class="comment">// 输出 &quot;obj1&quot;</span></span><br></pre></td></tr></table></figure><h1 id="浏览器的垃圾回收机制"><a href="#浏览器的垃圾回收机制" class="headerlink" title="浏览器的垃圾回收机制"></a>浏览器的垃圾回收机制</h1><p><strong>垃圾回收</strong>：<code>JavaScript</code>代码运行时，需要分配内存空间来储存变量和值。当变量不再参与运行时，就需要系统收回被占用的内存空间。如果不及时清理，会造成系统卡顿、内存溢出，这就是垃圾回收。</p><p>在 V8 中，会把堆分为<strong>新生代和老生代</strong>两个区域，新生代中存放的是生存时间短的对象，老生代中存放生存时间久的对象：</p><ul><li><p>Major  GC(主垃圾回收器)</p><p>：主要负责老生代垃圾的回收</p><ul><li>内存占用比较小</li></ul></li><li><p>Minor GC(副垃圾回收器)</p><p>：主要负责新生代垃圾的回收</p><ul><li>对象的占用空间大  对象存活时间长 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b90d49a71ff04b1b926a00e4acc3cb8d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=801&h=540&s=47668&e=png&b=fefefe" alt="img"></li></ul></li></ul><h3 id="新生代（副垃圾回收器）"><a href="#新生代（副垃圾回收器）" class="headerlink" title="新生代（副垃圾回收器）"></a>新生代（副垃圾回收器）</h3><p>副垃圾回收器主要负责新⽣代的垃圾回收。大多数的对象最开始都会被分配在新生代，该存储空间相对较小，分为两个空间：<strong>from 空间</strong>（对象区）和 <strong>to 空间</strong>（空闲区）。</p><ul><li>新增变量会放到<code>To</code>空间，当空间满后需要执行一次垃圾清理操作</li><li>对垃圾数据进行标记，标记完成后<strong>将存活的数据复制到From空间中</strong>，有序排列</li><li>交换两个空间，原来的<code>To</code>变成<code>From</code>，旧的<code>From</code>变成<code>To</code></li></ul><h3 id="老生代（主垃圾回收器）"><a href="#老生代（主垃圾回收器）" class="headerlink" title="老生代（主垃圾回收器）"></a>老生代（主垃圾回收器）</h3><p>主垃圾回收器主要负责⽼⽣代中的垃圾回收。存储一些占用空间大、存活时间长的数据，采用<strong>标记清除</strong>算法进行垃圾回收。</p><p>主要分为<strong>标记</strong>、<strong>清除</strong>两个阶段。</p><ul><li><strong>标记</strong>：将所有的变量打上标记0，然后从根节点(<code>window</code>对象、DOM树等)开始遍历，把存活的变量标记为1</li><li><strong>清除</strong>：清除标记为0的对象，释放内存。清除后将1的变量改为0，方便下一轮回收。</li></ul><p>对⼀块内存多次执⾏标记清除算法后，会<strong>产⽣⼤量不连续的内存碎⽚</strong>。⽽碎⽚过多会导致⼤对象⽆法分配到⾜够的连续内存，于是⼜引⼊了另外⼀种算法——<strong>标记整理</strong>。</p><p><strong>标记整理</strong>的标记过程仍然与标记清除算法⾥的是⼀样的，先标记可回收对象，但后续步骤不是直接对可回收对象进⾏清理，⽽是让所有<strong>存活的对象都向⼀端移动</strong>，然后直接清理掉这⼀端之外的内存。</p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>一个对象被引用一次，引用数就+1，反之就-1。当引用为0，就会出发垃圾回收。</p><p>这种方式会产生一个问题，在循环引用时，引用数永远不会为0，无法回收。</p><h2 id="哪些情况会导致内存泄漏"><a href="#哪些情况会导致内存泄漏" class="headerlink" title="哪些情况会导致内存泄漏"></a>哪些情况会导致内存泄漏</h2><ul><li>意外的全局变量：由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</li><li>被遗忘的计时器或回调函数：设置了 <code>setInterval</code> 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li><li>脱离 <code>DOM</code> 的引用：获取一个 <code>DOM</code> 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</li><li>闭包：不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li></ul><h1 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h1><h2 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 instanceof 方法</span></span><br><span class="line"><span class="comment"> * 用法：instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、通过 Object.getPrototypeOf 获取 obj 的原型</span></span><br><span class="line"><span class="comment"> *  2、循环判断 objProtoType 是否和 constructor 的原型相等</span></span><br><span class="line"><span class="comment"> *    2.1、如果相等就返回 true</span></span><br><span class="line"><span class="comment"> *    2.2、如果不相等 就重新赋值一下 obj 的原型 进入下一次循环</span></span><br><span class="line"><span class="comment"> *  3、判断是 objProtoType 是否为空 如果为空就说明不存在 返回 false</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 需要判断的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">constructor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">obj, type</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> objPrototype = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!objPrototype) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (objPrototype === type.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    objPrototype = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(objPrototype)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写new操作符"><a href="#手写new操作符" class="headerlink" title="手写new操作符"></a>手写new操作符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 new 操作符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 用法：创建一个实例化对象</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1、判断传入的 fn 是否为 function</span></span><br><span class="line"><span class="comment"> * 2、创建一个空对象</span></span><br><span class="line"><span class="comment"> * 3、将这个空对象的原型设置为构造函数的 prototype 属性。</span></span><br><span class="line"><span class="comment"> * 4、使用 apply 执行构造函数 并传入参数 arguments 获取函数的返回值</span></span><br><span class="line"><span class="comment"> * 5、判断这个返回值 如果返回的是 Object || Function 类型 就返回该对象 否则返回创建的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 构造函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">     <span class="comment">// 判断 fn 是否为函数</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;fn must be a function&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个空的对象</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将这个空对象的原型设置为构造函数的 prototype 属性。</span></span><br><span class="line">  obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 apply 执行构造函数 传入参数 获取返回值</span></span><br><span class="line">  <span class="keyword">let</span> result = fn.<span class="title function_">apply</span>(obj, args)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断这个返回值 如果返回的是 Object || Function 类型 就返回该对象 否则返回创建的对象</span></span><br><span class="line">  <span class="keyword">const</span> flag = result &amp;&amp; (<span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> result === <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写深浅拷贝"><a href="#手写深浅拷贝" class="headerlink" title="手写深浅拷贝"></a>手写深浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 浅拷贝</span></span><br><span class="line"><span class="comment"> * 用法：浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断是否为对象</span></span><br><span class="line"><span class="comment"> *  2、根据obj类型创建一个新的对象</span></span><br><span class="line"><span class="comment"> *  3、for in 遍历对象 拿到 key</span></span><br><span class="line"><span class="comment"> *  4、判断 key 是否在 obj 中</span></span><br><span class="line"><span class="comment"> *  5、将 key 作为新对象的key 并赋值 value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">obj</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 只拷贝对象</span></span><br><span class="line">  <span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新的对象</span></span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环遍历 obj 将 key 作为 newObj 的 key 并赋值value</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 判断 key 是否在 obj 中</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 深拷贝</span></span><br><span class="line"><span class="comment"> * 用法：拷贝一个对象的属性值 如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断是否为对象</span></span><br><span class="line"><span class="comment"> *  2、判段对象是否在 map 中 如果存在就不需要操作</span></span><br><span class="line"><span class="comment"> *  3、将 obj 放入 map 中 避免重复引用</span></span><br><span class="line"><span class="comment"> *  4、for in 遍历对象 拿到 key 判断 key 是否在 obj 中</span></span><br><span class="line"><span class="comment"> *  5、value 如果为对象 就递归拷贝 否则就赋值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">obj</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; [map=new Map()]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj, map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断 obj 是否在 map 中存在 如果存在就不需要递归调用 直接返回数据</span></span><br><span class="line">  <span class="keyword">if</span> (map.<span class="title function_">get</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> map.<span class="title function_">get</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 放入 map 中 记录当前对象 避免重复拷贝 循环引用</span></span><br><span class="line">  map.<span class="title function_">set</span>(obj, newObj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 如果 value 还是一个对象 递归获取 否则就赋值</span></span><br><span class="line">      newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">deepCopy</span>(obj[key], map) : obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写call"><a href="#手写call" class="headerlink" title="手写call"></a>手写call</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 call</span></span><br><span class="line"><span class="comment"> * 用法：call 方法用于调用一个函数，并指定函数内部 this 的指向，传入一个对象</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断 this 是否指向一个函数  只有函数才可以执行</span></span><br><span class="line"><span class="comment"> *  2、获取传入的 context 上下文 也就是我们要指向的 如果不存在就指向 window</span></span><br><span class="line"><span class="comment"> *  3、将当前 this 也就是外部需要执行的函数 绑定到 context 上 然后执行获取 result 传入 ...args 确保参数位置正确</span></span><br><span class="line"><span class="comment"> *  4、删除 context 对象的 fn 属性 并将 result 返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存this</span></span><br><span class="line"></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写apply"><a href="#手写apply" class="headerlink" title="手写apply"></a>手写apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 apply</span></span><br><span class="line"><span class="comment"> * 用法：apply 方法用于调用一个函数，并指定函数内部 this 的指向，传入一个数组</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断 this 是否指向一个函数  只有函数才可以执行</span></span><br><span class="line"><span class="comment"> *  2、获取传入的 context 上下文 也就是我们要指向的 如果不存在就指向 window</span></span><br><span class="line"><span class="comment"> *  3、将当前 this 也就是外部需要执行的函数 绑定到 context 上的一个 fn 属性上</span></span><br><span class="line"><span class="comment"> *  4、执行 fn 函数 判断 args 是否有 如果没有参数就直接执行 如果有参数 将参数展开传入 fn</span></span><br><span class="line"><span class="comment"> *  5、删除 context 对象的 fn 属性 并将 result 返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context, args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 和 call 一样 只不过传入的参数只有一个 类型为数组 在执行 fn 的时候将参数展开</span></span><br><span class="line">  context = context || <span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = args ? context.<span class="title function_">fn</span>(...args) : context.<span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写bind"><a href="#手写bind" class="headerlink" title="手写bind"></a>手写bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 bind</span></span><br><span class="line"><span class="comment"> * 用法：bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断 this 是否指向一个函数  只有函数才可以执行</span></span><br><span class="line"><span class="comment"> *  2、获取传入的 context 上下文 也就是我们要指向的 如果不存在就指向 window</span></span><br><span class="line"><span class="comment"> *  3、将当前 this 也就是外部需要执行的函数 绑定到 context 上的一个 fn 属性上</span></span><br><span class="line"><span class="comment"> *  4、返回一个函数 供外部调用 执行函数后传入新的参数</span></span><br><span class="line"><span class="comment"> *  5、执行在闭包内缓存的 fn 将两次参数一起传入 删除 fn 返回 result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context, ...args1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 和 call apply 不一样的是 bind 返回一个函数 需要在外部执行  参数为多个对象 且返回的对象里也会有参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args1, ...args2)</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 前端 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/17/hello-world/"/>
      <url>/2025/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
