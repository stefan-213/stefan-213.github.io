<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端js八股</title>
      <link href="/2025/03/18/first-eassay/"/>
      <url>/2025/03/18/first-eassay/</url>
      
        <content type="html"><![CDATA[<h1 id="js数据类型有哪些"><a href="#js数据类型有哪些" class="headerlink" title="js数据类型有哪些"></a>js数据类型有哪些</h1><p><code>JavaScript</code>共有八种数据类型，分别是 <strong>Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt</strong>。</p><p>其中 <strong>Symbol</strong> 和 <strong>BigInt</strong> 是ES6 中新增的数据类型：</p><ul><li><strong>Symbol</strong>代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li><li><strong>BigInt</strong> 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li></ul><p>这些数据可以分为<strong>原始数据类型</strong>和<strong>引用数据类型（复杂数据类型）</strong>，他们在内存中的存储方式不同。</p><ul><li><strong>堆：</strong> 存放<strong>引用数据类型</strong>，引用数据类型占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；<strong>引用数据类型在栈中存储了指针</strong>，该指针指向堆中该实体的起始地址，如<code>Object</code>、<code>Array</code>、<code>Function</code>。</li><li><strong>栈：</strong> 存放<strong>原始数据类型</strong>，栈中的简单数据段，占据空间小，属于被频繁使用的数据，如<code>String</code>、<code>Number</code>、<code>Null</code>、<code>Boolean</code>。</li></ul><h1 id="null和undefined区别"><a href="#null和undefined区别" class="headerlink" title="null和undefined区别"></a>null和undefined区别</h1><p><code>Undefined</code> 和 <code>Null</code> 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 <code>undefined</code> 和 <code>null</code>。</p><ul><li><strong>undefined</strong> 代表的含义是<strong>未定义</strong>，一般变量<strong>声明了但还没有定义</strong>的时候会返回 <code>undefined</code>，<code>typeof</code>为<code>undefined</code></li><li><strong>null</strong> 代表的含义是<strong>空对象</strong>，null主要用于赋值给一些可能会返回对象的变量，作为初始化，<code>typeof</code>为<code>object</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="instanceof-运算符的实现原理及实现"><a href="#instanceof-运算符的实现原理及实现" class="headerlink" title="instanceof 运算符的实现原理及实现"></a>instanceof 运算符的实现原理及实现</h1><p><code>instanceof</code>运算符适用于检测构造函数的<code>prototype</code>属性上是否出现在某个实例对象的原型链上</p><p><code>instanceof</code> 运算符的原理是基于原型链的查找。当使用 <code>obj instanceof Constructor</code> 进行判断时，<code>JavaScript</code> 引擎会从 <code>obj</code> 的原型链上查找 <code>Constructor.prototype</code> 是否存在，如果存在则返回 <code>true</code>，否则继续在原型链上查找。如果查找到原型链的顶端仍然没有找到，则返回 <code>false</code>。</p><p><code>instanceof</code>运算符只能用于检查某个对象是否是某个构造函数的实例，不能用于基本类型的检查，如<code>string</code>、<code>number</code>等</p><p>「<a href="https://juejin.cn/spost/7272737742307065914#heading-3">手写代码- 实现一个intanceof操作符</a>」</p><h1 id="typeof-和-instanceof-区别"><a href="#typeof-和-instanceof-区别" class="headerlink" title="typeof 和 instanceof 区别"></a>typeof 和 instanceof 区别</h1><p><code>typeof</code>与<code>instanceof</code> 都是判断数据类型的方法，区别如下：</p><ul><li><code>typeof</code>会返回一个<strong>运算数的基本类型</strong>，<code>instanceof </code>返回的是<strong>布尔值</strong></li><li><code>instanceof</code> 可以准确判断<strong>引用数据类型</strong>，但是不能正确判断<strong>原始数据类型</strong></li><li><code>typeof</code>虽然可以判断原始数据类型（<code>null</code> 除外），但是无法判断引用数据类型（<code>function</code> 除外）</li></ul><h2 id="那为什么typeof判断null为object？"><a href="#那为什么typeof判断null为object？" class="headerlink" title="那为什么typeof判断null为object？"></a>那为什么typeof判断null为object？</h2><p>这是 <code>JavaScript</code> 语言的一个历史遗留问题，在第一版<code>JS</code>代码中用32位比特来存储值，通过值的<code>1-3</code>位来识别类型，前三位为<code>000</code>表示对象类型。而<code>null</code>是一个空值，二进制表示都为0，所以前三位也就是<code>000</code>，所以导致 <code>typeof null </code>返回 <code>&quot;object&quot;</code></p><h1 id="为什么0-1-0-2-0-3，如何让其相等"><a href="#为什么0-1-0-2-0-3，如何让其相等" class="headerlink" title="为什么0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等"></a>为什么0.1+0.2 ! &#x3D;&#x3D; 0.3，如何让其相等</h1><p>因为浮点数运算的精度问题。在计算机运行过程中，需要将数据转化成二进制，然后再进行计算。 因为浮点数自身小数位数的限制而截断的二进制在转化为十进制，就变成0.30000000000000004，所以在计算时会产生误差。</p><p><strong>解决方案</strong></p><ul><li><p>将其先转换成整数，再相加之后转回小数。具体做法为先乘10相加后除以10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=(<span class="number">0.1</span>*<span class="number">10</span>+<span class="number">0.2</span>*<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x===<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用number对象的toFixed方法，只保留一位小数点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n1 + n2).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="判断数组的方式有哪些"><a href="#判断数组的方式有哪些" class="headerlink" title="判断数组的方式有哪些"></a>判断数组的方式有哪些</h1><ul><li><p>通过Object.prototype.toString.call()做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>) === <span class="string">&#x27;Array&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>通过原型链做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>通过ES6的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray()</span><br></pre></td></tr></table></figure><p>做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArrray</span>(obj);</span><br></pre></td></tr></table></figure></li><li><p>通过instanceof做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="对类数组对象的理解，如何转化为数组"><a href="#对类数组对象的理解，如何转化为数组" class="headerlink" title="对类数组对象的理解，如何转化为数组"></a>对类数组对象的理解，如何转化为数组</h1><p>类数组也叫<strong>伪数组</strong>，类数组和数组类似，但<strong>不能调用数组方法</strong>，常见的类数组有<strong>arguments</strong>、通过<code>document.getElements</code>获取到的内容等，这些类数组具有<code>length</code>属性。</p><p><strong>转换方法</strong></p><ul><li><p>通过 <code>call</code> 调用数组的 <code>slice</code> 方法来实现转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike)</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>call</code> 调用数组的 <code>splice</code> 方法来实现转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span>.<span class="title function_">call</span>(arrayLike, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>apply</code> 调用数组的 <code>concat</code> 方法来实现转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([], arrayLike)</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>Array.from</code> 方法来实现转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike)</span><br></pre></td></tr></table></figure></li></ul><p><strong>Array.propotype.slice.call()是什么</strong> 比如<code>Array.prototype.slice.call(arguments)</code>这句里，就是把 <code>arguments</code> 当做当前对象。</p><p>也就是说 要调用的是 <code>arguments</code> 的 <code>slice</code> 方法，而<code>typeof arguments=&quot;Object&quot;</code> 而不是 <code>Array</code></p><p>它没有<code>slice</code>这个方法，通过这么<code>Array.prototype.slice.call</code>调用，JS的内部机制应该是 把<code>arguments</code>对象转化为<code>Array</code></p><h1 id="数组有哪些原生方法？"><a href="#数组有哪些原生方法？" class="headerlink" title="数组有哪些原生方法？"></a>数组有哪些原生方法？</h1><ul><li>数组和字符串的转换方法：<code>toString()</code>、<code>toLocalString()</code>、<code>join() </code>其中<code> join()</code> 方法可以指定转换为字符串时的分隔符。</li><li>数组尾部操作的方法 <code>pop()</code> 和<code> push()</code>，<code>push</code> 方法可以传入多个参数。</li><li>数组首部操作的方法 <code>shift()</code> 和 <code>unshift()</code> 重排序的方法 <code>reverse()</code> 和<code> sort()</code>，<code>sort()</code> 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li><li>数组连接的方法<code> concat()</code> ，返回的是拼接好的数组，不影响原数组。</li><li>数组截取办法 <code>slice()</code>，用于截取数组中的一部分返回，不影响原数组。</li><li>数组插入方法 <code>splice()</code>，影响原数组查找特定项的索引的方法，<code>indexOf()</code> 和 <code>lastIndexOf()</code> 迭代方法 <code>every()</code>、<code>some()</code>、<code>filter()</code>、<code>map()</code> 和<code>forEach()</code>方法</li><li>数组归并方法 <code>reduce() </code>和 <code>reduceRight()</code> 方法</li><li><strong>改变原数组的方法</strong>：<code>fill()</code>、<code>pop()</code>、<code>push()</code>、<code>shift()</code>、<code>splice()</code>、<code>unshift()</code>、<code>reverse()</code>、<code>sort()</code>；</li><li><strong>不改变原数组的方法</strong>：<code>concat()</code>、<code>every()</code>、<code>filter()</code>、<code>find()</code>、<code>findIndex()</code>、<code>forEach()</code>、<code>indexOf()</code>、<code>join()</code>、<code>lastIndexOf()</code>、<code>map()</code>、<code>reduce()</code>、<code>reduceRight()</code>、<code>slice()</code>、<code>some()</code>。</li></ul><h1 id="substring和substr的区别"><a href="#substring和substr的区别" class="headerlink" title="substring和substr的区别"></a>substring和substr的区别</h1><p>它们都是字符串方法，用于截取字符串的一部分，主要区别在于参数不同</p><ul><li><code>substring(startIndex, endIndex)</code>： 接收两个参数，一个起始索引和结束索引，来指定字符串范围，如果省略第二个参数，则截取到字符串末尾。</li><li><code>substr(startIndex, length)</code>： 接收两个参数，并返回从 <code>startIndex</code> 开始，长度为 <code>length</code> 的子字符串。如果省略第二个参数，则截取到字符串末尾。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">5</span>)); <span class="comment">// 输出: &quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">7</span>, <span class="number">5</span>)); <span class="comment">// 输出: &quot;World&quot;</span></span><br></pre></td></tr></table></figure><h1 id="object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别"><a href="#object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别" class="headerlink" title="object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别"></a>object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别</h1><p><strong>都是浅拷贝</strong></p><ul><li><code>Object.assign()</code>方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。</li><li>扩展操作符<code>（…）</code>使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 <code>symbols</code> 属性。</li></ul><h1 id="new操作符的实现原理"><a href="#new操作符的实现原理" class="headerlink" title="new操作符的实现原理"></a>new操作符的实现原理</h1><p><code>new</code>操作符用来创建一个对象，并将该对象绑定到构造函数的<code>this</code>上。</p><p>new操作符的执行过程：</p><ol><li>创建一个空对象</li><li>设置原型，将构造函数的原型指向空对象的 <code>prototype</code> 属性。</li><li>将 <code>this</code> 指向这个对象，通过apply执行构造函数。</li><li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象</li></ol><p>「<a href="https://juejin.cn/spost/7272737742307065914#heading-2">手写代码-实现一个new操作符</a>」</p><h1 id="for…in和for…of的区别"><a href="#for…in和for…of的区别" class="headerlink" title="for…in和for…of的区别"></a>for…in和for…of的区别</h1><p><code>for...in</code>和<code>for...of</code>都是<code>JavaScript</code>中的循环语句，而<code>for…of </code>是ES6新增的遍历方式，允许遍历一个含有<code>iterator</code>接口的数据结构（数组、对象等）并且返回各项的值，和<code>ES3</code>中的<code>for…in</code>的区别如下</p><ul><li><code>for…of </code>遍历获取的是<strong>对象的键值</strong>，<code>for…in</code> 获取的是<strong>对象的键名</strong>；</li><li><code>for… in</code> 会遍历对象的<strong>整个原型链</strong>，性能非常差不推荐使用，而 <code>for … of</code> 只遍历当前对象不会遍历原型链；</li><li>对于数组的遍历，<code>for…in</code> 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，<code>for…of</code> 只返回数组的下标对应的属性值；</li></ul><p><strong>总结</strong>：<code>for...in</code> 循环主要是为了遍历对象而生，不适用于遍历数组；<code>for...of</code> 循环可以用来遍历数组、类数组对象，字符串、<code>Set</code>、<code>Map</code> 以及 <code>Generator</code> 对象。</p><h1 id="如何使用for…of遍历对象"><a href="#如何使用for…of遍历对象" class="headerlink" title="如何使用for…of遍历对象"></a>如何使用for…of遍历对象</h1><p><strong>为什么不能遍历对象</strong></p><p><code>for…of</code>是作为ES6新增的遍历方式，能被其遍历的数据内部都有一个<strong>遍历器iterator接口</strong>，而数组、字符串、<code>Map</code>、<code>Set</code>内部已经实现，普通对象内部没有，所以在遍历的时候会报错。想要遍历对象，可以给对象添加一个<code>Symbol.iterator</code>属性，并指向一个迭代器即可</p><p>在迭代器里面，通过<code>Object.keys</code>获取对象所有的<code>key</code>，然后遍历返回<code>key 、value</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">js 代码解读复制代码<span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>*()&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">of</span> keys)&#123;</span><br><span class="line">        <span class="keyword">yield</span> [k,obj[k]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> [k,v] <span class="keyword">of</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k,v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对AJAX的理解，实现一个AJAX请求"><a href="#对AJAX的理解，实现一个AJAX请求" class="headerlink" title="对AJAX的理解，实现一个AJAX请求"></a>对AJAX的理解，实现一个AJAX请求</h1><p><code>AJAX</code>是 Asynchronous JavaScript and XML 的缩写，<strong>指的是通过 JavaScript 的 异步通信</strong>，从服务器获取 <code>XML</code> 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。 创建<code>AJAX</code>请求的步骤：</p><ul><li>创建一个 <code>XMLHttpRequest</code> 对象。</li><li>在这个对象上使用 <code>open</code> 方法创建一个 <code>HTTP</code> 请求，<code>open</code> 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li><li>在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 <code>setRequestHeader</code> 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 <code>XMLHttpRequest</code> 对象一共有 5 个状态，当它的状态变化时会触发<code>onreadystatechange</code> 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 <code>readyState</code> 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 <code>response</code> 中的数据来对页面进行更新了。</li><li>当对象的属性和监听函数设置完成后，最后调用 <code>send</code> 方法来向服务器发起请求，可以传入参数作为发送的数据体。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SERVER_URL</span> = <span class="string">&quot;/server&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 创建 Http 请求</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 设置状态监听函数</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 当请求成功时</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 设置请求失败时的监听函数</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 设置请求头信息</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"><span class="comment">// 发送 Http 请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h1 id="ajax、axios、fetch的区别"><a href="#ajax、axios、fetch的区别" class="headerlink" title="ajax、axios、fetch的区别"></a>ajax、axios、fetch的区别</h1><p><strong>ajax</strong></p><ul><li>基于原生<code>XHR</code>开发，<code>XHR</code>本身架构不清晰。</li><li>针对<strong>MVC</strong>编程，不符合现在前端MVVM的浪潮。</li><li>多个请求之间如果有先后关系的话，就会出现回调地狱</li><li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li></ul><p><strong>axios</strong></p><ul><li>支持<code>Promise</code>API</li><li>从浏览器中创建<code>XMLHttpRequest</code></li><li>从 <code>node.js</code> 创建 <code>http</code> 请求</li><li>支持请求拦截和响应拦截</li><li>自动转换<code>JSON</code>数据</li><li>客服端支持防止<code>CSRF/XSRF</code></li></ul><p><strong>fetch</strong></p><ul><li>浏览器原生实现的请求方式，ajax的替代品</li><li>基于标准 <code>Promise</code> 实现，支持<code>async/await</code></li><li><code>fetchtch</code>只对网络请求报错，对400，500都当做成功的请求，需要封装去处理</li><li>默认不会带<code>cookie</code>，需要添加配置项</li><li><code>fetch</code>没有办法原生监测请求的进度，而<code>XHR</code>可以。</li></ul><h1 id="forEach和map方法有什么区别"><a href="#forEach和map方法有什么区别" class="headerlink" title="forEach和map方法有什么区别"></a>forEach和map方法有什么区别</h1><p>两个方法都是用来遍历循环数组，区别如下：</p><ul><li><code>forEach()</code>对数据的操作会改变原数组，该方法没有返回值；</li><li><code>map()</code>方法不会改变原数组的值，<strong>返回一个新数组</strong>，新数组中的值为原数组调用函数处理之后的值；</li></ul><h1 id="什么是尾调用，使用尾调用有什么好处？"><a href="#什么是尾调用，使用尾调用有什么好处？" class="headerlink" title="什么是尾调用，使用尾调用有什么好处？"></a>什么是尾调用，使用尾调用有什么好处？</h1><p>尾调用就是在函数的<strong>最后一步调用函数</strong>，在一个函数里调用另外一个函数会<strong>保留当前执行的上下文</strong>，如果在函数尾部调用，因为已经是函数最后一步，所以这时可以不用保留当前的执行上下文，<strong>从而节省内存</strong>。但是ES6的尾调用只能在<strong>严格模式下开启</strong>，正常模式是无效的。</p><h1 id="你用过哪些设计模式"><a href="#你用过哪些设计模式" class="headerlink" title="你用过哪些设计模式"></a>你用过哪些设计模式</h1><ul><li><strong>单例模式</strong>：保证类只有一个实例，并提供一个访问它的全局访问点。</li><li><strong>工厂模式</strong>：用来创建对象，根据不同的参数返回不同的对象实例。</li><li><strong>策略模式</strong>：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</li><li><strong>装饰器模式</strong>：在不改变对象原型的基础上，对其进行包装扩展。</li><li><strong>观察者模式</strong>：定义了对象间一种一对多关系，当目标对象状态发生改变时，所有依赖它对对象都会得到通知。</li><li><strong>发布订阅模式</strong>： 基于一个主题&#x2F;事件通道，希望接收通知的对象通过自定义事件订阅主题，被激活事件的对象（通过发布主题事件的方式被通知)。</li></ul><h1 id="如何实现深浅拷贝"><a href="#如何实现深浅拷贝" class="headerlink" title="如何实现深浅拷贝"></a>如何实现深浅拷贝</h1><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li><pre><code>JSON.stringify()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">将js对象序列化，再通过</span><br><span class="line"></span><br></pre></td></tr></table></figure>JSON.parse<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  反序列</span><br><span class="line"></span><br><span class="line">  - 如果对象中有函数、`undefined`、`symbol`时，都会丢失</span><br><span class="line">  - 如果有正则表达式、`Error`对象等，会得到空对象</span><br><span class="line"></span><br><span class="line">「[手写代码-手写深拷贝](https://juejin.cn/spost/7272737742307065914#heading-8)」</span><br><span class="line"></span><br><span class="line">### 浅拷贝</span><br><span class="line"></span><br><span class="line">- `Objec.assign()` 拷贝对象</span><br><span class="line">- 扩展运算符</span><br><span class="line"></span><br><span class="line">「[手写代码-手写浅拷贝](https://juejin.cn/spost/7272737742307065914#heading-7)」</span><br><span class="line"></span><br><span class="line"># ES6</span><br><span class="line"></span><br><span class="line">## let、const、var的区别</span><br><span class="line"></span><br><span class="line">- 块级作用域：</span><br><span class="line"></span><br><span class="line">  块作用域由 &#123; &#125;包裹，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：</span><br><span class="line"></span><br><span class="line">  - 内层变量可能覆盖外层变量</span><br><span class="line">  - 用来计数的循环变量泄露为全局变量</span><br><span class="line"></span><br><span class="line">- **变量提升：** `var`存在变量提升，`let`和`const`不存在变量提升，即在变量只能在声明之后使用，否在会报错。</span><br><span class="line"></span><br><span class="line">- **给全局添加属性：** 浏览器的全局对象是`window`，`Node`的全局对象是`global`。`var`声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是`let`和`const`不会。</span><br><span class="line"></span><br><span class="line">- **重复声明：** `var`声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。`const`和`let`不允许重复声明变量。</span><br><span class="line"></span><br><span class="line">- **初始值设置：** 在变量声明时，`var `和`let`可以不用设置初始值。而`const`声明变量必须设置初始值。</span><br><span class="line"></span><br><span class="line">- **暂时性死区**：在使用`let`、`const`命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用`var`声明的变量不存在暂时性死区。</span><br><span class="line"></span><br><span class="line">## 箭头函数与普通函数的区别</span><br><span class="line"></span><br><span class="line">- 箭头函数是**匿名函数**，不能作为构造函数，使用`new`关键字。</span><br><span class="line">- 箭头函数没有`arguments`</span><br><span class="line">- 箭头函数没有自己的`this`，会获取所在的上下文作为自己的`this`</span><br><span class="line">- `call()`、`applay()`、`bind()`方法不能改变箭头函数中的`this`指向</span><br><span class="line">- 箭头函数没有`prototype`</span><br><span class="line">- 箭头函数不能用作`Generator`函数，不能使用`yeild`关键字</span><br><span class="line"></span><br><span class="line">## Set、Map的区别</span><br><span class="line"></span><br><span class="line">**Set**</span><br><span class="line"></span><br><span class="line">- 创建：`  new Set([1, 1, 2, 3, 3, 4, 2])`</span><br><span class="line">- `add(value)`：添加某个值，返回Set结构本身。</span><br><span class="line">- `delete(value)`：删除某个值，返回一个布尔值，表示删除是否成功。</span><br><span class="line">- `has(value)`：返回一个布尔值，表示该值是否为Set的成员。</span><br><span class="line">- `clear()`：清除所有成员，没有返回值。</span><br><span class="line"></span><br><span class="line">**Map**</span><br><span class="line"></span><br><span class="line">- `set(key, val):` 向`Map`中添加新元素</span><br><span class="line">- `get(key):` 通过键值查找特定的数值并返回</span><br><span class="line">- `has(key): `判断`Map`对象中是否有`Key`所对应的值，有返回`true`,否则返回`false`</span><br><span class="line">- `delete(key): `通过键值从`Map`中移除对应的数据</span><br><span class="line">- `clear():` 将这个`Map`中的所有元素删除</span><br><span class="line"></span><br><span class="line">#### 区别</span><br><span class="line"></span><br><span class="line">- `Map`是一种键值对的集合，和对象不同的是，键可以是任意值</span><br><span class="line">- `Map`可以遍历，可以和各种数据格式转换</span><br><span class="line">- `Set`是类似数组的一种的数据结构，类似数组的一种集合，但在Set中没有重复的值</span><br><span class="line"></span><br><span class="line">## map和Object的区别</span><br><span class="line"></span><br><span class="line">`map`和`Object`都是用键值对来存储数据，区别如下：</span><br><span class="line"></span><br><span class="line">- **键的类型**：`Map` 的键可以是**任意数据类型**（包括对象、函数、`NaN `等），而 `Object` 的键**只能是字符串**或者 `Symbol` 类型。</span><br><span class="line">- **键值对的顺序**：`Map`中的键值对是按照插入的顺序存储的，而对象中的键值对则没有顺序。</span><br><span class="line">- **键值对的遍例**：`Map` 的键值对可以使用 `for...of` 进行遍历，而 `Object` 的键值对需要手动遍历键值对。</span><br><span class="line">- **继承关系**：`Map `没有继承关系，而 `Object` 是所有对象的基类。</span><br><span class="line"></span><br><span class="line">## map和weakMap的区别</span><br><span class="line"></span><br><span class="line">它们是 `JavaScript` 中的两种不同的键值对集合，主要区别如下：</span><br><span class="line"></span><br><span class="line">1. `map`的键可以是任意类型，`weakMap`键只能是对象类型。</span><br><span class="line">2. `map` 使用常规的引用来管理键和值之间的关系，因此即使键不再使用，`map` 仍然会保留该键的内存。`weakMap` 使用弱引用来管理键和值之间的关系，因此如果键不再有其他引用，垃圾回收机制可以自动回收键值对。</span><br><span class="line"></span><br><span class="line">## 说说你对Promise的理解</span><br><span class="line"></span><br><span class="line">`Promise`是异步编程的一种解决方案，将异步操作以同步操作的流程表达出来，避免了地狱回调。</span><br><span class="line"></span><br><span class="line">`Promise`的实例有三个状态:</span><br><span class="line"></span><br><span class="line">- `Pending`（初始状态）</span><br><span class="line">- `Fulfilled`（成功状态）</span><br><span class="line">- `Rejected`（失败状态）</span><br><span class="line"></span><br><span class="line">`Promise`的实例有两个过程：</span><br><span class="line"></span><br><span class="line">- `pending` -&gt; `fulfilled` : **Resolved（已完成）**</span><br><span class="line"></span><br><span class="line">- `pending` -&gt; `rejected`：**Rejected（已拒绝）**</span><br><span class="line"></span><br><span class="line">  注意：一旦从进行状态变成为其他状态就永远不能更改状态了，其过程是不可逆的。</span><br><span class="line"></span><br><span class="line">`Promise`构造函数接收一个带有`resolve`和`reject`参数的回调函数。</span><br><span class="line"></span><br><span class="line">- `resolve`的作用是将`Promise`状态从`pending`变为`fulfilled`，在异步操作成功时调用，并将异步结果返回，作为参数传递出去</span><br><span class="line">- `reject`的作用是将`Promise`状态从`pending`变为`rejected`，在异步操作失败后，将异步操作错误的结果，作为参数传递出去</span><br><span class="line"></span><br><span class="line">`Promise`的缺点：</span><br><span class="line"></span><br><span class="line">- 无法取消 `Promise`，一旦新建它就会立即执行，无法中途取消。</span><br><span class="line">- 如果不设置回调函数，`Promise`内部抛出的错误，不会反应到外部。</span><br><span class="line">- 当处于`pending`状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</span><br><span class="line"></span><br><span class="line">## Promise方法</span><br><span class="line"></span><br><span class="line">- `promise.then()`  对应`resolve`成功的处理</span><br><span class="line">- `promise.catch()`对应`reject`失败的处理</span><br><span class="line">- `promise.all()`可以完成并行任务，将多个`Promise`实例数组，包装成一个新的`Promise`实例，返回的实例就是普通的`Promise`。有一个失败，代表该`Primise`失败。当所有的子`Promise`完成，返回值时全部值的数组</span><br><span class="line">- `promise.race()`类似`promise.all()`，区别在于有任意一个完成就算完成</span><br><span class="line">- `promise.allSettled()` 返回一个在所有给定的 `promise` 都已经 `fulfilled` 或 `rejected` 后的 `promise` ，并带有一个对象数组，每个对象表示对应的`promise` 结果。</span><br><span class="line"></span><br><span class="line">## promise.all 和 promise.allsettled 区别</span><br><span class="line"></span><br><span class="line">`Promise.all()` 和 `Promise.allSettled()` 都是用来处理多个 `Promise` 实例的方法，它们的区别在于以下几点：</span><br><span class="line"></span><br><span class="line">- **all:** 只有当所有`Promise`实例都`resolve`后，才会`resolve`返回一个由所有`Promise`返回值组成的数组。如果有一个`Promise`实例`reject`，就会立即被拒绝，并返回拒绝原因。`all`是团队的成功才算，如果有一个人失败就算失败。</span><br><span class="line">- **allSettled：** 等所有`Promise`执行完毕后，不管成功或失败， 都会吧每个`Promise`状态信息放到一个数组里面返回。</span><br><span class="line"></span><br><span class="line">## 对async/await 的理解</span><br><span class="line"></span><br></pre></td></tr></table></figure>async/await`其实**是Generator 的语法糖**，它能实现的效果都能用`then`链来实现，它是为优化`then`链而开发出来的。通过`async`关键字声明一个异步函数， `await `用于等待一个异步方法执行完成，**并且会阻塞执行**。 `async` 函数**返回的是一个 Promise 对象**，如果在函数中 `return` 一个变量，`async` 会把这个直接量通过 `Promise.resolve()` 封装成 `Promise` 对象。如果没有返回值，返回 `Promise.resolve(undefined)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## async/await对比Promise的优势</span><br><span class="line"></span><br><span class="line">- 代码可读性高，`Promise`虽然摆脱了回掉地狱，但自身的链式调用会影响可读性。</span><br><span class="line">- 相对`Promise`更优雅，传值更方便。</span><br><span class="line">- 对错误处理友好，可以通过`try/catch`捕获，`Promise`的错误捕获⾮常冗余</span><br><span class="line"></span><br><span class="line">## 谈谈你对ES6的理解</span><br><span class="line"></span><br><span class="line">- 解构赋值</span><br><span class="line">- 扩展运算符</span><br><span class="line">- 箭头函数</span><br><span class="line">- 模版字符串</span><br><span class="line">- `Set`、`Map`集合</span><br><span class="line">- 新增`class`类</span><br><span class="line">- `Proxy`</span><br><span class="line">- `Promise`</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line">## ES6模块和CommonJS模块有什么区别</span><br><span class="line"></span><br><span class="line">- 语法不同：</span><br><span class="line"></span><br><span class="line">  ES6 模块使用 import 和 export关键字来导入和导出模块，而 CommonJS 模块使用 require和 module.exports或 exports来导入和导出模块。</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  // ES6 模块</span><br><span class="line">  import &#123; foo &#125; from &#x27;./module&#x27;;</span><br><span class="line">  export const bar = &#x27;bar&#x27;;</span><br><span class="line">  </span><br><span class="line">  // CommonJS 模块</span><br><span class="line">  const foo = require(&#x27;./commonjs&#x27;);</span><br><span class="line">  exports.bar = &#x27;bar&#x27;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>异步加载: <code>ES6</code> 模块支持动态导入（dynamic import），<strong>可以异步加载模块</strong>。这使得在需要时按需加载模块成为可能，从而提高了性能。<code>CommonJS</code> 模块在设计时没有考虑异步加载的需求，通常在模块的顶部进行同步加载。</p></li></ul><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><ul><li><strong>prototype</strong> : js通过构造函数来创建对象，每个构造函数内部都会一个原型<code>prototype</code>属性，它指向另外一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。</li><li><em><strong>*proto*</strong></em>: 当使用构造函数创建一个实例对象后，可以通过<code>__proto__</code>访问到<code>prototype</code>属性。</li><li><strong>constructor</strong>：实例对象通过这个属性可以访问到构造函数</li></ul><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>每个实例对象都有一个<code>__proto__</code>属性指向它的构造函数的原型对象，而这个原型对象也会有自己的原型对象，一层一层向上，直到顶级原型对象<code>null</code>，这样就形成了一个原型链。</p><p>当访问对象的一个属性或方法时，当对象身上不存在该属性方法时，就会沿着原型链向上查找，直到查找到该属性方法位置。</p><p>原型链的顶层原型是<code>Object.prototype</code>，如果这里没有就只指向<code>null</code></p><h1 id="实现寄生组合继承"><a href="#实现寄生组合继承" class="headerlink" title="实现寄生组合继承"></a>实现寄生组合继承</h1><p>利用<code>Object.create()</code>方法，将子类的原型指向父类，实现继承父类的方法属性，修改时也不影响父类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="comment">// 执行父类构造函数</span></span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将子类的原型  指向父类</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 此时的狗早函数为父类的 需要指回自己</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">child1.<span class="title function_">sayName</span>(); <span class="comment">// &#x27;Tom&#x27;</span></span><br><span class="line">child1.<span class="title function_">sayAge</span>(); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h1 id="对闭包的理解已经它的使用场景"><a href="#对闭包的理解已经它的使用场景" class="headerlink" title="对闭包的理解已经它的使用场景"></a>对闭包的理解已经它的使用场景</h1><p><strong>闭包是指有权访问另一个函数作用域中变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p><p><strong>闭包优点：</strong></p><ul><li>创建全局私有变量，避免变量全局污染</li><li>可以实现封装、缓存等</li></ul><p><strong>闭包缺点：</strong></p><ul><li>创建的变量不能被回收，容易消耗内存，使用不当会导致内存溢出<ul><li><strong>解决：</strong> 在不需要使用的时候把变量设为<code>null</code></li></ul></li></ul><p><strong>使用场景：</strong></p><ul><li>用于创建全局私有变量</li><li>封装类和模块</li><li>实现函数柯里化</li></ul><h2 id="闭包一定会造成内存泄漏吗？"><a href="#闭包一定会造成内存泄漏吗？" class="headerlink" title="闭包一定会造成内存泄漏吗？"></a>闭包一定会造成内存泄漏吗？</h2><p>闭包并不一定会造成内存泄漏，如果在使用闭包后变量没有及时销毁，可能会造成内存泄漏的风险。只要合理的使用闭包，就不会造成内存泄漏。</p><h1 id="对作用域、作用域链的理解"><a href="#对作用域、作用域链的理解" class="headerlink" title="对作用域、作用域链的理解"></a>对作用域、作用域链的理解</h1><p><strong>作用域</strong>是一个变量或函数的可访问范围，作用域控制着变量或函数的可见性和生命周期。</p><ol><li><strong>全局作用域</strong>：可以全局访问<ul><li>最外层函数和最外层定义的变量拥有全局作用域</li><li><code>window</code>上的对象属性方法拥有全局作用域</li><li>为定义直接复制的变量自动申明拥有全局作用域</li><li>过多的全局作用域变量会导致变量全局污染，命名冲突</li></ul></li><li><strong>函数作用域</strong>：只能在函数中访问使用哦<ul><li>在函数中定义的变量，都只能在内部使用，外部无法访问</li><li>内层作用域可以访问外层，外层不能访问内存作用域</li></ul></li><li>ES6中的<strong>块级作用域</strong>：只在代码块中访问使用<ul><li>使用ES6中新增的<code>let</code>、<code>const</code>什么的变量，具备块级作用域，块级作用域可以在函数中创建（由{}包裹的代码都是块级作用域）</li><li><code>let</code>、<code>const</code>申明的变量不会变量提升，<code>const</code>也不能重复申明</li><li>块级作用域主要用来解决由变量提升导致的变量覆盖问题</li></ul></li></ol><p><strong>作用域链：</strong> 变量在指定的作用域中没有找到，会依次向一层作用域进行查找，直到全局作用域。这个查找的过程被称为作用域链。</p><h1 id="call-、bind（）、-apply-的区别？"><a href="#call-、bind（）、-apply-的区别？" class="headerlink" title="call() 、bind（）、 apply() 的区别？"></a>call() 、bind（）、 apply() 的区别？</h1><ul><li>都可以用作改变<code>this</code>指向</li><li><code>call</code>和<code>apply</code>的区别在于传参，<code>call</code>、<code>bind</code>都是传入对象。<code>apply</code>传入一个数组。</li><li><code>call</code>、<code>apply</code>改变<code>this</code>指向后会立即执行函数，<code>bind</code>在改变<code>this</code>后返回一个函数，不会立即执行函数，需要手动调用。</li></ul><p>「<a href="https://juejin.cn/spost/7272737742307065914#heading-9">手写代码-call、bind、apply</a>」</p><h3 id="连续多个-bind，最后this指向是什么？"><a href="#连续多个-bind，最后this指向是什么？" class="headerlink" title="连续多个 bind，最后this指向是什么？"></a>连续多个 bind，最后this指向是什么？</h3><p>在 <code>JavaScript</code> 中，连续多次调用 <code>bind</code> 方法，最终函数的 <code>this</code> 上下文是由<strong>第一次调用 bind 方法</strong>的参数决定的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&#x27;obj3&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn1 = getName.<span class="title function_">bind</span>(obj1).<span class="title function_">bind</span>(obj2).<span class="title function_">bind</span>(obj3);</span><br><span class="line"><span class="title function_">fn1</span>(); <span class="comment">// 输出 &quot;obj1&quot;</span></span><br></pre></td></tr></table></figure><h1 id="浏览器的垃圾回收机制"><a href="#浏览器的垃圾回收机制" class="headerlink" title="浏览器的垃圾回收机制"></a>浏览器的垃圾回收机制</h1><p><strong>垃圾回收</strong>：<code>JavaScript</code>代码运行时，需要分配内存空间来储存变量和值。当变量不再参与运行时，就需要系统收回被占用的内存空间。如果不及时清理，会造成系统卡顿、内存溢出，这就是垃圾回收。</p><p>在 V8 中，会把堆分为<strong>新生代和老生代</strong>两个区域，新生代中存放的是生存时间短的对象，老生代中存放生存时间久的对象：</p><ul><li><p>Major  GC(主垃圾回收器)</p><p>：主要负责老生代垃圾的回收</p><ul><li>内存占用比较小</li></ul></li><li><p>Minor GC(副垃圾回收器)</p><p>：主要负责新生代垃圾的回收</p><ul><li>对象的占用空间大  对象存活时间长 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b90d49a71ff04b1b926a00e4acc3cb8d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=801&h=540&s=47668&e=png&b=fefefe" alt="img"></li></ul></li></ul><h3 id="新生代（副垃圾回收器）"><a href="#新生代（副垃圾回收器）" class="headerlink" title="新生代（副垃圾回收器）"></a>新生代（副垃圾回收器）</h3><p>副垃圾回收器主要负责新⽣代的垃圾回收。大多数的对象最开始都会被分配在新生代，该存储空间相对较小，分为两个空间：<strong>from 空间</strong>（对象区）和 <strong>to 空间</strong>（空闲区）。</p><ul><li>新增变量会放到<code>To</code>空间，当空间满后需要执行一次垃圾清理操作</li><li>对垃圾数据进行标记，标记完成后<strong>将存活的数据复制到From空间中</strong>，有序排列</li><li>交换两个空间，原来的<code>To</code>变成<code>From</code>，旧的<code>From</code>变成<code>To</code></li></ul><h3 id="老生代（主垃圾回收器）"><a href="#老生代（主垃圾回收器）" class="headerlink" title="老生代（主垃圾回收器）"></a>老生代（主垃圾回收器）</h3><p>主垃圾回收器主要负责⽼⽣代中的垃圾回收。存储一些占用空间大、存活时间长的数据，采用<strong>标记清除</strong>算法进行垃圾回收。</p><p>主要分为<strong>标记</strong>、<strong>清除</strong>两个阶段。</p><ul><li><strong>标记</strong>：将所有的变量打上标记0，然后从根节点(<code>window</code>对象、DOM树等)开始遍历，把存活的变量标记为1</li><li><strong>清除</strong>：清除标记为0的对象，释放内存。清除后将1的变量改为0，方便下一轮回收。</li></ul><p>对⼀块内存多次执⾏标记清除算法后，会<strong>产⽣⼤量不连续的内存碎⽚</strong>。⽽碎⽚过多会导致⼤对象⽆法分配到⾜够的连续内存，于是⼜引⼊了另外⼀种算法——<strong>标记整理</strong>。</p><p><strong>标记整理</strong>的标记过程仍然与标记清除算法⾥的是⼀样的，先标记可回收对象，但后续步骤不是直接对可回收对象进⾏清理，⽽是让所有<strong>存活的对象都向⼀端移动</strong>，然后直接清理掉这⼀端之外的内存。</p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>一个对象被引用一次，引用数就+1，反之就-1。当引用为0，就会出发垃圾回收。</p><p>这种方式会产生一个问题，在循环引用时，引用数永远不会为0，无法回收。</p><h2 id="哪些情况会导致内存泄漏"><a href="#哪些情况会导致内存泄漏" class="headerlink" title="哪些情况会导致内存泄漏"></a>哪些情况会导致内存泄漏</h2><ul><li>意外的全局变量：由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</li><li>被遗忘的计时器或回调函数：设置了 <code>setInterval</code> 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li><li>脱离 <code>DOM</code> 的引用：获取一个 <code>DOM</code> 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</li><li>闭包：不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li></ul><h1 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h1><h2 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 instanceof 方法</span></span><br><span class="line"><span class="comment"> * 用法：instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、通过 Object.getPrototypeOf 获取 obj 的原型</span></span><br><span class="line"><span class="comment"> *  2、循环判断 objProtoType 是否和 constructor 的原型相等</span></span><br><span class="line"><span class="comment"> *    2.1、如果相等就返回 true</span></span><br><span class="line"><span class="comment"> *    2.2、如果不相等 就重新赋值一下 obj 的原型 进入下一次循环</span></span><br><span class="line"><span class="comment"> *  3、判断是 objProtoType 是否为空 如果为空就说明不存在 返回 false</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 需要判断的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">constructor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">obj, type</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> objPrototype = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!objPrototype) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (objPrototype === type.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    objPrototype = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(objPrototype)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写new操作符"><a href="#手写new操作符" class="headerlink" title="手写new操作符"></a>手写new操作符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 new 操作符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 用法：创建一个实例化对象</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1、判断传入的 fn 是否为 function</span></span><br><span class="line"><span class="comment"> * 2、创建一个空对象</span></span><br><span class="line"><span class="comment"> * 3、将这个空对象的原型设置为构造函数的 prototype 属性。</span></span><br><span class="line"><span class="comment"> * 4、使用 apply 执行构造函数 并传入参数 arguments 获取函数的返回值</span></span><br><span class="line"><span class="comment"> * 5、判断这个返回值 如果返回的是 Object || Function 类型 就返回该对象 否则返回创建的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 构造函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">     <span class="comment">// 判断 fn 是否为函数</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;fn must be a function&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个空的对象</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将这个空对象的原型设置为构造函数的 prototype 属性。</span></span><br><span class="line">  obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 apply 执行构造函数 传入参数 获取返回值</span></span><br><span class="line">  <span class="keyword">let</span> result = fn.<span class="title function_">apply</span>(obj, args)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断这个返回值 如果返回的是 Object || Function 类型 就返回该对象 否则返回创建的对象</span></span><br><span class="line">  <span class="keyword">const</span> flag = result &amp;&amp; (<span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> result === <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写深浅拷贝"><a href="#手写深浅拷贝" class="headerlink" title="手写深浅拷贝"></a>手写深浅拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 浅拷贝</span></span><br><span class="line"><span class="comment"> * 用法：浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断是否为对象</span></span><br><span class="line"><span class="comment"> *  2、根据obj类型创建一个新的对象</span></span><br><span class="line"><span class="comment"> *  3、for in 遍历对象 拿到 key</span></span><br><span class="line"><span class="comment"> *  4、判断 key 是否在 obj 中</span></span><br><span class="line"><span class="comment"> *  5、将 key 作为新对象的key 并赋值 value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">obj</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 只拷贝对象</span></span><br><span class="line">  <span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新的对象</span></span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环遍历 obj 将 key 作为 newObj 的 key 并赋值value</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 判断 key 是否在 obj 中</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 深拷贝</span></span><br><span class="line"><span class="comment"> * 用法：拷贝一个对象的属性值 如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断是否为对象</span></span><br><span class="line"><span class="comment"> *  2、判段对象是否在 map 中 如果存在就不需要操作</span></span><br><span class="line"><span class="comment"> *  3、将 obj 放入 map 中 避免重复引用</span></span><br><span class="line"><span class="comment"> *  4、for in 遍历对象 拿到 key 判断 key 是否在 obj 中</span></span><br><span class="line"><span class="comment"> *  5、value 如果为对象 就递归拷贝 否则就赋值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">obj</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; [map=new Map()]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj, map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断 obj 是否在 map 中存在 如果存在就不需要递归调用 直接返回数据</span></span><br><span class="line">  <span class="keyword">if</span> (map.<span class="title function_">get</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> map.<span class="title function_">get</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 放入 map 中 记录当前对象 避免重复拷贝 循环引用</span></span><br><span class="line">  map.<span class="title function_">set</span>(obj, newObj)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 如果 value 还是一个对象 递归获取 否则就赋值</span></span><br><span class="line">      newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">deepCopy</span>(obj[key], map) : obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写call"><a href="#手写call" class="headerlink" title="手写call"></a>手写call</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 call</span></span><br><span class="line"><span class="comment"> * 用法：call 方法用于调用一个函数，并指定函数内部 this 的指向，传入一个对象</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断 this 是否指向一个函数  只有函数才可以执行</span></span><br><span class="line"><span class="comment"> *  2、获取传入的 context 上下文 也就是我们要指向的 如果不存在就指向 window</span></span><br><span class="line"><span class="comment"> *  3、将当前 this 也就是外部需要执行的函数 绑定到 context 上 然后执行获取 result 传入 ...args 确保参数位置正确</span></span><br><span class="line"><span class="comment"> *  4、删除 context 对象的 fn 属性 并将 result 返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存this</span></span><br><span class="line"></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写apply"><a href="#手写apply" class="headerlink" title="手写apply"></a>手写apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 apply</span></span><br><span class="line"><span class="comment"> * 用法：apply 方法用于调用一个函数，并指定函数内部 this 的指向，传入一个数组</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断 this 是否指向一个函数  只有函数才可以执行</span></span><br><span class="line"><span class="comment"> *  2、获取传入的 context 上下文 也就是我们要指向的 如果不存在就指向 window</span></span><br><span class="line"><span class="comment"> *  3、将当前 this 也就是外部需要执行的函数 绑定到 context 上的一个 fn 属性上</span></span><br><span class="line"><span class="comment"> *  4、执行 fn 函数 判断 args 是否有 如果没有参数就直接执行 如果有参数 将参数展开传入 fn</span></span><br><span class="line"><span class="comment"> *  5、删除 context 对象的 fn 属性 并将 result 返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context, args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 和 call 一样 只不过传入的参数只有一个 类型为数组 在执行 fn 的时候将参数展开</span></span><br><span class="line">  context = context || <span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = args ? context.<span class="title function_">fn</span>(...args) : context.<span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写bind"><a href="#手写bind" class="headerlink" title="手写bind"></a>手写bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 手写 bind</span></span><br><span class="line"><span class="comment"> * 用法：bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> *  1、判断 this 是否指向一个函数  只有函数才可以执行</span></span><br><span class="line"><span class="comment"> *  2、获取传入的 context 上下文 也就是我们要指向的 如果不存在就指向 window</span></span><br><span class="line"><span class="comment"> *  3、将当前 this 也就是外部需要执行的函数 绑定到 context 上的一个 fn 属性上</span></span><br><span class="line"><span class="comment"> *  4、返回一个函数 供外部调用 执行函数后传入新的参数</span></span><br><span class="line"><span class="comment"> *  5、执行在闭包内缓存的 fn 将两次参数一起传入 删除 fn 返回 result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context, ...args1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="variable language_">window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 和 call apply 不一样的是 bind 返回一个函数 需要在外部执行  参数为多个对象 且返回的对象里也会有参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args1, ...args2)</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 前端 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传（批量+git）</title>
      <link href="/2025/03/18/file-upload/"/>
      <url>/2025/03/18/file-upload/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传（批量-git）"><a href="#文件上传（批量-git）" class="headerlink" title="文件上传（批量+git）"></a>文件上传（批量+git）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;document-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 左侧内容区域 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-section&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 顶部标题区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>AI-ARG 文档助手<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;subtitle&quot;</span>&gt;</span>上传您的文档，让AI为您分析和处理<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 上传模式切换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-mode-switch&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 文件上传按钮 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;[&#x27;mode-btn&#x27;, &#123; active: uploadMode === &#x27;file&#x27; &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;uploadMode = &#x27;file&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326z m1.8 562H232V136h302v216c0 23.2 18.8 42 42 42h216v494z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- git上传按钮 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&quot;[&#x27;mode-btn&#x27;, &#123; active: uploadMode === &#x27;git&#x27; &#125;]&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;uploadMode = &#x27;git&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 213.1 23.5 23.2 38.1 55.4 38.1 91v112.5c0.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Git仓库<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 文件上传区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;uploadMode === &#x27;file&#x27;&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">class</span>=<span class="string">&quot;upload-area&quot;</span> </span></span><br><span class="line"><span class="tag">             @<span class="attr">dragover.prevent</span> </span></span><br><span class="line"><span class="tag">             @<span class="attr">drop.prevent</span>=<span class="string">&quot;handleDrop&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;dragging&#x27;: isDragging &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>将文件拖拽到此处<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;upload-text&quot;</span>&gt;</span>或<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;upload-button&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>浏览文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> </span></span><br><span class="line"><span class="tag">                     @<span class="attr">change</span>=<span class="string">&quot;handleFileSelect&quot;</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">multiple</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">accept</span>=<span class="string">&quot;.pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.mp3,.wav,.mp4,.avi,.mov&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;upload-hint&quot;</span>&gt;</span>支持文档、图片、音频和视频格式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Git仓库上传区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;git-upload-area&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;git-form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>Git仓库地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;gitRepo&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;例如：https://github.com/username/repo.git&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;gitUsername&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;Git用户名&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span>私人令牌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;password-input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">:type</span>=<span class="string">&quot;showToken ? &#x27;text&#x27; : &#x27;password&#x27;&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">v-model</span>=<span class="string">&quot;gitToken&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">placeholder</span>=<span class="string">&quot;输入您的私人访问令牌&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;toggle-pwd&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showToken = !showToken&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">v-if</span>=<span class="string">&quot;showToken&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3-7.7 16.2-7.7 35.2 0 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M508 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176z m0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">v-else</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M942.3 486.4l-0.1-0.1-0.1-0.1c-36.4-76.7-80-138.7-130.7-186L760.7 351c43.7 40.2 81.5 93.7 114.1 160.9C791.5 684.2 673.4 766 512 766c-51.3 0-98.3-8.3-141.2-25.1l-54.5 54.5C366.3 819.2 435.3 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.3zM878.3 154.2l-42.4-42.4c-3.1-3.1-8.2-3.1-11.3 0L707.8 228.5C649.4 200.2 584.2 186 512 186c-192.2 0-335.4 100.5-430.2 300.3v0.1c-7.7 16.2-7.7 35.2 0 51.5 36.4 76.7 80 138.7 130.7 186.1L111.8 824.5c-3.1 3.1-3.1 8.2 0 11.3l42.4 42.4c3.1 3.1 8.2 3.1 11.3 0l712.8-712.8c3.1-3 3.1-8.1 0-11.2zM398.9 537.4c-1.9-8.2-2.9-16.7-2.9-25.4 0-61.9 50.1-112 112-112 8.7 0 17.2 1 25.4 2.9L398.9 537.4z m184.5-184.5C560.5 342.1 535 336 508 336c-97.2 0-176 78.8-176 176 0 27 6.1 52.5 16.9 75.4L232.7 703.5c-43.7-40.2-81.5-93.7-114.1-160.9C202 369.8 320.1 258 512 258c51.3 0 98.3 8.3 141.2 25.1l-69.8 69.8z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;git-submit-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleGitUpload&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;isUploading&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; isUploading ? &#x27;克隆中...&#x27; : &#x27;克隆仓库&#x27; &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 分割线 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 右侧文件列表 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-section&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;has-files&#x27;: files.length &gt; 0 &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;submit-btn&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;files.length &gt; 0&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpload&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;isUploading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; isUploading ? &#x27;上传中...&#x27; : &#x27;开始上传&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-list&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;files.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(file, index) in files&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-info&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-icon-name&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;file-name&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;file.name&quot;</span>&gt;</span>&#123;&#123; file.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;file-size&quot;</span>&gt;</span>&#123;&#123; formatFileSize(file.size) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-actions&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;file.uploading&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; width: file.progress + &#x27;%&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;progress-text&quot;</span>&gt;</span>&#123;&#123; file.progress &#125;&#125;%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;removeFile(index)&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M864 256H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tooltip&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;empty-state&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;48&quot;</span> <span class="attr">height</span>=<span class="string">&quot;48&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#EDE8DC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.8 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#EDE8DC&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>暂无文件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;empty-hint&quot;</span>&gt;</span>请先选择或拖拽文件到左侧上传区域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DocumentUpload&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">files</span>: [],</span><br><span class="line">      <span class="attr">isDragging</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">isUploading</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">uploadMode</span>: <span class="string">&#x27;file&#x27;</span>, <span class="comment">// &#x27;file&#x27; 或 &#x27;git&#x27;</span></span><br><span class="line">      <span class="attr">gitRepo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">gitUsername</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">gitToken</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">showToken</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//处理文件拖放操作</span></span><br><span class="line">    <span class="title function_">handleDrop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isDragging</span> = <span class="literal">false</span><span class="comment">//将 isDragging 设置为 false，表示拖放操作结束</span></span><br><span class="line">      <span class="keyword">const</span> files = <span class="title class_">Array</span>.<span class="title function_">from</span>(e.<span class="property">dataTransfer</span>.<span class="property">files</span>)<span class="comment">//从拖放事件中获取文件列表，并将其转换为数组</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addFiles</span>(files)<span class="comment">//调用 addFiles 方法添加这些文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//处理文件选择操作（如通过文件选择对话框）</span></span><br><span class="line">    <span class="title function_">handleFileSelect</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> files = <span class="title class_">Array</span>.<span class="title function_">from</span>(e.<span class="property">target</span>.<span class="property">files</span>)<span class="comment">//从文件选择事件中获取文件列表，并将其转换为数组</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addFiles</span>(files)<span class="comment">//调用 addFiles 方法添加这些文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//添加文件到组件的文件列表中</span></span><br><span class="line">    <span class="title function_">addFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">      files.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;<span class="comment">//遍历传入的文件数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isValidFile</span>(file)) &#123;<span class="comment">//对每个文件，检查其是否是有效文件(通过 isValidFile 方法)</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">files</span>.<span class="title function_">push</span>(&#123;<span class="comment">//如果有效，将文件信息添加到组件的 files 数组中</span></span><br><span class="line">            file,<span class="comment">//文件对象</span></span><br><span class="line">            <span class="attr">name</span>: file.<span class="property">name</span>,<span class="comment">//名称</span></span><br><span class="line">            <span class="attr">size</span>: file.<span class="property">size</span>,<span class="comment">//大小</span></span><br><span class="line">            <span class="attr">progress</span>: <span class="number">0</span>,<span class="comment">//进度</span></span><br><span class="line">            <span class="attr">uploading</span>: <span class="literal">false</span><span class="comment">//上传状态</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//验证文件类型是否有效</span></span><br><span class="line">    <span class="title function_">isValidFile</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> validTypes = [<span class="comment">//定义一个有效的文件类型数组</span></span><br><span class="line">        <span class="string">&#x27;.pdf&#x27;</span>, <span class="string">&#x27;.doc&#x27;</span>, <span class="string">&#x27;.docx&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;.wav&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">      <span class="keyword">return</span> validTypes.<span class="title function_">some</span>(<span class="function"><span class="params">type</span> =&gt;</span> file.<span class="property">name</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">endsWith</span>(type))<span class="comment">///检查文件名是否以这些类型之一结尾</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//格式化文件大小为可读的格式</span></span><br><span class="line">    <span class="title function_">formatFileSize</span>(<span class="params">bytes</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bytes === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;0 B&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> k = <span class="number">1024</span></span><br><span class="line">      <span class="keyword">const</span> sizes = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;KB&#x27;</span>, <span class="string">&#x27;MB&#x27;</span>, <span class="string">&#x27;GB&#x27;</span>]</span><br><span class="line">      <span class="keyword">const</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">log</span>(bytes) / <span class="title class_">Math</span>.<span class="title function_">log</span>(k))</span><br><span class="line">      <span class="comment">//返回格式化后的字符串（保留两位小数）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">parseFloat</span>((bytes / <span class="title class_">Math</span>.<span class="title function_">pow</span>(k, i)).<span class="title function_">toFixed</span>(<span class="number">2</span>)) + <span class="string">&#x27; &#x27;</span> + sizes[i]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从文件列表中移除指定索引的文件</span></span><br><span class="line">    <span class="comment">//使用 splice 方法从 files 数组中删除指定索引的文件</span></span><br><span class="line">    <span class="title function_">removeFile</span>(<span class="params">index</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">files</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//处理文件上传操作</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleUpload</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isUploading</span>) <span class="keyword">return</span><span class="comment">//如果正在上传（isUploading 为 true），直接返回</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isUploading</span> = <span class="literal">true</span><span class="comment">//防止重复点击</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">files</span>) &#123;</span><br><span class="line">        file.<span class="property">uploading</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 模拟上传进度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i += <span class="number">10</span>) &#123;</span><br><span class="line">          file.<span class="property">progress</span> = i</span><br><span class="line">          <span class="comment">//从 0 到 100，每次增加 10，间隔 200ms</span></span><br><span class="line">          <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">200</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        file.<span class="property">uploading</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isUploading</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">files</span> = []</span><br><span class="line">      <span class="comment">//所有文件上传完成后，重置 isUploading 为 false，并清空文件列表</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//处理 Git 仓库克隆操作</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleGitUpload</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isUploading</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">gitRepo</span> || !<span class="variable language_">this</span>.<span class="property">gitUsername</span> || !<span class="variable language_">this</span>.<span class="property">gitToken</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;请填写完整的Git仓库信息&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isUploading</span> = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// 这里添加实际的Git克隆逻辑(实际逻辑未实现，仅通过 setTimeout 模拟延迟)</span></span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isUploading</span> = <span class="literal">false</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 清空表单</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">gitRepo</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">gitUsername</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">gitToken</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="selector-class">.document-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fafafa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">80vh</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.08</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-section</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分割线 */</span></span><br><span class="line"><span class="selector-class">.divider</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, transparent, <span class="number">#EDE8DC</span>, transparent);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right-section</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">16px</span> <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right-section</span><span class="selector-class">.has-files</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">80vh</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-title</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-title</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.empty-state</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.empty-state</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#EDE8DC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.empty-state</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.empty-hint</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-area</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#F7F4ED</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-area</span><span class="selector-class">.dragging</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">121</span>, <span class="number">16</span>, <span class="number">0.05</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-icon</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-button</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.8rem</span> <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff6600</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-hint</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.75rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f8f8f8</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-info</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-icon-name</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-icon-name</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-name</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1a1a1a</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-size</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-actions</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-text</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delete-btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delete-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff4444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delete-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(<span class="number">4px</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.4rem</span> <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.6rem</span> <span class="number">1.2rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff6600</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.submit-btn</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">  <span class="attribute">transform</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Material Icons */</span></span><br><span class="line"><span class="selector-class">.material-icons</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Material Icons&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: normal;</span><br><span class="line">  <span class="attribute">text-transform</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">word-wrap</span>: normal;</span><br><span class="line">  <span class="attribute">direction</span>: ltr;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加新的样式 */</span></span><br><span class="line"><span class="selector-class">.upload-mode-switch</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mode-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.8rem</span> <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mode-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mode-btn</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-upload-area</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-form</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#EDE8DC</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ff7910</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.password-input</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toggle-pwd</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toggle-pwd</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-submit-btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff7910</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-submit-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.git-submit-btn</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>c</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/18/hello-world/"/>
      <url>/2025/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
